package pl.zimowski.karty;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HandEngine {

	private static final Logger log = LoggerFactory.getLogger(HandEngine.class);

	/**
	 * Possible types of hands in a texas holdem game.
	 */
	public enum HandTypes {
		HighCard,
		Pair,
		TwoPair,
		Trips,
		Straight,
		Flush,
		FullHouse,
		FourOfAKind,
		StraightFlush
	}

	public static final int CARD_JOKER = 52;

	// The total number of cards in a deck
	public static final int NUMBER_OF_CARDS = 52;

	public static final int NUMBER_OF_CARDS_WITHOUT_JOKER = 53;

	private static final int HANDTYPE_SHIFT = 24;

	private static final int TOP_CARD_SHIFT = 16;

	private static final int TOP_CARD_MASK = 0x000F0000;

	private static final int SECOND_CARD_SHIFT = 12;

	private static final int SECOND_CARD_MASK = 0x0000F000;

	private static final int THIRD_CARD_SHIFT = 8;

	private static final int FOURTH_CARD_SHIFT = 4;

	private static final int FIFTH_CARD_SHIFT = 0;

	private static final int FIFTH_CARD_MASK = 0x0000000F;

	private static final int CARD_WIDTH = 4;

	private static final int CARD_MASK = 0x0F;

	/* ~~~~~~~~~~~~~~~~~~~ Lookup Tables ~~~~~~~~~~~~~~~~~~~ */

	// Bit count table from snippets.org
	private static final byte[] _bitCountTable = initBitCountTable();

	private static byte[] initBitCountTable() {
		return new byte[] {
			0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4,  /* 0   - 15  */
			1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,  /* 16  - 31  */
			1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,  /* 32  - 47  */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 48  - 63  */
			1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,  /* 64  - 79  */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 80  - 95  */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 96  - 111 */
			3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,  /* 112 - 127 */
			1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5,  /* 128 - 143 */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 144 - 159 */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 160 - 175 */
			3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,  /* 176 - 191 */
			2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,  /* 192 - 207 */
			3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,  /* 208 - 223 */
			3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7,  /* 224 - 239 */
			4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8   /* 240 - 255 */
		};
	}

	private static final short[] _bitsAndStrTable = initBitsAndStrTable();

	private static short[] initBitsAndStrTable() {
		return new short[] {
			0x00, 0x04, 0x04, 0x08, 0x04, 0x08, 0x08, 0x0c, 0x04, 0x08,
			0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x10, 0x04, 0x08, 0x08, 0x0c,
			0x08, 0x0c, 0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x17, 0x04, 0x08, 0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x10,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x17, 0x1b, 0x04, 0x08, 0x08, 0x0c, 0x08, 0x0c,
			0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x17, 0x1b, 0x1b, 0x1f, 0x04, 0x08,
			0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x1b, 0x1f, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x17, 0x1b,
			0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 0x04, 0x08, 0x08, 0x0c,
			0x08, 0x0c, 0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x1b, 0x1f, 0x1f, 0x23, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x17, 0x1b, 0x1b, 0x1f,
			0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x04, 0x08, 0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x10,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x1b, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x1b, 0x1f, 0x1f, 0x23,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1b, 0x1f,
			0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x04, 0x08, 0x08, 0x0c, 0x08, 0x0c,
			0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x1b, 0x1f,
			0x1f, 0x23, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27,
			0x27, 0x2b, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x27, 0x2b, 0x17, 0x1b, 0x1b, 0x1f, 0x1b, 0x1f,
			0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1b, 0x1f, 0x1f, 0x23,
			0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27,
			0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x04, 0x08,
			0x08, 0x0c, 0x08, 0x0c, 0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x1b, 0x1f, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x1b, 0x1f, 0x1f, 0x23, 0x08, 0x0c, 0x0c, 0x10,
			0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23,
			0x1f, 0x23, 0x23, 0x27, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23,
			0x23, 0x27, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b,
			0x27, 0x2b, 0x2b, 0x2f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27,
			0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x29, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x29, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x29, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29,
			0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x17, 0x1b,
			0x1b, 0x1f, 0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23,
			0x1f, 0x23, 0x23, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b,
			0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27,
			0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b,
			0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x04, 0x08, 0x08, 0x0c,
			0x08, 0x0c, 0x0c, 0x10, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x17, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x1b, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x1b, 0x1f,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x1b, 0x1f, 0x1f, 0x23, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x08, 0x0c,
			0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x1b, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27,
			0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1b, 0x1f,
			0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27,
			0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10, 0x10, 0x15, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x1b, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15,
			0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23, 0x23, 0x27, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25,
			0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x2b, 0x2f,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27,
			0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f,
			0x2b, 0x2f, 0x2f, 0x33, 0x08, 0x0c, 0x0c, 0x10, 0x0c, 0x10,
			0x10, 0x15, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x1b,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1f, 0x23, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1f, 0x23,
			0x23, 0x27, 0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x0c, 0x10, 0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27,
			0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x0c, 0x10, 0x10, 0x15,
			0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x10, 0x15,
			0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x23, 0x27,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x29, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29,
			0x25, 0x29, 0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25,
			0x25, 0x29, 0x25, 0x29, 0x29, 0x2f, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x0c, 0x10,
			0x10, 0x15, 0x10, 0x15, 0x15, 0x19, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x23, 0x27, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x23, 0x27, 0x27, 0x2b, 0x10, 0x15, 0x15, 0x19,
			0x15, 0x19, 0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x23, 0x27, 0x27, 0x2b,
			0x27, 0x2b, 0x2b, 0x2f, 0x10, 0x15, 0x15, 0x19, 0x15, 0x19,
			0x19, 0x1d, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23,
			0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x27, 0x2b, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x27, 0x2b,
			0x2b, 0x2f, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25,
			0x25, 0x29, 0x25, 0x29, 0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29,
			0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2f, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29,
			0x25, 0x29, 0x29, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33,
			0x10, 0x15, 0x15, 0x19, 0x15, 0x19, 0x19, 0x1d, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x23, 0x15, 0x19, 0x19, 0x1d,
			0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x27, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d,
			0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x27, 0x2b, 0x15, 0x19, 0x19, 0x1d, 0x19, 0x1d,
			0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x27,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x29,
			0x21, 0x25, 0x25, 0x29, 0x27, 0x2b, 0x2b, 0x2f, 0x15, 0x19,
			0x19, 0x1d, 0x19, 0x1d, 0x1d, 0x21, 0x19, 0x1d, 0x1d, 0x21,
			0x1d, 0x21, 0x21, 0x27, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21,
			0x21, 0x25, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b,
			0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21, 0x21, 0x25,
			0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29,
			0x2b, 0x2f, 0x19, 0x1d, 0x1d, 0x21, 0x1d, 0x21, 0x21, 0x25,
			0x1d, 0x21, 0x21, 0x25, 0x21, 0x25, 0x25, 0x2b, 0x1d, 0x21,
			0x21, 0x25, 0x21, 0x25, 0x25, 0x29, 0x21, 0x25, 0x25, 0x29,
			0x25, 0x29, 0x29, 0x2f, 0x1d, 0x21, 0x21, 0x25, 0x21, 0x25,
			0x25, 0x29, 0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2f,
			0x21, 0x25, 0x25, 0x29, 0x25, 0x29, 0x29, 0x2d, 0x27, 0x2b,
			0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x17, 0x1b, 0x1b, 0x1f,
			0x1b, 0x1f, 0x1f, 0x23, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1b, 0x1f,
			0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27,
			0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23, 0x23, 0x27, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27,
			0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f,
			0x2b, 0x2f, 0x2f, 0x33, 0x1b, 0x1f, 0x1f, 0x23, 0x1f, 0x23,
			0x23, 0x27, 0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b,
			0x1f, 0x23, 0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27,
			0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x1f, 0x23, 0x23, 0x27,
			0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f,
			0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x1f, 0x23,
			0x23, 0x27, 0x23, 0x27, 0x27, 0x2b, 0x23, 0x27, 0x27, 0x2b,
			0x27, 0x2b, 0x2b, 0x2f, 0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b,
			0x2b, 0x2f, 0x27, 0x2b, 0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33,
			0x23, 0x27, 0x27, 0x2b, 0x27, 0x2b, 0x2b, 0x2f, 0x27, 0x2b,
			0x2b, 0x2f, 0x2b, 0x2f, 0x2f, 0x33, 0x27, 0x2b, 0x2b, 0x2f,
			0x2b, 0x2f, 0x2f, 0x33, 0x2b, 0x2f, 0x2f, 0x33, 0x2f, 0x33,
			0x33, 0x37
		};
	}

	// A table representing the bit count for a 13 bit integer.
	public static final short[] _bitsTable = initBitsTable();

	private static short[] initBitsTable() {
		return new short[] {
			0x00, 0x01, 0x01, 0x02, 0x01, 0x02, 0x02, 0x03, 0x01, 0x02,
			0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x01, 0x02, 0x02, 0x03,
			0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03,
			0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x01, 0x02,
			0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x01, 0x02, 0x02, 0x03,
			0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03, 0x03, 0x04,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x01, 0x02, 0x02, 0x03, 0x02, 0x03,
			0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x01, 0x02,
			0x02, 0x03, 0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x02, 0x03, 0x03, 0x04,
			0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x09, 0x0a,
			0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c, 0x01, 0x02, 0x02, 0x03,
			0x02, 0x03, 0x03, 0x04, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x02, 0x03,
			0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x02, 0x03, 0x03, 0x04, 0x03, 0x04, 0x04, 0x05, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05,
			0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x09, 0x0a, 0x0a, 0x0b,
			0x0a, 0x0b, 0x0b, 0x0c, 0x02, 0x03, 0x03, 0x04, 0x03, 0x04,
			0x04, 0x05, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x03, 0x04, 0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x03, 0x04, 0x04, 0x05,
			0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x04, 0x05,
			0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x09, 0x0a, 0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c, 0x03, 0x04,
			0x04, 0x05, 0x04, 0x05, 0x05, 0x06, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x04, 0x05, 0x05, 0x06,
			0x05, 0x06, 0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x04, 0x05, 0x05, 0x06, 0x05, 0x06,
			0x06, 0x07, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x09, 0x0a, 0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c,
			0x04, 0x05, 0x05, 0x06, 0x05, 0x06, 0x06, 0x07, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07, 0x07, 0x08,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x05, 0x06, 0x06, 0x07, 0x06, 0x07,
			0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x05, 0x06,
			0x06, 0x07, 0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08,
			0x07, 0x08, 0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x09, 0x0a,
			0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c, 0x05, 0x06, 0x06, 0x07,
			0x06, 0x07, 0x07, 0x08, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x06, 0x07,
			0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09,
			0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x06, 0x07, 0x07, 0x08, 0x07, 0x08, 0x08, 0x09, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x09, 0x0a, 0x0a, 0x0b,
			0x0a, 0x0b, 0x0b, 0x0c, 0x06, 0x07, 0x07, 0x08, 0x07, 0x08,
			0x08, 0x09, 0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a,
			0x07, 0x08, 0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09,
			0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x07, 0x08, 0x08, 0x09,
			0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b,
			0x09, 0x0a, 0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c, 0x07, 0x08,
			0x08, 0x09, 0x08, 0x09, 0x09, 0x0a, 0x08, 0x09, 0x09, 0x0a,
			0x09, 0x0a, 0x0a, 0x0b, 0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a,
			0x0a, 0x0b, 0x09, 0x0a, 0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c,
			0x08, 0x09, 0x09, 0x0a, 0x09, 0x0a, 0x0a, 0x0b, 0x09, 0x0a,
			0x0a, 0x0b, 0x0a, 0x0b, 0x0b, 0x0c, 0x09, 0x0a, 0x0a, 0x0b,
			0x0a, 0x0b, 0x0b, 0x0c, 0x0a, 0x0b, 0x0b, 0x0c, 0x0b, 0x0c,
			0x0c, 0x0d
		};
	}

	// This table returns a straights starting card (0 if not a straight)
	private static final short[] _straightTable = initStraightTable();

	private static short[] initStraightTable() {
		return new short[] {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06,
			0x06, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x06, 0x06, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x05, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c
		};
	}

	private static final int[] _topFiveCardsTable = initTopFiveCardsTable();

	private static int[] initTopFiveCardsTable() {
		return new int[] {
			0x00000000, 0x00000000, 0x00010000, 0x00010000, 0x00020000,
			0x00020000, 0x00021000, 0x00021000, 0x00030000, 0x00030000,
			0x00031000, 0x00031000, 0x00032000, 0x00032000, 0x00032100,
			0x00032100, 0x00040000, 0x00040000, 0x00041000, 0x00041000,
			0x00042000, 0x00042000, 0x00042100, 0x00042100, 0x00043000,
			0x00043000, 0x00043100, 0x00043100, 0x00043200, 0x00043200,
			0x00043210, 0x00043210, 0x00050000, 0x00050000, 0x00051000,
			0x00051000, 0x00052000, 0x00052000, 0x00052100, 0x00052100,
			0x00053000, 0x00053000, 0x00053100, 0x00053100, 0x00053200,
			0x00053200, 0x00053210, 0x00053210, 0x00054000, 0x00054000,
			0x00054100, 0x00054100, 0x00054200, 0x00054200, 0x00054210,
			0x00054210, 0x00054300, 0x00054300, 0x00054310, 0x00054310,
			0x00054320, 0x00054320, 0x00054321, 0x00054321, 0x00060000,
			0x00060000, 0x00061000, 0x00061000, 0x00062000, 0x00062000,
			0x00062100, 0x00062100, 0x00063000, 0x00063000, 0x00063100,
			0x00063100, 0x00063200, 0x00063200, 0x00063210, 0x00063210,
			0x00064000, 0x00064000, 0x00064100, 0x00064100, 0x00064200,
			0x00064200, 0x00064210, 0x00064210, 0x00064300, 0x00064300,
			0x00064310, 0x00064310, 0x00064320, 0x00064320, 0x00064321,
			0x00064321, 0x00065000, 0x00065000, 0x00065100, 0x00065100,
			0x00065200, 0x00065200, 0x00065210, 0x00065210, 0x00065300,
			0x00065300, 0x00065310, 0x00065310, 0x00065320, 0x00065320,
			0x00065321, 0x00065321, 0x00065400, 0x00065400, 0x00065410,
			0x00065410, 0x00065420, 0x00065420, 0x00065421, 0x00065421,
			0x00065430, 0x00065430, 0x00065431, 0x00065431, 0x00065432,
			0x00065432, 0x00065432, 0x00065432, 0x00070000, 0x00070000,
			0x00071000, 0x00071000, 0x00072000, 0x00072000, 0x00072100,
			0x00072100, 0x00073000, 0x00073000, 0x00073100, 0x00073100,
			0x00073200, 0x00073200, 0x00073210, 0x00073210, 0x00074000,
			0x00074000, 0x00074100, 0x00074100, 0x00074200, 0x00074200,
			0x00074210, 0x00074210, 0x00074300, 0x00074300, 0x00074310,
			0x00074310, 0x00074320, 0x00074320, 0x00074321, 0x00074321,
			0x00075000, 0x00075000, 0x00075100, 0x00075100, 0x00075200,
			0x00075200, 0x00075210, 0x00075210, 0x00075300, 0x00075300,
			0x00075310, 0x00075310, 0x00075320, 0x00075320, 0x00075321,
			0x00075321, 0x00075400, 0x00075400, 0x00075410, 0x00075410,
			0x00075420, 0x00075420, 0x00075421, 0x00075421, 0x00075430,
			0x00075430, 0x00075431, 0x00075431, 0x00075432, 0x00075432,
			0x00075432, 0x00075432, 0x00076000, 0x00076000, 0x00076100,
			0x00076100, 0x00076200, 0x00076200, 0x00076210, 0x00076210,
			0x00076300, 0x00076300, 0x00076310, 0x00076310, 0x00076320,
			0x00076320, 0x00076321, 0x00076321, 0x00076400, 0x00076400,
			0x00076410, 0x00076410, 0x00076420, 0x00076420, 0x00076421,
			0x00076421, 0x00076430, 0x00076430, 0x00076431, 0x00076431,
			0x00076432, 0x00076432, 0x00076432, 0x00076432, 0x00076500,
			0x00076500, 0x00076510, 0x00076510, 0x00076520, 0x00076520,
			0x00076521, 0x00076521, 0x00076530, 0x00076530, 0x00076531,
			0x00076531, 0x00076532, 0x00076532, 0x00076532, 0x00076532,
			0x00076540, 0x00076540, 0x00076541, 0x00076541, 0x00076542,
			0x00076542, 0x00076542, 0x00076542, 0x00076543, 0x00076543,
			0x00076543, 0x00076543, 0x00076543, 0x00076543, 0x00076543,
			0x00076543, 0x00080000, 0x00080000, 0x00081000, 0x00081000,
			0x00082000, 0x00082000, 0x00082100, 0x00082100, 0x00083000,
			0x00083000, 0x00083100, 0x00083100, 0x00083200, 0x00083200,
			0x00083210, 0x00083210, 0x00084000, 0x00084000, 0x00084100,
			0x00084100, 0x00084200, 0x00084200, 0x00084210, 0x00084210,
			0x00084300, 0x00084300, 0x00084310, 0x00084310, 0x00084320,
			0x00084320, 0x00084321, 0x00084321, 0x00085000, 0x00085000,
			0x00085100, 0x00085100, 0x00085200, 0x00085200, 0x00085210,
			0x00085210, 0x00085300, 0x00085300, 0x00085310, 0x00085310,
			0x00085320, 0x00085320, 0x00085321, 0x00085321, 0x00085400,
			0x00085400, 0x00085410, 0x00085410, 0x00085420, 0x00085420,
			0x00085421, 0x00085421, 0x00085430, 0x00085430, 0x00085431,
			0x00085431, 0x00085432, 0x00085432, 0x00085432, 0x00085432,
			0x00086000, 0x00086000, 0x00086100, 0x00086100, 0x00086200,
			0x00086200, 0x00086210, 0x00086210, 0x00086300, 0x00086300,
			0x00086310, 0x00086310, 0x00086320, 0x00086320, 0x00086321,
			0x00086321, 0x00086400, 0x00086400, 0x00086410, 0x00086410,
			0x00086420, 0x00086420, 0x00086421, 0x00086421, 0x00086430,
			0x00086430, 0x00086431, 0x00086431, 0x00086432, 0x00086432,
			0x00086432, 0x00086432, 0x00086500, 0x00086500, 0x00086510,
			0x00086510, 0x00086520, 0x00086520, 0x00086521, 0x00086521,
			0x00086530, 0x00086530, 0x00086531, 0x00086531, 0x00086532,
			0x00086532, 0x00086532, 0x00086532, 0x00086540, 0x00086540,
			0x00086541, 0x00086541, 0x00086542, 0x00086542, 0x00086542,
			0x00086542, 0x00086543, 0x00086543, 0x00086543, 0x00086543,
			0x00086543, 0x00086543, 0x00086543, 0x00086543, 0x00087000,
			0x00087000, 0x00087100, 0x00087100, 0x00087200, 0x00087200,
			0x00087210, 0x00087210, 0x00087300, 0x00087300, 0x00087310,
			0x00087310, 0x00087320, 0x00087320, 0x00087321, 0x00087321,
			0x00087400, 0x00087400, 0x00087410, 0x00087410, 0x00087420,
			0x00087420, 0x00087421, 0x00087421, 0x00087430, 0x00087430,
			0x00087431, 0x00087431, 0x00087432, 0x00087432, 0x00087432,
			0x00087432, 0x00087500, 0x00087500, 0x00087510, 0x00087510,
			0x00087520, 0x00087520, 0x00087521, 0x00087521, 0x00087530,
			0x00087530, 0x00087531, 0x00087531, 0x00087532, 0x00087532,
			0x00087532, 0x00087532, 0x00087540, 0x00087540, 0x00087541,
			0x00087541, 0x00087542, 0x00087542, 0x00087542, 0x00087542,
			0x00087543, 0x00087543, 0x00087543, 0x00087543, 0x00087543,
			0x00087543, 0x00087543, 0x00087543, 0x00087600, 0x00087600,
			0x00087610, 0x00087610, 0x00087620, 0x00087620, 0x00087621,
			0x00087621, 0x00087630, 0x00087630, 0x00087631, 0x00087631,
			0x00087632, 0x00087632, 0x00087632, 0x00087632, 0x00087640,
			0x00087640, 0x00087641, 0x00087641, 0x00087642, 0x00087642,
			0x00087642, 0x00087642, 0x00087643, 0x00087643, 0x00087643,
			0x00087643, 0x00087643, 0x00087643, 0x00087643, 0x00087643,
			0x00087650, 0x00087650, 0x00087651, 0x00087651, 0x00087652,
			0x00087652, 0x00087652, 0x00087652, 0x00087653, 0x00087653,
			0x00087653, 0x00087653, 0x00087653, 0x00087653, 0x00087653,
			0x00087653, 0x00087654, 0x00087654, 0x00087654, 0x00087654,
			0x00087654, 0x00087654, 0x00087654, 0x00087654, 0x00087654,
			0x00087654, 0x00087654, 0x00087654, 0x00087654, 0x00087654,
			0x00087654, 0x00087654, 0x00090000, 0x00090000, 0x00091000,
			0x00091000, 0x00092000, 0x00092000, 0x00092100, 0x00092100,
			0x00093000, 0x00093000, 0x00093100, 0x00093100, 0x00093200,
			0x00093200, 0x00093210, 0x00093210, 0x00094000, 0x00094000,
			0x00094100, 0x00094100, 0x00094200, 0x00094200, 0x00094210,
			0x00094210, 0x00094300, 0x00094300, 0x00094310, 0x00094310,
			0x00094320, 0x00094320, 0x00094321, 0x00094321, 0x00095000,
			0x00095000, 0x00095100, 0x00095100, 0x00095200, 0x00095200,
			0x00095210, 0x00095210, 0x00095300, 0x00095300, 0x00095310,
			0x00095310, 0x00095320, 0x00095320, 0x00095321, 0x00095321,
			0x00095400, 0x00095400, 0x00095410, 0x00095410, 0x00095420,
			0x00095420, 0x00095421, 0x00095421, 0x00095430, 0x00095430,
			0x00095431, 0x00095431, 0x00095432, 0x00095432, 0x00095432,
			0x00095432, 0x00096000, 0x00096000, 0x00096100, 0x00096100,
			0x00096200, 0x00096200, 0x00096210, 0x00096210, 0x00096300,
			0x00096300, 0x00096310, 0x00096310, 0x00096320, 0x00096320,
			0x00096321, 0x00096321, 0x00096400, 0x00096400, 0x00096410,
			0x00096410, 0x00096420, 0x00096420, 0x00096421, 0x00096421,
			0x00096430, 0x00096430, 0x00096431, 0x00096431, 0x00096432,
			0x00096432, 0x00096432, 0x00096432, 0x00096500, 0x00096500,
			0x00096510, 0x00096510, 0x00096520, 0x00096520, 0x00096521,
			0x00096521, 0x00096530, 0x00096530, 0x00096531, 0x00096531,
			0x00096532, 0x00096532, 0x00096532, 0x00096532, 0x00096540,
			0x00096540, 0x00096541, 0x00096541, 0x00096542, 0x00096542,
			0x00096542, 0x00096542, 0x00096543, 0x00096543, 0x00096543,
			0x00096543, 0x00096543, 0x00096543, 0x00096543, 0x00096543,
			0x00097000, 0x00097000, 0x00097100, 0x00097100, 0x00097200,
			0x00097200, 0x00097210, 0x00097210, 0x00097300, 0x00097300,
			0x00097310, 0x00097310, 0x00097320, 0x00097320, 0x00097321,
			0x00097321, 0x00097400, 0x00097400, 0x00097410, 0x00097410,
			0x00097420, 0x00097420, 0x00097421, 0x00097421, 0x00097430,
			0x00097430, 0x00097431, 0x00097431, 0x00097432, 0x00097432,
			0x00097432, 0x00097432, 0x00097500, 0x00097500, 0x00097510,
			0x00097510, 0x00097520, 0x00097520, 0x00097521, 0x00097521,
			0x00097530, 0x00097530, 0x00097531, 0x00097531, 0x00097532,
			0x00097532, 0x00097532, 0x00097532, 0x00097540, 0x00097540,
			0x00097541, 0x00097541, 0x00097542, 0x00097542, 0x00097542,
			0x00097542, 0x00097543, 0x00097543, 0x00097543, 0x00097543,
			0x00097543, 0x00097543, 0x00097543, 0x00097543, 0x00097600,
			0x00097600, 0x00097610, 0x00097610, 0x00097620, 0x00097620,
			0x00097621, 0x00097621, 0x00097630, 0x00097630, 0x00097631,
			0x00097631, 0x00097632, 0x00097632, 0x00097632, 0x00097632,
			0x00097640, 0x00097640, 0x00097641, 0x00097641, 0x00097642,
			0x00097642, 0x00097642, 0x00097642, 0x00097643, 0x00097643,
			0x00097643, 0x00097643, 0x00097643, 0x00097643, 0x00097643,
			0x00097643, 0x00097650, 0x00097650, 0x00097651, 0x00097651,
			0x00097652, 0x00097652, 0x00097652, 0x00097652, 0x00097653,
			0x00097653, 0x00097653, 0x00097653, 0x00097653, 0x00097653,
			0x00097653, 0x00097653, 0x00097654, 0x00097654, 0x00097654,
			0x00097654, 0x00097654, 0x00097654, 0x00097654, 0x00097654,
			0x00097654, 0x00097654, 0x00097654, 0x00097654, 0x00097654,
			0x00097654, 0x00097654, 0x00097654, 0x00098000, 0x00098000,
			0x00098100, 0x00098100, 0x00098200, 0x00098200, 0x00098210,
			0x00098210, 0x00098300, 0x00098300, 0x00098310, 0x00098310,
			0x00098320, 0x00098320, 0x00098321, 0x00098321, 0x00098400,
			0x00098400, 0x00098410, 0x00098410, 0x00098420, 0x00098420,
			0x00098421, 0x00098421, 0x00098430, 0x00098430, 0x00098431,
			0x00098431, 0x00098432, 0x00098432, 0x00098432, 0x00098432,
			0x00098500, 0x00098500, 0x00098510, 0x00098510, 0x00098520,
			0x00098520, 0x00098521, 0x00098521, 0x00098530, 0x00098530,
			0x00098531, 0x00098531, 0x00098532, 0x00098532, 0x00098532,
			0x00098532, 0x00098540, 0x00098540, 0x00098541, 0x00098541,
			0x00098542, 0x00098542, 0x00098542, 0x00098542, 0x00098543,
			0x00098543, 0x00098543, 0x00098543, 0x00098543, 0x00098543,
			0x00098543, 0x00098543, 0x00098600, 0x00098600, 0x00098610,
			0x00098610, 0x00098620, 0x00098620, 0x00098621, 0x00098621,
			0x00098630, 0x00098630, 0x00098631, 0x00098631, 0x00098632,
			0x00098632, 0x00098632, 0x00098632, 0x00098640, 0x00098640,
			0x00098641, 0x00098641, 0x00098642, 0x00098642, 0x00098642,
			0x00098642, 0x00098643, 0x00098643, 0x00098643, 0x00098643,
			0x00098643, 0x00098643, 0x00098643, 0x00098643, 0x00098650,
			0x00098650, 0x00098651, 0x00098651, 0x00098652, 0x00098652,
			0x00098652, 0x00098652, 0x00098653, 0x00098653, 0x00098653,
			0x00098653, 0x00098653, 0x00098653, 0x00098653, 0x00098653,
			0x00098654, 0x00098654, 0x00098654, 0x00098654, 0x00098654,
			0x00098654, 0x00098654, 0x00098654, 0x00098654, 0x00098654,
			0x00098654, 0x00098654, 0x00098654, 0x00098654, 0x00098654,
			0x00098654, 0x00098700, 0x00098700, 0x00098710, 0x00098710,
			0x00098720, 0x00098720, 0x00098721, 0x00098721, 0x00098730,
			0x00098730, 0x00098731, 0x00098731, 0x00098732, 0x00098732,
			0x00098732, 0x00098732, 0x00098740, 0x00098740, 0x00098741,
			0x00098741, 0x00098742, 0x00098742, 0x00098742, 0x00098742,
			0x00098743, 0x00098743, 0x00098743, 0x00098743, 0x00098743,
			0x00098743, 0x00098743, 0x00098743, 0x00098750, 0x00098750,
			0x00098751, 0x00098751, 0x00098752, 0x00098752, 0x00098752,
			0x00098752, 0x00098753, 0x00098753, 0x00098753, 0x00098753,
			0x00098753, 0x00098753, 0x00098753, 0x00098753, 0x00098754,
			0x00098754, 0x00098754, 0x00098754, 0x00098754, 0x00098754,
			0x00098754, 0x00098754, 0x00098754, 0x00098754, 0x00098754,
			0x00098754, 0x00098754, 0x00098754, 0x00098754, 0x00098754,
			0x00098760, 0x00098760, 0x00098761, 0x00098761, 0x00098762,
			0x00098762, 0x00098762, 0x00098762, 0x00098763, 0x00098763,
			0x00098763, 0x00098763, 0x00098763, 0x00098763, 0x00098763,
			0x00098763, 0x00098764, 0x00098764, 0x00098764, 0x00098764,
			0x00098764, 0x00098764, 0x00098764, 0x00098764, 0x00098764,
			0x00098764, 0x00098764, 0x00098764, 0x00098764, 0x00098764,
			0x00098764, 0x00098764, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x00098765,
			0x00098765, 0x00098765, 0x00098765, 0x00098765, 0x000a0000,
			0x000a0000, 0x000a1000, 0x000a1000, 0x000a2000, 0x000a2000,
			0x000a2100, 0x000a2100, 0x000a3000, 0x000a3000, 0x000a3100,
			0x000a3100, 0x000a3200, 0x000a3200, 0x000a3210, 0x000a3210,
			0x000a4000, 0x000a4000, 0x000a4100, 0x000a4100, 0x000a4200,
			0x000a4200, 0x000a4210, 0x000a4210, 0x000a4300, 0x000a4300,
			0x000a4310, 0x000a4310, 0x000a4320, 0x000a4320, 0x000a4321,
			0x000a4321, 0x000a5000, 0x000a5000, 0x000a5100, 0x000a5100,
			0x000a5200, 0x000a5200, 0x000a5210, 0x000a5210, 0x000a5300,
			0x000a5300, 0x000a5310, 0x000a5310, 0x000a5320, 0x000a5320,
			0x000a5321, 0x000a5321, 0x000a5400, 0x000a5400, 0x000a5410,
			0x000a5410, 0x000a5420, 0x000a5420, 0x000a5421, 0x000a5421,
			0x000a5430, 0x000a5430, 0x000a5431, 0x000a5431, 0x000a5432,
			0x000a5432, 0x000a5432, 0x000a5432, 0x000a6000, 0x000a6000,
			0x000a6100, 0x000a6100, 0x000a6200, 0x000a6200, 0x000a6210,
			0x000a6210, 0x000a6300, 0x000a6300, 0x000a6310, 0x000a6310,
			0x000a6320, 0x000a6320, 0x000a6321, 0x000a6321, 0x000a6400,
			0x000a6400, 0x000a6410, 0x000a6410, 0x000a6420, 0x000a6420,
			0x000a6421, 0x000a6421, 0x000a6430, 0x000a6430, 0x000a6431,
			0x000a6431, 0x000a6432, 0x000a6432, 0x000a6432, 0x000a6432,
			0x000a6500, 0x000a6500, 0x000a6510, 0x000a6510, 0x000a6520,
			0x000a6520, 0x000a6521, 0x000a6521, 0x000a6530, 0x000a6530,
			0x000a6531, 0x000a6531, 0x000a6532, 0x000a6532, 0x000a6532,
			0x000a6532, 0x000a6540, 0x000a6540, 0x000a6541, 0x000a6541,
			0x000a6542, 0x000a6542, 0x000a6542, 0x000a6542, 0x000a6543,
			0x000a6543, 0x000a6543, 0x000a6543, 0x000a6543, 0x000a6543,
			0x000a6543, 0x000a6543, 0x000a7000, 0x000a7000, 0x000a7100,
			0x000a7100, 0x000a7200, 0x000a7200, 0x000a7210, 0x000a7210,
			0x000a7300, 0x000a7300, 0x000a7310, 0x000a7310, 0x000a7320,
			0x000a7320, 0x000a7321, 0x000a7321, 0x000a7400, 0x000a7400,
			0x000a7410, 0x000a7410, 0x000a7420, 0x000a7420, 0x000a7421,
			0x000a7421, 0x000a7430, 0x000a7430, 0x000a7431, 0x000a7431,
			0x000a7432, 0x000a7432, 0x000a7432, 0x000a7432, 0x000a7500,
			0x000a7500, 0x000a7510, 0x000a7510, 0x000a7520, 0x000a7520,
			0x000a7521, 0x000a7521, 0x000a7530, 0x000a7530, 0x000a7531,
			0x000a7531, 0x000a7532, 0x000a7532, 0x000a7532, 0x000a7532,
			0x000a7540, 0x000a7540, 0x000a7541, 0x000a7541, 0x000a7542,
			0x000a7542, 0x000a7542, 0x000a7542, 0x000a7543, 0x000a7543,
			0x000a7543, 0x000a7543, 0x000a7543, 0x000a7543, 0x000a7543,
			0x000a7543, 0x000a7600, 0x000a7600, 0x000a7610, 0x000a7610,
			0x000a7620, 0x000a7620, 0x000a7621, 0x000a7621, 0x000a7630,
			0x000a7630, 0x000a7631, 0x000a7631, 0x000a7632, 0x000a7632,
			0x000a7632, 0x000a7632, 0x000a7640, 0x000a7640, 0x000a7641,
			0x000a7641, 0x000a7642, 0x000a7642, 0x000a7642, 0x000a7642,
			0x000a7643, 0x000a7643, 0x000a7643, 0x000a7643, 0x000a7643,
			0x000a7643, 0x000a7643, 0x000a7643, 0x000a7650, 0x000a7650,
			0x000a7651, 0x000a7651, 0x000a7652, 0x000a7652, 0x000a7652,
			0x000a7652, 0x000a7653, 0x000a7653, 0x000a7653, 0x000a7653,
			0x000a7653, 0x000a7653, 0x000a7653, 0x000a7653, 0x000a7654,
			0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654,
			0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654,
			0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654, 0x000a7654,
			0x000a8000, 0x000a8000, 0x000a8100, 0x000a8100, 0x000a8200,
			0x000a8200, 0x000a8210, 0x000a8210, 0x000a8300, 0x000a8300,
			0x000a8310, 0x000a8310, 0x000a8320, 0x000a8320, 0x000a8321,
			0x000a8321, 0x000a8400, 0x000a8400, 0x000a8410, 0x000a8410,
			0x000a8420, 0x000a8420, 0x000a8421, 0x000a8421, 0x000a8430,
			0x000a8430, 0x000a8431, 0x000a8431, 0x000a8432, 0x000a8432,
			0x000a8432, 0x000a8432, 0x000a8500, 0x000a8500, 0x000a8510,
			0x000a8510, 0x000a8520, 0x000a8520, 0x000a8521, 0x000a8521,
			0x000a8530, 0x000a8530, 0x000a8531, 0x000a8531, 0x000a8532,
			0x000a8532, 0x000a8532, 0x000a8532, 0x000a8540, 0x000a8540,
			0x000a8541, 0x000a8541, 0x000a8542, 0x000a8542, 0x000a8542,
			0x000a8542, 0x000a8543, 0x000a8543, 0x000a8543, 0x000a8543,
			0x000a8543, 0x000a8543, 0x000a8543, 0x000a8543, 0x000a8600,
			0x000a8600, 0x000a8610, 0x000a8610, 0x000a8620, 0x000a8620,
			0x000a8621, 0x000a8621, 0x000a8630, 0x000a8630, 0x000a8631,
			0x000a8631, 0x000a8632, 0x000a8632, 0x000a8632, 0x000a8632,
			0x000a8640, 0x000a8640, 0x000a8641, 0x000a8641, 0x000a8642,
			0x000a8642, 0x000a8642, 0x000a8642, 0x000a8643, 0x000a8643,
			0x000a8643, 0x000a8643, 0x000a8643, 0x000a8643, 0x000a8643,
			0x000a8643, 0x000a8650, 0x000a8650, 0x000a8651, 0x000a8651,
			0x000a8652, 0x000a8652, 0x000a8652, 0x000a8652, 0x000a8653,
			0x000a8653, 0x000a8653, 0x000a8653, 0x000a8653, 0x000a8653,
			0x000a8653, 0x000a8653, 0x000a8654, 0x000a8654, 0x000a8654,
			0x000a8654, 0x000a8654, 0x000a8654, 0x000a8654, 0x000a8654,
			0x000a8654, 0x000a8654, 0x000a8654, 0x000a8654, 0x000a8654,
			0x000a8654, 0x000a8654, 0x000a8654, 0x000a8700, 0x000a8700,
			0x000a8710, 0x000a8710, 0x000a8720, 0x000a8720, 0x000a8721,
			0x000a8721, 0x000a8730, 0x000a8730, 0x000a8731, 0x000a8731,
			0x000a8732, 0x000a8732, 0x000a8732, 0x000a8732, 0x000a8740,
			0x000a8740, 0x000a8741, 0x000a8741, 0x000a8742, 0x000a8742,
			0x000a8742, 0x000a8742, 0x000a8743, 0x000a8743, 0x000a8743,
			0x000a8743, 0x000a8743, 0x000a8743, 0x000a8743, 0x000a8743,
			0x000a8750, 0x000a8750, 0x000a8751, 0x000a8751, 0x000a8752,
			0x000a8752, 0x000a8752, 0x000a8752, 0x000a8753, 0x000a8753,
			0x000a8753, 0x000a8753, 0x000a8753, 0x000a8753, 0x000a8753,
			0x000a8753, 0x000a8754, 0x000a8754, 0x000a8754, 0x000a8754,
			0x000a8754, 0x000a8754, 0x000a8754, 0x000a8754, 0x000a8754,
			0x000a8754, 0x000a8754, 0x000a8754, 0x000a8754, 0x000a8754,
			0x000a8754, 0x000a8754, 0x000a8760, 0x000a8760, 0x000a8761,
			0x000a8761, 0x000a8762, 0x000a8762, 0x000a8762, 0x000a8762,
			0x000a8763, 0x000a8763, 0x000a8763, 0x000a8763, 0x000a8763,
			0x000a8763, 0x000a8763, 0x000a8763, 0x000a8764, 0x000a8764,
			0x000a8764, 0x000a8764, 0x000a8764, 0x000a8764, 0x000a8764,
			0x000a8764, 0x000a8764, 0x000a8764, 0x000a8764, 0x000a8764,
			0x000a8764, 0x000a8764, 0x000a8764, 0x000a8764, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765, 0x000a8765,
			0x000a8765, 0x000a9000, 0x000a9000, 0x000a9100, 0x000a9100,
			0x000a9200, 0x000a9200, 0x000a9210, 0x000a9210, 0x000a9300,
			0x000a9300, 0x000a9310, 0x000a9310, 0x000a9320, 0x000a9320,
			0x000a9321, 0x000a9321, 0x000a9400, 0x000a9400, 0x000a9410,
			0x000a9410, 0x000a9420, 0x000a9420, 0x000a9421, 0x000a9421,
			0x000a9430, 0x000a9430, 0x000a9431, 0x000a9431, 0x000a9432,
			0x000a9432, 0x000a9432, 0x000a9432, 0x000a9500, 0x000a9500,
			0x000a9510, 0x000a9510, 0x000a9520, 0x000a9520, 0x000a9521,
			0x000a9521, 0x000a9530, 0x000a9530, 0x000a9531, 0x000a9531,
			0x000a9532, 0x000a9532, 0x000a9532, 0x000a9532, 0x000a9540,
			0x000a9540, 0x000a9541, 0x000a9541, 0x000a9542, 0x000a9542,
			0x000a9542, 0x000a9542, 0x000a9543, 0x000a9543, 0x000a9543,
			0x000a9543, 0x000a9543, 0x000a9543, 0x000a9543, 0x000a9543,
			0x000a9600, 0x000a9600, 0x000a9610, 0x000a9610, 0x000a9620,
			0x000a9620, 0x000a9621, 0x000a9621, 0x000a9630, 0x000a9630,
			0x000a9631, 0x000a9631, 0x000a9632, 0x000a9632, 0x000a9632,
			0x000a9632, 0x000a9640, 0x000a9640, 0x000a9641, 0x000a9641,
			0x000a9642, 0x000a9642, 0x000a9642, 0x000a9642, 0x000a9643,
			0x000a9643, 0x000a9643, 0x000a9643, 0x000a9643, 0x000a9643,
			0x000a9643, 0x000a9643, 0x000a9650, 0x000a9650, 0x000a9651,
			0x000a9651, 0x000a9652, 0x000a9652, 0x000a9652, 0x000a9652,
			0x000a9653, 0x000a9653, 0x000a9653, 0x000a9653, 0x000a9653,
			0x000a9653, 0x000a9653, 0x000a9653, 0x000a9654, 0x000a9654,
			0x000a9654, 0x000a9654, 0x000a9654, 0x000a9654, 0x000a9654,
			0x000a9654, 0x000a9654, 0x000a9654, 0x000a9654, 0x000a9654,
			0x000a9654, 0x000a9654, 0x000a9654, 0x000a9654, 0x000a9700,
			0x000a9700, 0x000a9710, 0x000a9710, 0x000a9720, 0x000a9720,
			0x000a9721, 0x000a9721, 0x000a9730, 0x000a9730, 0x000a9731,
			0x000a9731, 0x000a9732, 0x000a9732, 0x000a9732, 0x000a9732,
			0x000a9740, 0x000a9740, 0x000a9741, 0x000a9741, 0x000a9742,
			0x000a9742, 0x000a9742, 0x000a9742, 0x000a9743, 0x000a9743,
			0x000a9743, 0x000a9743, 0x000a9743, 0x000a9743, 0x000a9743,
			0x000a9743, 0x000a9750, 0x000a9750, 0x000a9751, 0x000a9751,
			0x000a9752, 0x000a9752, 0x000a9752, 0x000a9752, 0x000a9753,
			0x000a9753, 0x000a9753, 0x000a9753, 0x000a9753, 0x000a9753,
			0x000a9753, 0x000a9753, 0x000a9754, 0x000a9754, 0x000a9754,
			0x000a9754, 0x000a9754, 0x000a9754, 0x000a9754, 0x000a9754,
			0x000a9754, 0x000a9754, 0x000a9754, 0x000a9754, 0x000a9754,
			0x000a9754, 0x000a9754, 0x000a9754, 0x000a9760, 0x000a9760,
			0x000a9761, 0x000a9761, 0x000a9762, 0x000a9762, 0x000a9762,
			0x000a9762, 0x000a9763, 0x000a9763, 0x000a9763, 0x000a9763,
			0x000a9763, 0x000a9763, 0x000a9763, 0x000a9763, 0x000a9764,
			0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764,
			0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764,
			0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764, 0x000a9764,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765, 0x000a9765,
			0x000a9765, 0x000a9765, 0x000a9800, 0x000a9800, 0x000a9810,
			0x000a9810, 0x000a9820, 0x000a9820, 0x000a9821, 0x000a9821,
			0x000a9830, 0x000a9830, 0x000a9831, 0x000a9831, 0x000a9832,
			0x000a9832, 0x000a9832, 0x000a9832, 0x000a9840, 0x000a9840,
			0x000a9841, 0x000a9841, 0x000a9842, 0x000a9842, 0x000a9842,
			0x000a9842, 0x000a9843, 0x000a9843, 0x000a9843, 0x000a9843,
			0x000a9843, 0x000a9843, 0x000a9843, 0x000a9843, 0x000a9850,
			0x000a9850, 0x000a9851, 0x000a9851, 0x000a9852, 0x000a9852,
			0x000a9852, 0x000a9852, 0x000a9853, 0x000a9853, 0x000a9853,
			0x000a9853, 0x000a9853, 0x000a9853, 0x000a9853, 0x000a9853,
			0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854,
			0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854,
			0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854, 0x000a9854,
			0x000a9854, 0x000a9860, 0x000a9860, 0x000a9861, 0x000a9861,
			0x000a9862, 0x000a9862, 0x000a9862, 0x000a9862, 0x000a9863,
			0x000a9863, 0x000a9863, 0x000a9863, 0x000a9863, 0x000a9863,
			0x000a9863, 0x000a9863, 0x000a9864, 0x000a9864, 0x000a9864,
			0x000a9864, 0x000a9864, 0x000a9864, 0x000a9864, 0x000a9864,
			0x000a9864, 0x000a9864, 0x000a9864, 0x000a9864, 0x000a9864,
			0x000a9864, 0x000a9864, 0x000a9864, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865, 0x000a9865,
			0x000a9870, 0x000a9870, 0x000a9871, 0x000a9871, 0x000a9872,
			0x000a9872, 0x000a9872, 0x000a9872, 0x000a9873, 0x000a9873,
			0x000a9873, 0x000a9873, 0x000a9873, 0x000a9873, 0x000a9873,
			0x000a9873, 0x000a9874, 0x000a9874, 0x000a9874, 0x000a9874,
			0x000a9874, 0x000a9874, 0x000a9874, 0x000a9874, 0x000a9874,
			0x000a9874, 0x000a9874, 0x000a9874, 0x000a9874, 0x000a9874,
			0x000a9874, 0x000a9874, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875,
			0x000a9875, 0x000a9875, 0x000a9875, 0x000a9875, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876, 0x000a9876,
			0x000a9876, 0x000a9876, 0x000a9876, 0x000b0000, 0x000b0000,
			0x000b1000, 0x000b1000, 0x000b2000, 0x000b2000, 0x000b2100,
			0x000b2100, 0x000b3000, 0x000b3000, 0x000b3100, 0x000b3100,
			0x000b3200, 0x000b3200, 0x000b3210, 0x000b3210, 0x000b4000,
			0x000b4000, 0x000b4100, 0x000b4100, 0x000b4200, 0x000b4200,
			0x000b4210, 0x000b4210, 0x000b4300, 0x000b4300, 0x000b4310,
			0x000b4310, 0x000b4320, 0x000b4320, 0x000b4321, 0x000b4321,
			0x000b5000, 0x000b5000, 0x000b5100, 0x000b5100, 0x000b5200,
			0x000b5200, 0x000b5210, 0x000b5210, 0x000b5300, 0x000b5300,
			0x000b5310, 0x000b5310, 0x000b5320, 0x000b5320, 0x000b5321,
			0x000b5321, 0x000b5400, 0x000b5400, 0x000b5410, 0x000b5410,
			0x000b5420, 0x000b5420, 0x000b5421, 0x000b5421, 0x000b5430,
			0x000b5430, 0x000b5431, 0x000b5431, 0x000b5432, 0x000b5432,
			0x000b5432, 0x000b5432, 0x000b6000, 0x000b6000, 0x000b6100,
			0x000b6100, 0x000b6200, 0x000b6200, 0x000b6210, 0x000b6210,
			0x000b6300, 0x000b6300, 0x000b6310, 0x000b6310, 0x000b6320,
			0x000b6320, 0x000b6321, 0x000b6321, 0x000b6400, 0x000b6400,
			0x000b6410, 0x000b6410, 0x000b6420, 0x000b6420, 0x000b6421,
			0x000b6421, 0x000b6430, 0x000b6430, 0x000b6431, 0x000b6431,
			0x000b6432, 0x000b6432, 0x000b6432, 0x000b6432, 0x000b6500,
			0x000b6500, 0x000b6510, 0x000b6510, 0x000b6520, 0x000b6520,
			0x000b6521, 0x000b6521, 0x000b6530, 0x000b6530, 0x000b6531,
			0x000b6531, 0x000b6532, 0x000b6532, 0x000b6532, 0x000b6532,
			0x000b6540, 0x000b6540, 0x000b6541, 0x000b6541, 0x000b6542,
			0x000b6542, 0x000b6542, 0x000b6542, 0x000b6543, 0x000b6543,
			0x000b6543, 0x000b6543, 0x000b6543, 0x000b6543, 0x000b6543,
			0x000b6543, 0x000b7000, 0x000b7000, 0x000b7100, 0x000b7100,
			0x000b7200, 0x000b7200, 0x000b7210, 0x000b7210, 0x000b7300,
			0x000b7300, 0x000b7310, 0x000b7310, 0x000b7320, 0x000b7320,
			0x000b7321, 0x000b7321, 0x000b7400, 0x000b7400, 0x000b7410,
			0x000b7410, 0x000b7420, 0x000b7420, 0x000b7421, 0x000b7421,
			0x000b7430, 0x000b7430, 0x000b7431, 0x000b7431, 0x000b7432,
			0x000b7432, 0x000b7432, 0x000b7432, 0x000b7500, 0x000b7500,
			0x000b7510, 0x000b7510, 0x000b7520, 0x000b7520, 0x000b7521,
			0x000b7521, 0x000b7530, 0x000b7530, 0x000b7531, 0x000b7531,
			0x000b7532, 0x000b7532, 0x000b7532, 0x000b7532, 0x000b7540,
			0x000b7540, 0x000b7541, 0x000b7541, 0x000b7542, 0x000b7542,
			0x000b7542, 0x000b7542, 0x000b7543, 0x000b7543, 0x000b7543,
			0x000b7543, 0x000b7543, 0x000b7543, 0x000b7543, 0x000b7543,
			0x000b7600, 0x000b7600, 0x000b7610, 0x000b7610, 0x000b7620,
			0x000b7620, 0x000b7621, 0x000b7621, 0x000b7630, 0x000b7630,
			0x000b7631, 0x000b7631, 0x000b7632, 0x000b7632, 0x000b7632,
			0x000b7632, 0x000b7640, 0x000b7640, 0x000b7641, 0x000b7641,
			0x000b7642, 0x000b7642, 0x000b7642, 0x000b7642, 0x000b7643,
			0x000b7643, 0x000b7643, 0x000b7643, 0x000b7643, 0x000b7643,
			0x000b7643, 0x000b7643, 0x000b7650, 0x000b7650, 0x000b7651,
			0x000b7651, 0x000b7652, 0x000b7652, 0x000b7652, 0x000b7652,
			0x000b7653, 0x000b7653, 0x000b7653, 0x000b7653, 0x000b7653,
			0x000b7653, 0x000b7653, 0x000b7653, 0x000b7654, 0x000b7654,
			0x000b7654, 0x000b7654, 0x000b7654, 0x000b7654, 0x000b7654,
			0x000b7654, 0x000b7654, 0x000b7654, 0x000b7654, 0x000b7654,
			0x000b7654, 0x000b7654, 0x000b7654, 0x000b7654, 0x000b8000,
			0x000b8000, 0x000b8100, 0x000b8100, 0x000b8200, 0x000b8200,
			0x000b8210, 0x000b8210, 0x000b8300, 0x000b8300, 0x000b8310,
			0x000b8310, 0x000b8320, 0x000b8320, 0x000b8321, 0x000b8321,
			0x000b8400, 0x000b8400, 0x000b8410, 0x000b8410, 0x000b8420,
			0x000b8420, 0x000b8421, 0x000b8421, 0x000b8430, 0x000b8430,
			0x000b8431, 0x000b8431, 0x000b8432, 0x000b8432, 0x000b8432,
			0x000b8432, 0x000b8500, 0x000b8500, 0x000b8510, 0x000b8510,
			0x000b8520, 0x000b8520, 0x000b8521, 0x000b8521, 0x000b8530,
			0x000b8530, 0x000b8531, 0x000b8531, 0x000b8532, 0x000b8532,
			0x000b8532, 0x000b8532, 0x000b8540, 0x000b8540, 0x000b8541,
			0x000b8541, 0x000b8542, 0x000b8542, 0x000b8542, 0x000b8542,
			0x000b8543, 0x000b8543, 0x000b8543, 0x000b8543, 0x000b8543,
			0x000b8543, 0x000b8543, 0x000b8543, 0x000b8600, 0x000b8600,
			0x000b8610, 0x000b8610, 0x000b8620, 0x000b8620, 0x000b8621,
			0x000b8621, 0x000b8630, 0x000b8630, 0x000b8631, 0x000b8631,
			0x000b8632, 0x000b8632, 0x000b8632, 0x000b8632, 0x000b8640,
			0x000b8640, 0x000b8641, 0x000b8641, 0x000b8642, 0x000b8642,
			0x000b8642, 0x000b8642, 0x000b8643, 0x000b8643, 0x000b8643,
			0x000b8643, 0x000b8643, 0x000b8643, 0x000b8643, 0x000b8643,
			0x000b8650, 0x000b8650, 0x000b8651, 0x000b8651, 0x000b8652,
			0x000b8652, 0x000b8652, 0x000b8652, 0x000b8653, 0x000b8653,
			0x000b8653, 0x000b8653, 0x000b8653, 0x000b8653, 0x000b8653,
			0x000b8653, 0x000b8654, 0x000b8654, 0x000b8654, 0x000b8654,
			0x000b8654, 0x000b8654, 0x000b8654, 0x000b8654, 0x000b8654,
			0x000b8654, 0x000b8654, 0x000b8654, 0x000b8654, 0x000b8654,
			0x000b8654, 0x000b8654, 0x000b8700, 0x000b8700, 0x000b8710,
			0x000b8710, 0x000b8720, 0x000b8720, 0x000b8721, 0x000b8721,
			0x000b8730, 0x000b8730, 0x000b8731, 0x000b8731, 0x000b8732,
			0x000b8732, 0x000b8732, 0x000b8732, 0x000b8740, 0x000b8740,
			0x000b8741, 0x000b8741, 0x000b8742, 0x000b8742, 0x000b8742,
			0x000b8742, 0x000b8743, 0x000b8743, 0x000b8743, 0x000b8743,
			0x000b8743, 0x000b8743, 0x000b8743, 0x000b8743, 0x000b8750,
			0x000b8750, 0x000b8751, 0x000b8751, 0x000b8752, 0x000b8752,
			0x000b8752, 0x000b8752, 0x000b8753, 0x000b8753, 0x000b8753,
			0x000b8753, 0x000b8753, 0x000b8753, 0x000b8753, 0x000b8753,
			0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754,
			0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754,
			0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754, 0x000b8754,
			0x000b8754, 0x000b8760, 0x000b8760, 0x000b8761, 0x000b8761,
			0x000b8762, 0x000b8762, 0x000b8762, 0x000b8762, 0x000b8763,
			0x000b8763, 0x000b8763, 0x000b8763, 0x000b8763, 0x000b8763,
			0x000b8763, 0x000b8763, 0x000b8764, 0x000b8764, 0x000b8764,
			0x000b8764, 0x000b8764, 0x000b8764, 0x000b8764, 0x000b8764,
			0x000b8764, 0x000b8764, 0x000b8764, 0x000b8764, 0x000b8764,
			0x000b8764, 0x000b8764, 0x000b8764, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765, 0x000b8765,
			0x000b9000, 0x000b9000, 0x000b9100, 0x000b9100, 0x000b9200,
			0x000b9200, 0x000b9210, 0x000b9210, 0x000b9300, 0x000b9300,
			0x000b9310, 0x000b9310, 0x000b9320, 0x000b9320, 0x000b9321,
			0x000b9321, 0x000b9400, 0x000b9400, 0x000b9410, 0x000b9410,
			0x000b9420, 0x000b9420, 0x000b9421, 0x000b9421, 0x000b9430,
			0x000b9430, 0x000b9431, 0x000b9431, 0x000b9432, 0x000b9432,
			0x000b9432, 0x000b9432, 0x000b9500, 0x000b9500, 0x000b9510,
			0x000b9510, 0x000b9520, 0x000b9520, 0x000b9521, 0x000b9521,
			0x000b9530, 0x000b9530, 0x000b9531, 0x000b9531, 0x000b9532,
			0x000b9532, 0x000b9532, 0x000b9532, 0x000b9540, 0x000b9540,
			0x000b9541, 0x000b9541, 0x000b9542, 0x000b9542, 0x000b9542,
			0x000b9542, 0x000b9543, 0x000b9543, 0x000b9543, 0x000b9543,
			0x000b9543, 0x000b9543, 0x000b9543, 0x000b9543, 0x000b9600,
			0x000b9600, 0x000b9610, 0x000b9610, 0x000b9620, 0x000b9620,
			0x000b9621, 0x000b9621, 0x000b9630, 0x000b9630, 0x000b9631,
			0x000b9631, 0x000b9632, 0x000b9632, 0x000b9632, 0x000b9632,
			0x000b9640, 0x000b9640, 0x000b9641, 0x000b9641, 0x000b9642,
			0x000b9642, 0x000b9642, 0x000b9642, 0x000b9643, 0x000b9643,
			0x000b9643, 0x000b9643, 0x000b9643, 0x000b9643, 0x000b9643,
			0x000b9643, 0x000b9650, 0x000b9650, 0x000b9651, 0x000b9651,
			0x000b9652, 0x000b9652, 0x000b9652, 0x000b9652, 0x000b9653,
			0x000b9653, 0x000b9653, 0x000b9653, 0x000b9653, 0x000b9653,
			0x000b9653, 0x000b9653, 0x000b9654, 0x000b9654, 0x000b9654,
			0x000b9654, 0x000b9654, 0x000b9654, 0x000b9654, 0x000b9654,
			0x000b9654, 0x000b9654, 0x000b9654, 0x000b9654, 0x000b9654,
			0x000b9654, 0x000b9654, 0x000b9654, 0x000b9700, 0x000b9700,
			0x000b9710, 0x000b9710, 0x000b9720, 0x000b9720, 0x000b9721,
			0x000b9721, 0x000b9730, 0x000b9730, 0x000b9731, 0x000b9731,
			0x000b9732, 0x000b9732, 0x000b9732, 0x000b9732, 0x000b9740,
			0x000b9740, 0x000b9741, 0x000b9741, 0x000b9742, 0x000b9742,
			0x000b9742, 0x000b9742, 0x000b9743, 0x000b9743, 0x000b9743,
			0x000b9743, 0x000b9743, 0x000b9743, 0x000b9743, 0x000b9743,
			0x000b9750, 0x000b9750, 0x000b9751, 0x000b9751, 0x000b9752,
			0x000b9752, 0x000b9752, 0x000b9752, 0x000b9753, 0x000b9753,
			0x000b9753, 0x000b9753, 0x000b9753, 0x000b9753, 0x000b9753,
			0x000b9753, 0x000b9754, 0x000b9754, 0x000b9754, 0x000b9754,
			0x000b9754, 0x000b9754, 0x000b9754, 0x000b9754, 0x000b9754,
			0x000b9754, 0x000b9754, 0x000b9754, 0x000b9754, 0x000b9754,
			0x000b9754, 0x000b9754, 0x000b9760, 0x000b9760, 0x000b9761,
			0x000b9761, 0x000b9762, 0x000b9762, 0x000b9762, 0x000b9762,
			0x000b9763, 0x000b9763, 0x000b9763, 0x000b9763, 0x000b9763,
			0x000b9763, 0x000b9763, 0x000b9763, 0x000b9764, 0x000b9764,
			0x000b9764, 0x000b9764, 0x000b9764, 0x000b9764, 0x000b9764,
			0x000b9764, 0x000b9764, 0x000b9764, 0x000b9764, 0x000b9764,
			0x000b9764, 0x000b9764, 0x000b9764, 0x000b9764, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765, 0x000b9765,
			0x000b9765, 0x000b9800, 0x000b9800, 0x000b9810, 0x000b9810,
			0x000b9820, 0x000b9820, 0x000b9821, 0x000b9821, 0x000b9830,
			0x000b9830, 0x000b9831, 0x000b9831, 0x000b9832, 0x000b9832,
			0x000b9832, 0x000b9832, 0x000b9840, 0x000b9840, 0x000b9841,
			0x000b9841, 0x000b9842, 0x000b9842, 0x000b9842, 0x000b9842,
			0x000b9843, 0x000b9843, 0x000b9843, 0x000b9843, 0x000b9843,
			0x000b9843, 0x000b9843, 0x000b9843, 0x000b9850, 0x000b9850,
			0x000b9851, 0x000b9851, 0x000b9852, 0x000b9852, 0x000b9852,
			0x000b9852, 0x000b9853, 0x000b9853, 0x000b9853, 0x000b9853,
			0x000b9853, 0x000b9853, 0x000b9853, 0x000b9853, 0x000b9854,
			0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854,
			0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854,
			0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854, 0x000b9854,
			0x000b9860, 0x000b9860, 0x000b9861, 0x000b9861, 0x000b9862,
			0x000b9862, 0x000b9862, 0x000b9862, 0x000b9863, 0x000b9863,
			0x000b9863, 0x000b9863, 0x000b9863, 0x000b9863, 0x000b9863,
			0x000b9863, 0x000b9864, 0x000b9864, 0x000b9864, 0x000b9864,
			0x000b9864, 0x000b9864, 0x000b9864, 0x000b9864, 0x000b9864,
			0x000b9864, 0x000b9864, 0x000b9864, 0x000b9864, 0x000b9864,
			0x000b9864, 0x000b9864, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865,
			0x000b9865, 0x000b9865, 0x000b9865, 0x000b9865, 0x000b9870,
			0x000b9870, 0x000b9871, 0x000b9871, 0x000b9872, 0x000b9872,
			0x000b9872, 0x000b9872, 0x000b9873, 0x000b9873, 0x000b9873,
			0x000b9873, 0x000b9873, 0x000b9873, 0x000b9873, 0x000b9873,
			0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874,
			0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874,
			0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874, 0x000b9874,
			0x000b9874, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875, 0x000b9875,
			0x000b9875, 0x000b9875, 0x000b9875, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876, 0x000b9876,
			0x000b9876, 0x000b9876, 0x000ba000, 0x000ba000, 0x000ba100,
			0x000ba100, 0x000ba200, 0x000ba200, 0x000ba210, 0x000ba210,
			0x000ba300, 0x000ba300, 0x000ba310, 0x000ba310, 0x000ba320,
			0x000ba320, 0x000ba321, 0x000ba321, 0x000ba400, 0x000ba400,
			0x000ba410, 0x000ba410, 0x000ba420, 0x000ba420, 0x000ba421,
			0x000ba421, 0x000ba430, 0x000ba430, 0x000ba431, 0x000ba431,
			0x000ba432, 0x000ba432, 0x000ba432, 0x000ba432, 0x000ba500,
			0x000ba500, 0x000ba510, 0x000ba510, 0x000ba520, 0x000ba520,
			0x000ba521, 0x000ba521, 0x000ba530, 0x000ba530, 0x000ba531,
			0x000ba531, 0x000ba532, 0x000ba532, 0x000ba532, 0x000ba532,
			0x000ba540, 0x000ba540, 0x000ba541, 0x000ba541, 0x000ba542,
			0x000ba542, 0x000ba542, 0x000ba542, 0x000ba543, 0x000ba543,
			0x000ba543, 0x000ba543, 0x000ba543, 0x000ba543, 0x000ba543,
			0x000ba543, 0x000ba600, 0x000ba600, 0x000ba610, 0x000ba610,
			0x000ba620, 0x000ba620, 0x000ba621, 0x000ba621, 0x000ba630,
			0x000ba630, 0x000ba631, 0x000ba631, 0x000ba632, 0x000ba632,
			0x000ba632, 0x000ba632, 0x000ba640, 0x000ba640, 0x000ba641,
			0x000ba641, 0x000ba642, 0x000ba642, 0x000ba642, 0x000ba642,
			0x000ba643, 0x000ba643, 0x000ba643, 0x000ba643, 0x000ba643,
			0x000ba643, 0x000ba643, 0x000ba643, 0x000ba650, 0x000ba650,
			0x000ba651, 0x000ba651, 0x000ba652, 0x000ba652, 0x000ba652,
			0x000ba652, 0x000ba653, 0x000ba653, 0x000ba653, 0x000ba653,
			0x000ba653, 0x000ba653, 0x000ba653, 0x000ba653, 0x000ba654,
			0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654,
			0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654,
			0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654, 0x000ba654,
			0x000ba700, 0x000ba700, 0x000ba710, 0x000ba710, 0x000ba720,
			0x000ba720, 0x000ba721, 0x000ba721, 0x000ba730, 0x000ba730,
			0x000ba731, 0x000ba731, 0x000ba732, 0x000ba732, 0x000ba732,
			0x000ba732, 0x000ba740, 0x000ba740, 0x000ba741, 0x000ba741,
			0x000ba742, 0x000ba742, 0x000ba742, 0x000ba742, 0x000ba743,
			0x000ba743, 0x000ba743, 0x000ba743, 0x000ba743, 0x000ba743,
			0x000ba743, 0x000ba743, 0x000ba750, 0x000ba750, 0x000ba751,
			0x000ba751, 0x000ba752, 0x000ba752, 0x000ba752, 0x000ba752,
			0x000ba753, 0x000ba753, 0x000ba753, 0x000ba753, 0x000ba753,
			0x000ba753, 0x000ba753, 0x000ba753, 0x000ba754, 0x000ba754,
			0x000ba754, 0x000ba754, 0x000ba754, 0x000ba754, 0x000ba754,
			0x000ba754, 0x000ba754, 0x000ba754, 0x000ba754, 0x000ba754,
			0x000ba754, 0x000ba754, 0x000ba754, 0x000ba754, 0x000ba760,
			0x000ba760, 0x000ba761, 0x000ba761, 0x000ba762, 0x000ba762,
			0x000ba762, 0x000ba762, 0x000ba763, 0x000ba763, 0x000ba763,
			0x000ba763, 0x000ba763, 0x000ba763, 0x000ba763, 0x000ba763,
			0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764,
			0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764,
			0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764, 0x000ba764,
			0x000ba764, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765, 0x000ba765,
			0x000ba765, 0x000ba765, 0x000ba765, 0x000ba800, 0x000ba800,
			0x000ba810, 0x000ba810, 0x000ba820, 0x000ba820, 0x000ba821,
			0x000ba821, 0x000ba830, 0x000ba830, 0x000ba831, 0x000ba831,
			0x000ba832, 0x000ba832, 0x000ba832, 0x000ba832, 0x000ba840,
			0x000ba840, 0x000ba841, 0x000ba841, 0x000ba842, 0x000ba842,
			0x000ba842, 0x000ba842, 0x000ba843, 0x000ba843, 0x000ba843,
			0x000ba843, 0x000ba843, 0x000ba843, 0x000ba843, 0x000ba843,
			0x000ba850, 0x000ba850, 0x000ba851, 0x000ba851, 0x000ba852,
			0x000ba852, 0x000ba852, 0x000ba852, 0x000ba853, 0x000ba853,
			0x000ba853, 0x000ba853, 0x000ba853, 0x000ba853, 0x000ba853,
			0x000ba853, 0x000ba854, 0x000ba854, 0x000ba854, 0x000ba854,
			0x000ba854, 0x000ba854, 0x000ba854, 0x000ba854, 0x000ba854,
			0x000ba854, 0x000ba854, 0x000ba854, 0x000ba854, 0x000ba854,
			0x000ba854, 0x000ba854, 0x000ba860, 0x000ba860, 0x000ba861,
			0x000ba861, 0x000ba862, 0x000ba862, 0x000ba862, 0x000ba862,
			0x000ba863, 0x000ba863, 0x000ba863, 0x000ba863, 0x000ba863,
			0x000ba863, 0x000ba863, 0x000ba863, 0x000ba864, 0x000ba864,
			0x000ba864, 0x000ba864, 0x000ba864, 0x000ba864, 0x000ba864,
			0x000ba864, 0x000ba864, 0x000ba864, 0x000ba864, 0x000ba864,
			0x000ba864, 0x000ba864, 0x000ba864, 0x000ba864, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865, 0x000ba865,
			0x000ba865, 0x000ba870, 0x000ba870, 0x000ba871, 0x000ba871,
			0x000ba872, 0x000ba872, 0x000ba872, 0x000ba872, 0x000ba873,
			0x000ba873, 0x000ba873, 0x000ba873, 0x000ba873, 0x000ba873,
			0x000ba873, 0x000ba873, 0x000ba874, 0x000ba874, 0x000ba874,
			0x000ba874, 0x000ba874, 0x000ba874, 0x000ba874, 0x000ba874,
			0x000ba874, 0x000ba874, 0x000ba874, 0x000ba874, 0x000ba874,
			0x000ba874, 0x000ba874, 0x000ba874, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875, 0x000ba875,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876,
			0x000ba876, 0x000ba876, 0x000ba876, 0x000ba876, 0x000ba900,
			0x000ba900, 0x000ba910, 0x000ba910, 0x000ba920, 0x000ba920,
			0x000ba921, 0x000ba921, 0x000ba930, 0x000ba930, 0x000ba931,
			0x000ba931, 0x000ba932, 0x000ba932, 0x000ba932, 0x000ba932,
			0x000ba940, 0x000ba940, 0x000ba941, 0x000ba941, 0x000ba942,
			0x000ba942, 0x000ba942, 0x000ba942, 0x000ba943, 0x000ba943,
			0x000ba943, 0x000ba943, 0x000ba943, 0x000ba943, 0x000ba943,
			0x000ba943, 0x000ba950, 0x000ba950, 0x000ba951, 0x000ba951,
			0x000ba952, 0x000ba952, 0x000ba952, 0x000ba952, 0x000ba953,
			0x000ba953, 0x000ba953, 0x000ba953, 0x000ba953, 0x000ba953,
			0x000ba953, 0x000ba953, 0x000ba954, 0x000ba954, 0x000ba954,
			0x000ba954, 0x000ba954, 0x000ba954, 0x000ba954, 0x000ba954,
			0x000ba954, 0x000ba954, 0x000ba954, 0x000ba954, 0x000ba954,
			0x000ba954, 0x000ba954, 0x000ba954, 0x000ba960, 0x000ba960,
			0x000ba961, 0x000ba961, 0x000ba962, 0x000ba962, 0x000ba962,
			0x000ba962, 0x000ba963, 0x000ba963, 0x000ba963, 0x000ba963,
			0x000ba963, 0x000ba963, 0x000ba963, 0x000ba963, 0x000ba964,
			0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964,
			0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964,
			0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964, 0x000ba964,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965, 0x000ba965,
			0x000ba965, 0x000ba965, 0x000ba970, 0x000ba970, 0x000ba971,
			0x000ba971, 0x000ba972, 0x000ba972, 0x000ba972, 0x000ba972,
			0x000ba973, 0x000ba973, 0x000ba973, 0x000ba973, 0x000ba973,
			0x000ba973, 0x000ba973, 0x000ba973, 0x000ba974, 0x000ba974,
			0x000ba974, 0x000ba974, 0x000ba974, 0x000ba974, 0x000ba974,
			0x000ba974, 0x000ba974, 0x000ba974, 0x000ba974, 0x000ba974,
			0x000ba974, 0x000ba974, 0x000ba974, 0x000ba974, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975, 0x000ba975,
			0x000ba975, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976, 0x000ba976,
			0x000ba980, 0x000ba980, 0x000ba981, 0x000ba981, 0x000ba982,
			0x000ba982, 0x000ba982, 0x000ba982, 0x000ba983, 0x000ba983,
			0x000ba983, 0x000ba983, 0x000ba983, 0x000ba983, 0x000ba983,
			0x000ba983, 0x000ba984, 0x000ba984, 0x000ba984, 0x000ba984,
			0x000ba984, 0x000ba984, 0x000ba984, 0x000ba984, 0x000ba984,
			0x000ba984, 0x000ba984, 0x000ba984, 0x000ba984, 0x000ba984,
			0x000ba984, 0x000ba984, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985,
			0x000ba985, 0x000ba985, 0x000ba985, 0x000ba985, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986, 0x000ba986,
			0x000ba986, 0x000ba986, 0x000ba986, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987, 0x000ba987,
			0x000ba987, 0x000c0000, 0x000c0000, 0x000c1000, 0x000c1000,
			0x000c2000, 0x000c2000, 0x000c2100, 0x000c2100, 0x000c3000,
			0x000c3000, 0x000c3100, 0x000c3100, 0x000c3200, 0x000c3200,
			0x000c3210, 0x000c3210, 0x000c4000, 0x000c4000, 0x000c4100,
			0x000c4100, 0x000c4200, 0x000c4200, 0x000c4210, 0x000c4210,
			0x000c4300, 0x000c4300, 0x000c4310, 0x000c4310, 0x000c4320,
			0x000c4320, 0x000c4321, 0x000c4321, 0x000c5000, 0x000c5000,
			0x000c5100, 0x000c5100, 0x000c5200, 0x000c5200, 0x000c5210,
			0x000c5210, 0x000c5300, 0x000c5300, 0x000c5310, 0x000c5310,
			0x000c5320, 0x000c5320, 0x000c5321, 0x000c5321, 0x000c5400,
			0x000c5400, 0x000c5410, 0x000c5410, 0x000c5420, 0x000c5420,
			0x000c5421, 0x000c5421, 0x000c5430, 0x000c5430, 0x000c5431,
			0x000c5431, 0x000c5432, 0x000c5432, 0x000c5432, 0x000c5432,
			0x000c6000, 0x000c6000, 0x000c6100, 0x000c6100, 0x000c6200,
			0x000c6200, 0x000c6210, 0x000c6210, 0x000c6300, 0x000c6300,
			0x000c6310, 0x000c6310, 0x000c6320, 0x000c6320, 0x000c6321,
			0x000c6321, 0x000c6400, 0x000c6400, 0x000c6410, 0x000c6410,
			0x000c6420, 0x000c6420, 0x000c6421, 0x000c6421, 0x000c6430,
			0x000c6430, 0x000c6431, 0x000c6431, 0x000c6432, 0x000c6432,
			0x000c6432, 0x000c6432, 0x000c6500, 0x000c6500, 0x000c6510,
			0x000c6510, 0x000c6520, 0x000c6520, 0x000c6521, 0x000c6521,
			0x000c6530, 0x000c6530, 0x000c6531, 0x000c6531, 0x000c6532,
			0x000c6532, 0x000c6532, 0x000c6532, 0x000c6540, 0x000c6540,
			0x000c6541, 0x000c6541, 0x000c6542, 0x000c6542, 0x000c6542,
			0x000c6542, 0x000c6543, 0x000c6543, 0x000c6543, 0x000c6543,
			0x000c6543, 0x000c6543, 0x000c6543, 0x000c6543, 0x000c7000,
			0x000c7000, 0x000c7100, 0x000c7100, 0x000c7200, 0x000c7200,
			0x000c7210, 0x000c7210, 0x000c7300, 0x000c7300, 0x000c7310,
			0x000c7310, 0x000c7320, 0x000c7320, 0x000c7321, 0x000c7321,
			0x000c7400, 0x000c7400, 0x000c7410, 0x000c7410, 0x000c7420,
			0x000c7420, 0x000c7421, 0x000c7421, 0x000c7430, 0x000c7430,
			0x000c7431, 0x000c7431, 0x000c7432, 0x000c7432, 0x000c7432,
			0x000c7432, 0x000c7500, 0x000c7500, 0x000c7510, 0x000c7510,
			0x000c7520, 0x000c7520, 0x000c7521, 0x000c7521, 0x000c7530,
			0x000c7530, 0x000c7531, 0x000c7531, 0x000c7532, 0x000c7532,
			0x000c7532, 0x000c7532, 0x000c7540, 0x000c7540, 0x000c7541,
			0x000c7541, 0x000c7542, 0x000c7542, 0x000c7542, 0x000c7542,
			0x000c7543, 0x000c7543, 0x000c7543, 0x000c7543, 0x000c7543,
			0x000c7543, 0x000c7543, 0x000c7543, 0x000c7600, 0x000c7600,
			0x000c7610, 0x000c7610, 0x000c7620, 0x000c7620, 0x000c7621,
			0x000c7621, 0x000c7630, 0x000c7630, 0x000c7631, 0x000c7631,
			0x000c7632, 0x000c7632, 0x000c7632, 0x000c7632, 0x000c7640,
			0x000c7640, 0x000c7641, 0x000c7641, 0x000c7642, 0x000c7642,
			0x000c7642, 0x000c7642, 0x000c7643, 0x000c7643, 0x000c7643,
			0x000c7643, 0x000c7643, 0x000c7643, 0x000c7643, 0x000c7643,
			0x000c7650, 0x000c7650, 0x000c7651, 0x000c7651, 0x000c7652,
			0x000c7652, 0x000c7652, 0x000c7652, 0x000c7653, 0x000c7653,
			0x000c7653, 0x000c7653, 0x000c7653, 0x000c7653, 0x000c7653,
			0x000c7653, 0x000c7654, 0x000c7654, 0x000c7654, 0x000c7654,
			0x000c7654, 0x000c7654, 0x000c7654, 0x000c7654, 0x000c7654,
			0x000c7654, 0x000c7654, 0x000c7654, 0x000c7654, 0x000c7654,
			0x000c7654, 0x000c7654, 0x000c8000, 0x000c8000, 0x000c8100,
			0x000c8100, 0x000c8200, 0x000c8200, 0x000c8210, 0x000c8210,
			0x000c8300, 0x000c8300, 0x000c8310, 0x000c8310, 0x000c8320,
			0x000c8320, 0x000c8321, 0x000c8321, 0x000c8400, 0x000c8400,
			0x000c8410, 0x000c8410, 0x000c8420, 0x000c8420, 0x000c8421,
			0x000c8421, 0x000c8430, 0x000c8430, 0x000c8431, 0x000c8431,
			0x000c8432, 0x000c8432, 0x000c8432, 0x000c8432, 0x000c8500,
			0x000c8500, 0x000c8510, 0x000c8510, 0x000c8520, 0x000c8520,
			0x000c8521, 0x000c8521, 0x000c8530, 0x000c8530, 0x000c8531,
			0x000c8531, 0x000c8532, 0x000c8532, 0x000c8532, 0x000c8532,
			0x000c8540, 0x000c8540, 0x000c8541, 0x000c8541, 0x000c8542,
			0x000c8542, 0x000c8542, 0x000c8542, 0x000c8543, 0x000c8543,
			0x000c8543, 0x000c8543, 0x000c8543, 0x000c8543, 0x000c8543,
			0x000c8543, 0x000c8600, 0x000c8600, 0x000c8610, 0x000c8610,
			0x000c8620, 0x000c8620, 0x000c8621, 0x000c8621, 0x000c8630,
			0x000c8630, 0x000c8631, 0x000c8631, 0x000c8632, 0x000c8632,
			0x000c8632, 0x000c8632, 0x000c8640, 0x000c8640, 0x000c8641,
			0x000c8641, 0x000c8642, 0x000c8642, 0x000c8642, 0x000c8642,
			0x000c8643, 0x000c8643, 0x000c8643, 0x000c8643, 0x000c8643,
			0x000c8643, 0x000c8643, 0x000c8643, 0x000c8650, 0x000c8650,
			0x000c8651, 0x000c8651, 0x000c8652, 0x000c8652, 0x000c8652,
			0x000c8652, 0x000c8653, 0x000c8653, 0x000c8653, 0x000c8653,
			0x000c8653, 0x000c8653, 0x000c8653, 0x000c8653, 0x000c8654,
			0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654,
			0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654,
			0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654, 0x000c8654,
			0x000c8700, 0x000c8700, 0x000c8710, 0x000c8710, 0x000c8720,
			0x000c8720, 0x000c8721, 0x000c8721, 0x000c8730, 0x000c8730,
			0x000c8731, 0x000c8731, 0x000c8732, 0x000c8732, 0x000c8732,
			0x000c8732, 0x000c8740, 0x000c8740, 0x000c8741, 0x000c8741,
			0x000c8742, 0x000c8742, 0x000c8742, 0x000c8742, 0x000c8743,
			0x000c8743, 0x000c8743, 0x000c8743, 0x000c8743, 0x000c8743,
			0x000c8743, 0x000c8743, 0x000c8750, 0x000c8750, 0x000c8751,
			0x000c8751, 0x000c8752, 0x000c8752, 0x000c8752, 0x000c8752,
			0x000c8753, 0x000c8753, 0x000c8753, 0x000c8753, 0x000c8753,
			0x000c8753, 0x000c8753, 0x000c8753, 0x000c8754, 0x000c8754,
			0x000c8754, 0x000c8754, 0x000c8754, 0x000c8754, 0x000c8754,
			0x000c8754, 0x000c8754, 0x000c8754, 0x000c8754, 0x000c8754,
			0x000c8754, 0x000c8754, 0x000c8754, 0x000c8754, 0x000c8760,
			0x000c8760, 0x000c8761, 0x000c8761, 0x000c8762, 0x000c8762,
			0x000c8762, 0x000c8762, 0x000c8763, 0x000c8763, 0x000c8763,
			0x000c8763, 0x000c8763, 0x000c8763, 0x000c8763, 0x000c8763,
			0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764,
			0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764,
			0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764, 0x000c8764,
			0x000c8764, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765, 0x000c8765,
			0x000c8765, 0x000c8765, 0x000c8765, 0x000c9000, 0x000c9000,
			0x000c9100, 0x000c9100, 0x000c9200, 0x000c9200, 0x000c9210,
			0x000c9210, 0x000c9300, 0x000c9300, 0x000c9310, 0x000c9310,
			0x000c9320, 0x000c9320, 0x000c9321, 0x000c9321, 0x000c9400,
			0x000c9400, 0x000c9410, 0x000c9410, 0x000c9420, 0x000c9420,
			0x000c9421, 0x000c9421, 0x000c9430, 0x000c9430, 0x000c9431,
			0x000c9431, 0x000c9432, 0x000c9432, 0x000c9432, 0x000c9432,
			0x000c9500, 0x000c9500, 0x000c9510, 0x000c9510, 0x000c9520,
			0x000c9520, 0x000c9521, 0x000c9521, 0x000c9530, 0x000c9530,
			0x000c9531, 0x000c9531, 0x000c9532, 0x000c9532, 0x000c9532,
			0x000c9532, 0x000c9540, 0x000c9540, 0x000c9541, 0x000c9541,
			0x000c9542, 0x000c9542, 0x000c9542, 0x000c9542, 0x000c9543,
			0x000c9543, 0x000c9543, 0x000c9543, 0x000c9543, 0x000c9543,
			0x000c9543, 0x000c9543, 0x000c9600, 0x000c9600, 0x000c9610,
			0x000c9610, 0x000c9620, 0x000c9620, 0x000c9621, 0x000c9621,
			0x000c9630, 0x000c9630, 0x000c9631, 0x000c9631, 0x000c9632,
			0x000c9632, 0x000c9632, 0x000c9632, 0x000c9640, 0x000c9640,
			0x000c9641, 0x000c9641, 0x000c9642, 0x000c9642, 0x000c9642,
			0x000c9642, 0x000c9643, 0x000c9643, 0x000c9643, 0x000c9643,
			0x000c9643, 0x000c9643, 0x000c9643, 0x000c9643, 0x000c9650,
			0x000c9650, 0x000c9651, 0x000c9651, 0x000c9652, 0x000c9652,
			0x000c9652, 0x000c9652, 0x000c9653, 0x000c9653, 0x000c9653,
			0x000c9653, 0x000c9653, 0x000c9653, 0x000c9653, 0x000c9653,
			0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654,
			0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654,
			0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654, 0x000c9654,
			0x000c9654, 0x000c9700, 0x000c9700, 0x000c9710, 0x000c9710,
			0x000c9720, 0x000c9720, 0x000c9721, 0x000c9721, 0x000c9730,
			0x000c9730, 0x000c9731, 0x000c9731, 0x000c9732, 0x000c9732,
			0x000c9732, 0x000c9732, 0x000c9740, 0x000c9740, 0x000c9741,
			0x000c9741, 0x000c9742, 0x000c9742, 0x000c9742, 0x000c9742,
			0x000c9743, 0x000c9743, 0x000c9743, 0x000c9743, 0x000c9743,
			0x000c9743, 0x000c9743, 0x000c9743, 0x000c9750, 0x000c9750,
			0x000c9751, 0x000c9751, 0x000c9752, 0x000c9752, 0x000c9752,
			0x000c9752, 0x000c9753, 0x000c9753, 0x000c9753, 0x000c9753,
			0x000c9753, 0x000c9753, 0x000c9753, 0x000c9753, 0x000c9754,
			0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754,
			0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754,
			0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754, 0x000c9754,
			0x000c9760, 0x000c9760, 0x000c9761, 0x000c9761, 0x000c9762,
			0x000c9762, 0x000c9762, 0x000c9762, 0x000c9763, 0x000c9763,
			0x000c9763, 0x000c9763, 0x000c9763, 0x000c9763, 0x000c9763,
			0x000c9763, 0x000c9764, 0x000c9764, 0x000c9764, 0x000c9764,
			0x000c9764, 0x000c9764, 0x000c9764, 0x000c9764, 0x000c9764,
			0x000c9764, 0x000c9764, 0x000c9764, 0x000c9764, 0x000c9764,
			0x000c9764, 0x000c9764, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765,
			0x000c9765, 0x000c9765, 0x000c9765, 0x000c9765, 0x000c9800,
			0x000c9800, 0x000c9810, 0x000c9810, 0x000c9820, 0x000c9820,
			0x000c9821, 0x000c9821, 0x000c9830, 0x000c9830, 0x000c9831,
			0x000c9831, 0x000c9832, 0x000c9832, 0x000c9832, 0x000c9832,
			0x000c9840, 0x000c9840, 0x000c9841, 0x000c9841, 0x000c9842,
			0x000c9842, 0x000c9842, 0x000c9842, 0x000c9843, 0x000c9843,
			0x000c9843, 0x000c9843, 0x000c9843, 0x000c9843, 0x000c9843,
			0x000c9843, 0x000c9850, 0x000c9850, 0x000c9851, 0x000c9851,
			0x000c9852, 0x000c9852, 0x000c9852, 0x000c9852, 0x000c9853,
			0x000c9853, 0x000c9853, 0x000c9853, 0x000c9853, 0x000c9853,
			0x000c9853, 0x000c9853, 0x000c9854, 0x000c9854, 0x000c9854,
			0x000c9854, 0x000c9854, 0x000c9854, 0x000c9854, 0x000c9854,
			0x000c9854, 0x000c9854, 0x000c9854, 0x000c9854, 0x000c9854,
			0x000c9854, 0x000c9854, 0x000c9854, 0x000c9860, 0x000c9860,
			0x000c9861, 0x000c9861, 0x000c9862, 0x000c9862, 0x000c9862,
			0x000c9862, 0x000c9863, 0x000c9863, 0x000c9863, 0x000c9863,
			0x000c9863, 0x000c9863, 0x000c9863, 0x000c9863, 0x000c9864,
			0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864,
			0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864,
			0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864, 0x000c9864,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865, 0x000c9865,
			0x000c9865, 0x000c9865, 0x000c9870, 0x000c9870, 0x000c9871,
			0x000c9871, 0x000c9872, 0x000c9872, 0x000c9872, 0x000c9872,
			0x000c9873, 0x000c9873, 0x000c9873, 0x000c9873, 0x000c9873,
			0x000c9873, 0x000c9873, 0x000c9873, 0x000c9874, 0x000c9874,
			0x000c9874, 0x000c9874, 0x000c9874, 0x000c9874, 0x000c9874,
			0x000c9874, 0x000c9874, 0x000c9874, 0x000c9874, 0x000c9874,
			0x000c9874, 0x000c9874, 0x000c9874, 0x000c9874, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875, 0x000c9875,
			0x000c9875, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876, 0x000c9876,
			0x000ca000, 0x000ca000, 0x000ca100, 0x000ca100, 0x000ca200,
			0x000ca200, 0x000ca210, 0x000ca210, 0x000ca300, 0x000ca300,
			0x000ca310, 0x000ca310, 0x000ca320, 0x000ca320, 0x000ca321,
			0x000ca321, 0x000ca400, 0x000ca400, 0x000ca410, 0x000ca410,
			0x000ca420, 0x000ca420, 0x000ca421, 0x000ca421, 0x000ca430,
			0x000ca430, 0x000ca431, 0x000ca431, 0x000ca432, 0x000ca432,
			0x000ca432, 0x000ca432, 0x000ca500, 0x000ca500, 0x000ca510,
			0x000ca510, 0x000ca520, 0x000ca520, 0x000ca521, 0x000ca521,
			0x000ca530, 0x000ca530, 0x000ca531, 0x000ca531, 0x000ca532,
			0x000ca532, 0x000ca532, 0x000ca532, 0x000ca540, 0x000ca540,
			0x000ca541, 0x000ca541, 0x000ca542, 0x000ca542, 0x000ca542,
			0x000ca542, 0x000ca543, 0x000ca543, 0x000ca543, 0x000ca543,
			0x000ca543, 0x000ca543, 0x000ca543, 0x000ca543, 0x000ca600,
			0x000ca600, 0x000ca610, 0x000ca610, 0x000ca620, 0x000ca620,
			0x000ca621, 0x000ca621, 0x000ca630, 0x000ca630, 0x000ca631,
			0x000ca631, 0x000ca632, 0x000ca632, 0x000ca632, 0x000ca632,
			0x000ca640, 0x000ca640, 0x000ca641, 0x000ca641, 0x000ca642,
			0x000ca642, 0x000ca642, 0x000ca642, 0x000ca643, 0x000ca643,
			0x000ca643, 0x000ca643, 0x000ca643, 0x000ca643, 0x000ca643,
			0x000ca643, 0x000ca650, 0x000ca650, 0x000ca651, 0x000ca651,
			0x000ca652, 0x000ca652, 0x000ca652, 0x000ca652, 0x000ca653,
			0x000ca653, 0x000ca653, 0x000ca653, 0x000ca653, 0x000ca653,
			0x000ca653, 0x000ca653, 0x000ca654, 0x000ca654, 0x000ca654,
			0x000ca654, 0x000ca654, 0x000ca654, 0x000ca654, 0x000ca654,
			0x000ca654, 0x000ca654, 0x000ca654, 0x000ca654, 0x000ca654,
			0x000ca654, 0x000ca654, 0x000ca654, 0x000ca700, 0x000ca700,
			0x000ca710, 0x000ca710, 0x000ca720, 0x000ca720, 0x000ca721,
			0x000ca721, 0x000ca730, 0x000ca730, 0x000ca731, 0x000ca731,
			0x000ca732, 0x000ca732, 0x000ca732, 0x000ca732, 0x000ca740,
			0x000ca740, 0x000ca741, 0x000ca741, 0x000ca742, 0x000ca742,
			0x000ca742, 0x000ca742, 0x000ca743, 0x000ca743, 0x000ca743,
			0x000ca743, 0x000ca743, 0x000ca743, 0x000ca743, 0x000ca743,
			0x000ca750, 0x000ca750, 0x000ca751, 0x000ca751, 0x000ca752,
			0x000ca752, 0x000ca752, 0x000ca752, 0x000ca753, 0x000ca753,
			0x000ca753, 0x000ca753, 0x000ca753, 0x000ca753, 0x000ca753,
			0x000ca753, 0x000ca754, 0x000ca754, 0x000ca754, 0x000ca754,
			0x000ca754, 0x000ca754, 0x000ca754, 0x000ca754, 0x000ca754,
			0x000ca754, 0x000ca754, 0x000ca754, 0x000ca754, 0x000ca754,
			0x000ca754, 0x000ca754, 0x000ca760, 0x000ca760, 0x000ca761,
			0x000ca761, 0x000ca762, 0x000ca762, 0x000ca762, 0x000ca762,
			0x000ca763, 0x000ca763, 0x000ca763, 0x000ca763, 0x000ca763,
			0x000ca763, 0x000ca763, 0x000ca763, 0x000ca764, 0x000ca764,
			0x000ca764, 0x000ca764, 0x000ca764, 0x000ca764, 0x000ca764,
			0x000ca764, 0x000ca764, 0x000ca764, 0x000ca764, 0x000ca764,
			0x000ca764, 0x000ca764, 0x000ca764, 0x000ca764, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765, 0x000ca765,
			0x000ca765, 0x000ca800, 0x000ca800, 0x000ca810, 0x000ca810,
			0x000ca820, 0x000ca820, 0x000ca821, 0x000ca821, 0x000ca830,
			0x000ca830, 0x000ca831, 0x000ca831, 0x000ca832, 0x000ca832,
			0x000ca832, 0x000ca832, 0x000ca840, 0x000ca840, 0x000ca841,
			0x000ca841, 0x000ca842, 0x000ca842, 0x000ca842, 0x000ca842,
			0x000ca843, 0x000ca843, 0x000ca843, 0x000ca843, 0x000ca843,
			0x000ca843, 0x000ca843, 0x000ca843, 0x000ca850, 0x000ca850,
			0x000ca851, 0x000ca851, 0x000ca852, 0x000ca852, 0x000ca852,
			0x000ca852, 0x000ca853, 0x000ca853, 0x000ca853, 0x000ca853,
			0x000ca853, 0x000ca853, 0x000ca853, 0x000ca853, 0x000ca854,
			0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854,
			0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854,
			0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854, 0x000ca854,
			0x000ca860, 0x000ca860, 0x000ca861, 0x000ca861, 0x000ca862,
			0x000ca862, 0x000ca862, 0x000ca862, 0x000ca863, 0x000ca863,
			0x000ca863, 0x000ca863, 0x000ca863, 0x000ca863, 0x000ca863,
			0x000ca863, 0x000ca864, 0x000ca864, 0x000ca864, 0x000ca864,
			0x000ca864, 0x000ca864, 0x000ca864, 0x000ca864, 0x000ca864,
			0x000ca864, 0x000ca864, 0x000ca864, 0x000ca864, 0x000ca864,
			0x000ca864, 0x000ca864, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865,
			0x000ca865, 0x000ca865, 0x000ca865, 0x000ca865, 0x000ca870,
			0x000ca870, 0x000ca871, 0x000ca871, 0x000ca872, 0x000ca872,
			0x000ca872, 0x000ca872, 0x000ca873, 0x000ca873, 0x000ca873,
			0x000ca873, 0x000ca873, 0x000ca873, 0x000ca873, 0x000ca873,
			0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874,
			0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874,
			0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874, 0x000ca874,
			0x000ca874, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875, 0x000ca875,
			0x000ca875, 0x000ca875, 0x000ca875, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876, 0x000ca876,
			0x000ca876, 0x000ca876, 0x000ca900, 0x000ca900, 0x000ca910,
			0x000ca910, 0x000ca920, 0x000ca920, 0x000ca921, 0x000ca921,
			0x000ca930, 0x000ca930, 0x000ca931, 0x000ca931, 0x000ca932,
			0x000ca932, 0x000ca932, 0x000ca932, 0x000ca940, 0x000ca940,
			0x000ca941, 0x000ca941, 0x000ca942, 0x000ca942, 0x000ca942,
			0x000ca942, 0x000ca943, 0x000ca943, 0x000ca943, 0x000ca943,
			0x000ca943, 0x000ca943, 0x000ca943, 0x000ca943, 0x000ca950,
			0x000ca950, 0x000ca951, 0x000ca951, 0x000ca952, 0x000ca952,
			0x000ca952, 0x000ca952, 0x000ca953, 0x000ca953, 0x000ca953,
			0x000ca953, 0x000ca953, 0x000ca953, 0x000ca953, 0x000ca953,
			0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954,
			0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954,
			0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954, 0x000ca954,
			0x000ca954, 0x000ca960, 0x000ca960, 0x000ca961, 0x000ca961,
			0x000ca962, 0x000ca962, 0x000ca962, 0x000ca962, 0x000ca963,
			0x000ca963, 0x000ca963, 0x000ca963, 0x000ca963, 0x000ca963,
			0x000ca963, 0x000ca963, 0x000ca964, 0x000ca964, 0x000ca964,
			0x000ca964, 0x000ca964, 0x000ca964, 0x000ca964, 0x000ca964,
			0x000ca964, 0x000ca964, 0x000ca964, 0x000ca964, 0x000ca964,
			0x000ca964, 0x000ca964, 0x000ca964, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965, 0x000ca965,
			0x000ca970, 0x000ca970, 0x000ca971, 0x000ca971, 0x000ca972,
			0x000ca972, 0x000ca972, 0x000ca972, 0x000ca973, 0x000ca973,
			0x000ca973, 0x000ca973, 0x000ca973, 0x000ca973, 0x000ca973,
			0x000ca973, 0x000ca974, 0x000ca974, 0x000ca974, 0x000ca974,
			0x000ca974, 0x000ca974, 0x000ca974, 0x000ca974, 0x000ca974,
			0x000ca974, 0x000ca974, 0x000ca974, 0x000ca974, 0x000ca974,
			0x000ca974, 0x000ca974, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975,
			0x000ca975, 0x000ca975, 0x000ca975, 0x000ca975, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976, 0x000ca976,
			0x000ca976, 0x000ca976, 0x000ca976, 0x000ca980, 0x000ca980,
			0x000ca981, 0x000ca981, 0x000ca982, 0x000ca982, 0x000ca982,
			0x000ca982, 0x000ca983, 0x000ca983, 0x000ca983, 0x000ca983,
			0x000ca983, 0x000ca983, 0x000ca983, 0x000ca983, 0x000ca984,
			0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984,
			0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984,
			0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984, 0x000ca984,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985, 0x000ca985,
			0x000ca985, 0x000ca985, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986, 0x000ca986,
			0x000ca986, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987,
			0x000ca987, 0x000ca987, 0x000ca987, 0x000ca987, 0x000cb000,
			0x000cb000, 0x000cb100, 0x000cb100, 0x000cb200, 0x000cb200,
			0x000cb210, 0x000cb210, 0x000cb300, 0x000cb300, 0x000cb310,
			0x000cb310, 0x000cb320, 0x000cb320, 0x000cb321, 0x000cb321,
			0x000cb400, 0x000cb400, 0x000cb410, 0x000cb410, 0x000cb420,
			0x000cb420, 0x000cb421, 0x000cb421, 0x000cb430, 0x000cb430,
			0x000cb431, 0x000cb431, 0x000cb432, 0x000cb432, 0x000cb432,
			0x000cb432, 0x000cb500, 0x000cb500, 0x000cb510, 0x000cb510,
			0x000cb520, 0x000cb520, 0x000cb521, 0x000cb521, 0x000cb530,
			0x000cb530, 0x000cb531, 0x000cb531, 0x000cb532, 0x000cb532,
			0x000cb532, 0x000cb532, 0x000cb540, 0x000cb540, 0x000cb541,
			0x000cb541, 0x000cb542, 0x000cb542, 0x000cb542, 0x000cb542,
			0x000cb543, 0x000cb543, 0x000cb543, 0x000cb543, 0x000cb543,
			0x000cb543, 0x000cb543, 0x000cb543, 0x000cb600, 0x000cb600,
			0x000cb610, 0x000cb610, 0x000cb620, 0x000cb620, 0x000cb621,
			0x000cb621, 0x000cb630, 0x000cb630, 0x000cb631, 0x000cb631,
			0x000cb632, 0x000cb632, 0x000cb632, 0x000cb632, 0x000cb640,
			0x000cb640, 0x000cb641, 0x000cb641, 0x000cb642, 0x000cb642,
			0x000cb642, 0x000cb642, 0x000cb643, 0x000cb643, 0x000cb643,
			0x000cb643, 0x000cb643, 0x000cb643, 0x000cb643, 0x000cb643,
			0x000cb650, 0x000cb650, 0x000cb651, 0x000cb651, 0x000cb652,
			0x000cb652, 0x000cb652, 0x000cb652, 0x000cb653, 0x000cb653,
			0x000cb653, 0x000cb653, 0x000cb653, 0x000cb653, 0x000cb653,
			0x000cb653, 0x000cb654, 0x000cb654, 0x000cb654, 0x000cb654,
			0x000cb654, 0x000cb654, 0x000cb654, 0x000cb654, 0x000cb654,
			0x000cb654, 0x000cb654, 0x000cb654, 0x000cb654, 0x000cb654,
			0x000cb654, 0x000cb654, 0x000cb700, 0x000cb700, 0x000cb710,
			0x000cb710, 0x000cb720, 0x000cb720, 0x000cb721, 0x000cb721,
			0x000cb730, 0x000cb730, 0x000cb731, 0x000cb731, 0x000cb732,
			0x000cb732, 0x000cb732, 0x000cb732, 0x000cb740, 0x000cb740,
			0x000cb741, 0x000cb741, 0x000cb742, 0x000cb742, 0x000cb742,
			0x000cb742, 0x000cb743, 0x000cb743, 0x000cb743, 0x000cb743,
			0x000cb743, 0x000cb743, 0x000cb743, 0x000cb743, 0x000cb750,
			0x000cb750, 0x000cb751, 0x000cb751, 0x000cb752, 0x000cb752,
			0x000cb752, 0x000cb752, 0x000cb753, 0x000cb753, 0x000cb753,
			0x000cb753, 0x000cb753, 0x000cb753, 0x000cb753, 0x000cb753,
			0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754,
			0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754,
			0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754, 0x000cb754,
			0x000cb754, 0x000cb760, 0x000cb760, 0x000cb761, 0x000cb761,
			0x000cb762, 0x000cb762, 0x000cb762, 0x000cb762, 0x000cb763,
			0x000cb763, 0x000cb763, 0x000cb763, 0x000cb763, 0x000cb763,
			0x000cb763, 0x000cb763, 0x000cb764, 0x000cb764, 0x000cb764,
			0x000cb764, 0x000cb764, 0x000cb764, 0x000cb764, 0x000cb764,
			0x000cb764, 0x000cb764, 0x000cb764, 0x000cb764, 0x000cb764,
			0x000cb764, 0x000cb764, 0x000cb764, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765, 0x000cb765,
			0x000cb800, 0x000cb800, 0x000cb810, 0x000cb810, 0x000cb820,
			0x000cb820, 0x000cb821, 0x000cb821, 0x000cb830, 0x000cb830,
			0x000cb831, 0x000cb831, 0x000cb832, 0x000cb832, 0x000cb832,
			0x000cb832, 0x000cb840, 0x000cb840, 0x000cb841, 0x000cb841,
			0x000cb842, 0x000cb842, 0x000cb842, 0x000cb842, 0x000cb843,
			0x000cb843, 0x000cb843, 0x000cb843, 0x000cb843, 0x000cb843,
			0x000cb843, 0x000cb843, 0x000cb850, 0x000cb850, 0x000cb851,
			0x000cb851, 0x000cb852, 0x000cb852, 0x000cb852, 0x000cb852,
			0x000cb853, 0x000cb853, 0x000cb853, 0x000cb853, 0x000cb853,
			0x000cb853, 0x000cb853, 0x000cb853, 0x000cb854, 0x000cb854,
			0x000cb854, 0x000cb854, 0x000cb854, 0x000cb854, 0x000cb854,
			0x000cb854, 0x000cb854, 0x000cb854, 0x000cb854, 0x000cb854,
			0x000cb854, 0x000cb854, 0x000cb854, 0x000cb854, 0x000cb860,
			0x000cb860, 0x000cb861, 0x000cb861, 0x000cb862, 0x000cb862,
			0x000cb862, 0x000cb862, 0x000cb863, 0x000cb863, 0x000cb863,
			0x000cb863, 0x000cb863, 0x000cb863, 0x000cb863, 0x000cb863,
			0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864,
			0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864,
			0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864, 0x000cb864,
			0x000cb864, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865, 0x000cb865,
			0x000cb865, 0x000cb865, 0x000cb865, 0x000cb870, 0x000cb870,
			0x000cb871, 0x000cb871, 0x000cb872, 0x000cb872, 0x000cb872,
			0x000cb872, 0x000cb873, 0x000cb873, 0x000cb873, 0x000cb873,
			0x000cb873, 0x000cb873, 0x000cb873, 0x000cb873, 0x000cb874,
			0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874,
			0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874,
			0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874, 0x000cb874,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875, 0x000cb875,
			0x000cb875, 0x000cb875, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876, 0x000cb876,
			0x000cb876, 0x000cb900, 0x000cb900, 0x000cb910, 0x000cb910,
			0x000cb920, 0x000cb920, 0x000cb921, 0x000cb921, 0x000cb930,
			0x000cb930, 0x000cb931, 0x000cb931, 0x000cb932, 0x000cb932,
			0x000cb932, 0x000cb932, 0x000cb940, 0x000cb940, 0x000cb941,
			0x000cb941, 0x000cb942, 0x000cb942, 0x000cb942, 0x000cb942,
			0x000cb943, 0x000cb943, 0x000cb943, 0x000cb943, 0x000cb943,
			0x000cb943, 0x000cb943, 0x000cb943, 0x000cb950, 0x000cb950,
			0x000cb951, 0x000cb951, 0x000cb952, 0x000cb952, 0x000cb952,
			0x000cb952, 0x000cb953, 0x000cb953, 0x000cb953, 0x000cb953,
			0x000cb953, 0x000cb953, 0x000cb953, 0x000cb953, 0x000cb954,
			0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954,
			0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954,
			0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954, 0x000cb954,
			0x000cb960, 0x000cb960, 0x000cb961, 0x000cb961, 0x000cb962,
			0x000cb962, 0x000cb962, 0x000cb962, 0x000cb963, 0x000cb963,
			0x000cb963, 0x000cb963, 0x000cb963, 0x000cb963, 0x000cb963,
			0x000cb963, 0x000cb964, 0x000cb964, 0x000cb964, 0x000cb964,
			0x000cb964, 0x000cb964, 0x000cb964, 0x000cb964, 0x000cb964,
			0x000cb964, 0x000cb964, 0x000cb964, 0x000cb964, 0x000cb964,
			0x000cb964, 0x000cb964, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965,
			0x000cb965, 0x000cb965, 0x000cb965, 0x000cb965, 0x000cb970,
			0x000cb970, 0x000cb971, 0x000cb971, 0x000cb972, 0x000cb972,
			0x000cb972, 0x000cb972, 0x000cb973, 0x000cb973, 0x000cb973,
			0x000cb973, 0x000cb973, 0x000cb973, 0x000cb973, 0x000cb973,
			0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974,
			0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974,
			0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974, 0x000cb974,
			0x000cb974, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975, 0x000cb975,
			0x000cb975, 0x000cb975, 0x000cb975, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976, 0x000cb976,
			0x000cb976, 0x000cb976, 0x000cb980, 0x000cb980, 0x000cb981,
			0x000cb981, 0x000cb982, 0x000cb982, 0x000cb982, 0x000cb982,
			0x000cb983, 0x000cb983, 0x000cb983, 0x000cb983, 0x000cb983,
			0x000cb983, 0x000cb983, 0x000cb983, 0x000cb984, 0x000cb984,
			0x000cb984, 0x000cb984, 0x000cb984, 0x000cb984, 0x000cb984,
			0x000cb984, 0x000cb984, 0x000cb984, 0x000cb984, 0x000cb984,
			0x000cb984, 0x000cb984, 0x000cb984, 0x000cb984, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985, 0x000cb985,
			0x000cb985, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986, 0x000cb986,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987, 0x000cb987,
			0x000cb987, 0x000cb987, 0x000cb987, 0x000cba00, 0x000cba00,
			0x000cba10, 0x000cba10, 0x000cba20, 0x000cba20, 0x000cba21,
			0x000cba21, 0x000cba30, 0x000cba30, 0x000cba31, 0x000cba31,
			0x000cba32, 0x000cba32, 0x000cba32, 0x000cba32, 0x000cba40,
			0x000cba40, 0x000cba41, 0x000cba41, 0x000cba42, 0x000cba42,
			0x000cba42, 0x000cba42, 0x000cba43, 0x000cba43, 0x000cba43,
			0x000cba43, 0x000cba43, 0x000cba43, 0x000cba43, 0x000cba43,
			0x000cba50, 0x000cba50, 0x000cba51, 0x000cba51, 0x000cba52,
			0x000cba52, 0x000cba52, 0x000cba52, 0x000cba53, 0x000cba53,
			0x000cba53, 0x000cba53, 0x000cba53, 0x000cba53, 0x000cba53,
			0x000cba53, 0x000cba54, 0x000cba54, 0x000cba54, 0x000cba54,
			0x000cba54, 0x000cba54, 0x000cba54, 0x000cba54, 0x000cba54,
			0x000cba54, 0x000cba54, 0x000cba54, 0x000cba54, 0x000cba54,
			0x000cba54, 0x000cba54, 0x000cba60, 0x000cba60, 0x000cba61,
			0x000cba61, 0x000cba62, 0x000cba62, 0x000cba62, 0x000cba62,
			0x000cba63, 0x000cba63, 0x000cba63, 0x000cba63, 0x000cba63,
			0x000cba63, 0x000cba63, 0x000cba63, 0x000cba64, 0x000cba64,
			0x000cba64, 0x000cba64, 0x000cba64, 0x000cba64, 0x000cba64,
			0x000cba64, 0x000cba64, 0x000cba64, 0x000cba64, 0x000cba64,
			0x000cba64, 0x000cba64, 0x000cba64, 0x000cba64, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65, 0x000cba65,
			0x000cba65, 0x000cba70, 0x000cba70, 0x000cba71, 0x000cba71,
			0x000cba72, 0x000cba72, 0x000cba72, 0x000cba72, 0x000cba73,
			0x000cba73, 0x000cba73, 0x000cba73, 0x000cba73, 0x000cba73,
			0x000cba73, 0x000cba73, 0x000cba74, 0x000cba74, 0x000cba74,
			0x000cba74, 0x000cba74, 0x000cba74, 0x000cba74, 0x000cba74,
			0x000cba74, 0x000cba74, 0x000cba74, 0x000cba74, 0x000cba74,
			0x000cba74, 0x000cba74, 0x000cba74, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75, 0x000cba75,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76,
			0x000cba76, 0x000cba76, 0x000cba76, 0x000cba76, 0x000cba80,
			0x000cba80, 0x000cba81, 0x000cba81, 0x000cba82, 0x000cba82,
			0x000cba82, 0x000cba82, 0x000cba83, 0x000cba83, 0x000cba83,
			0x000cba83, 0x000cba83, 0x000cba83, 0x000cba83, 0x000cba83,
			0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84,
			0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84,
			0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84, 0x000cba84,
			0x000cba84, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85, 0x000cba85,
			0x000cba85, 0x000cba85, 0x000cba85, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86, 0x000cba86,
			0x000cba86, 0x000cba86, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87, 0x000cba87,
			0x000cba90, 0x000cba90, 0x000cba91, 0x000cba91, 0x000cba92,
			0x000cba92, 0x000cba92, 0x000cba92, 0x000cba93, 0x000cba93,
			0x000cba93, 0x000cba93, 0x000cba93, 0x000cba93, 0x000cba93,
			0x000cba93, 0x000cba94, 0x000cba94, 0x000cba94, 0x000cba94,
			0x000cba94, 0x000cba94, 0x000cba94, 0x000cba94, 0x000cba94,
			0x000cba94, 0x000cba94, 0x000cba94, 0x000cba94, 0x000cba94,
			0x000cba94, 0x000cba94, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95,
			0x000cba95, 0x000cba95, 0x000cba95, 0x000cba95, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96, 0x000cba96,
			0x000cba96, 0x000cba96, 0x000cba96, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97, 0x000cba97,
			0x000cba97, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98, 0x000cba98,
			0x000cba98, 0x000cba98
		};
	}

	private static final short[] _topCardTable = initTopCardTable();

	private static short[] initTopCardTable() {
		return new short[] {
			0x00, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x03, 0x03,
			0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x04, 0x04, 0x04, 0x04,
			0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04,
			0x04, 0x04, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05, 0x05,
			0x05, 0x05, 0x05, 0x05, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06,
			0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07,
			0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
			0x08, 0x08, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09,
			0x09, 0x09, 0x09, 0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
			0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b,
			0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0b, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c,
			0x0c, 0x0c
		};
	}

	/**
	 * This table is equivalent to 1UL left shifted by the index. The lookup is
	 * faster than the left shift operator.
	 */
	public static final long[] _cardMasksTable = initCardMasksTable();

	private static long[] initCardMasksTable() {
		return new long[] {
			0x1L,
			0x2L,
			0x4L,
			0x8L,
			0x10L,
			0x20L,
			0x40L,
			0x80L,
			0x100L,
			0x200L,
			0x400L,
			0x800L,
			0x1000L,
			0x2000L,
			0x4000L,
			0x8000L,
			0x10000L,
			0x20000L,
			0x40000L,
			0x80000L,
			0x100000L,
			0x200000L,
			0x400000L,
			0x800000L,
			0x1000000L,
			0x2000000L,
			0x4000000L,
			0x8000000L,
			0x10000000L,
			0x20000000L,
			0x40000000L,
			0x80000000L,
			0x100000000L,
			0x200000000L,
			0x400000000L,
			0x800000000L,
			0x1000000000L,
			0x2000000000L,
			0x4000000000L,
			0x8000000000L,
			0x10000000000L,
			0x20000000000L,
			0x40000000000L,
			0x80000000000L,
			0x100000000000L,
			0x200000000000L,
			0x400000000000L,
			0x800000000000L,
			0x1000000000000L,
			0x2000000000000L,
			0x4000000000000L,
			0x8000000000000L,
		};
	}

	// converts card number into the equivalent text string.
	public static final String[] _cardTable = initCardTable();

	private static String[] initCardTable() {
		return new String[] {
			"2c", "3c", "4c", "5c", "6c", "7c", "8c", "9c",
				"Tc", "Jc", "Qc", "Kc", "Ac",
			"2d", "3d", "4d", "5d", "6d", "7d", "8d", "9d",
				"Td", "Jd", "Qd", "Kd", "Ad",
			"2h", "3h", "4h", "5h", "6h", "7h", "8h", "9h",
				"Th", "Jh", "Qh", "Kh", "Ah",
			"2s", "3s", "4s", "5s", "6s", "7s", "8s", "9s",
				"Ts", "Js", "Qs", "Ks", "As",
		};
	}

	// Converts card number into the card rank text string
	public static final String[] _rankTable = initRankTable();

	private static String[] initRankTable() {
		return new String[] {
			"Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
				"Ten", "Jack", "Queen", "King", "Ace",
			"Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
				"Ten", "Jack", "Queen", "King", "Ace",
			"Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
				"Ten", "Jack", "Queen", "King", "Ace",
			"Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine",
				"Ten", "Jack", "Queen", "King", "Ace"
		};
	}

	// Converts card number into the card suit text string
	@SuppressWarnings("unused")
	private static final String[] _suitTable = initSuitTable();

	private static String[] initSuitTable() {
		return new String[] {
			"Clubs", "Clubs", "Clubs", "Clubs",
			"Clubs", "Clubs", "Clubs", "Clubs",
			"Clubs", "Clubs", "Clubs", "Clubs",
			"Clubs",
			"Diamonds", "Diamonds", "Diamonds", "Diamonds",
			"Diamonds", "Diamonds", "Diamonds", "Diamonds",
			"Diamonds", "Diamonds", "Diamonds", "Diamonds",
			"Diamonds",
			"Hearts", "Hearts", "Hearts", "Hearts",
			"Hearts", "Hearts", "Hearts", "Hearts",
			"Hearts", "Hearts", "Hearts", "Hearts",
			"Hearts",
			"Spades", "Spades", "Spades", "Spades",
			"Spades", "Spades", "Spades", "Spades",
			"Spades", "Spades", "Spades", "Spades",
			"Spades",
		};
	}

	// Converts card number into the card rank char
	@SuppressWarnings("unused")
	private static final char[] _rankCharTable = initRankCharTable();

	private static char[] initRankCharTable() {
		return new char[] {
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
			'2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A',
		};
	}

	// Converts card number into the card suit text string
	@SuppressWarnings("unused")
	private static final char[] _suitCharTable = initSuitCharTable();

	private static char[] initSuitCharTable() {
		return new char[] {
			'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c', 'c',
			'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd', 'd',
			'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h', 'h',
			's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's',
		};
	}

	/**
	 * 1326 ulong cards masks for all hold cards.
	 * FROM:HandIterator.cs
	 */
	static final long[] _twoCardTable = initTwoCardTable();

	private static long[] initTwoCardTable() {
		return new long[] {
            0xc000000000000L, 0xa000000000000L, 0x9000000000000L, 0x8800000000000L, 0x8400000000000L,
            0x8200000000000L, 0x8100000000000L, 0x8080000000000L, 0x8040000000000L, 0x8020000000000L,
            0x8010000000000L, 0x8008000000000L, 0x8004000000000L, 0x8002000000000L, 0x8001000000000L,
            0x8000800000000L, 0x8000400000000L, 0x8000200000000L, 0x8000100000000L, 0x8000080000000L,
            0x8000040000000L, 0x8000020000000L, 0x8000010000000L, 0x8000008000000L, 0x8000004000000L,
            0x8000002000000L, 0x8000001000000L, 0x8000000800000L, 0x8000000400000L, 0x8000000200000L,
            0x8000000100000L, 0x8000000080000L, 0x8000000040000L, 0x8000000020000L, 0x8000000010000L,
            0x8000000008000L, 0x8000000004000L, 0x8000000002000L, 0x8000000001000L, 0x8000000000800L,
            0x8000000000400L, 0x8000000000200L, 0x8000000000100L, 0x8000000000080L, 0x8000000000040L,
            0x8000000000020L, 0x8000000000010L, 0x8000000000008L, 0x8000000000004L, 0x8000000000002L,
            0x8000000000001L, 0x6000000000000L, 0x5000000000000L, 0x4800000000000L, 0x4400000000000L,
            0x4200000000000L, 0x4100000000000L, 0x4080000000000L, 0x4040000000000L, 0x4020000000000L,
            0x4010000000000L, 0x4008000000000L, 0x4004000000000L, 0x4002000000000L, 0x4001000000000L,
            0x4000800000000L, 0x4000400000000L, 0x4000200000000L, 0x4000100000000L, 0x4000080000000L,
            0x4000040000000L, 0x4000020000000L, 0x4000010000000L, 0x4000008000000L, 0x4000004000000L,
            0x4000002000000L, 0x4000001000000L, 0x4000000800000L, 0x4000000400000L, 0x4000000200000L,
            0x4000000100000L, 0x4000000080000L, 0x4000000040000L, 0x4000000020000L, 0x4000000010000L,
            0x4000000008000L, 0x4000000004000L, 0x4000000002000L, 0x4000000001000L, 0x4000000000800L,
            0x4000000000400L, 0x4000000000200L, 0x4000000000100L, 0x4000000000080L, 0x4000000000040L,
            0x4000000000020L, 0x4000000000010L, 0x4000000000008L, 0x4000000000004L, 0x4000000000002L,
            0x4000000000001L, 0x3000000000000L, 0x2800000000000L, 0x2400000000000L, 0x2200000000000L,
            0x2100000000000L, 0x2080000000000L, 0x2040000000000L, 0x2020000000000L, 0x2010000000000L,
            0x2008000000000L, 0x2004000000000L, 0x2002000000000L, 0x2001000000000L, 0x2000800000000L,
            0x2000400000000L, 0x2000200000000L, 0x2000100000000L, 0x2000080000000L, 0x2000040000000L,
            0x2000020000000L, 0x2000010000000L, 0x2000008000000L, 0x2000004000000L, 0x2000002000000L,
            0x2000001000000L, 0x2000000800000L, 0x2000000400000L, 0x2000000200000L, 0x2000000100000L,
            0x2000000080000L, 0x2000000040000L, 0x2000000020000L, 0x2000000010000L, 0x2000000008000L,
            0x2000000004000L, 0x2000000002000L, 0x2000000001000L, 0x2000000000800L, 0x2000000000400L,
            0x2000000000200L, 0x2000000000100L, 0x2000000000080L, 0x2000000000040L, 0x2000000000020L,
            0x2000000000010L, 0x2000000000008L, 0x2000000000004L, 0x2000000000002L, 0x2000000000001L,
            0x1800000000000L, 0x1400000000000L, 0x1200000000000L, 0x1100000000000L, 0x1080000000000L,
            0x1040000000000L, 0x1020000000000L, 0x1010000000000L, 0x1008000000000L, 0x1004000000000L,
            0x1002000000000L, 0x1001000000000L, 0x1000800000000L, 0x1000400000000L, 0x1000200000000L,
            0x1000100000000L, 0x1000080000000L, 0x1000040000000L, 0x1000020000000L, 0x1000010000000L,
            0x1000008000000L, 0x1000004000000L, 0x1000002000000L, 0x1000001000000L, 0x1000000800000L,
            0x1000000400000L, 0x1000000200000L, 0x1000000100000L, 0x1000000080000L, 0x1000000040000L,
            0x1000000020000L, 0x1000000010000L, 0x1000000008000L, 0x1000000004000L, 0x1000000002000L,
            0x1000000001000L, 0x1000000000800L, 0x1000000000400L, 0x1000000000200L, 0x1000000000100L,
            0x1000000000080L, 0x1000000000040L, 0x1000000000020L, 0x1000000000010L, 0x1000000000008L,
            0x1000000000004L, 0x1000000000002L, 0x1000000000001L, 0xc00000000000L, 0xa00000000000L,
            0x900000000000L, 0x880000000000L, 0x840000000000L, 0x820000000000L, 0x810000000000L,
            0x808000000000L, 0x804000000000L, 0x802000000000L, 0x801000000000L, 0x800800000000L,
            0x800400000000L, 0x800200000000L, 0x800100000000L, 0x800080000000L, 0x800040000000L,
            0x800020000000L, 0x800010000000L, 0x800008000000L, 0x800004000000L, 0x800002000000L,
            0x800001000000L, 0x800000800000L, 0x800000400000L, 0x800000200000L, 0x800000100000L,
            0x800000080000L, 0x800000040000L, 0x800000020000L, 0x800000010000L, 0x800000008000L,
            0x800000004000L, 0x800000002000L, 0x800000001000L, 0x800000000800L, 0x800000000400L,
            0x800000000200L, 0x800000000100L, 0x800000000080L, 0x800000000040L, 0x800000000020L,
            0x800000000010L, 0x800000000008L, 0x800000000004L, 0x800000000002L, 0x800000000001L,
            0x600000000000L, 0x500000000000L, 0x480000000000L, 0x440000000000L, 0x420000000000L,
            0x410000000000L, 0x408000000000L, 0x404000000000L, 0x402000000000L, 0x401000000000L,
            0x400800000000L, 0x400400000000L, 0x400200000000L, 0x400100000000L, 0x400080000000L,
            0x400040000000L, 0x400020000000L, 0x400010000000L, 0x400008000000L, 0x400004000000L,
            0x400002000000L, 0x400001000000L, 0x400000800000L, 0x400000400000L, 0x400000200000L,
            0x400000100000L, 0x400000080000L, 0x400000040000L, 0x400000020000L, 0x400000010000L,
            0x400000008000L, 0x400000004000L, 0x400000002000L, 0x400000001000L, 0x400000000800L,
            0x400000000400L, 0x400000000200L, 0x400000000100L, 0x400000000080L, 0x400000000040L,
            0x400000000020L, 0x400000000010L, 0x400000000008L, 0x400000000004L, 0x400000000002L,
            0x400000000001L, 0x300000000000L, 0x280000000000L, 0x240000000000L, 0x220000000000L,
            0x210000000000L, 0x208000000000L, 0x204000000000L, 0x202000000000L, 0x201000000000L,
            0x200800000000L, 0x200400000000L, 0x200200000000L, 0x200100000000L, 0x200080000000L,
            0x200040000000L, 0x200020000000L, 0x200010000000L, 0x200008000000L, 0x200004000000L,
            0x200002000000L, 0x200001000000L, 0x200000800000L, 0x200000400000L, 0x200000200000L,
            0x200000100000L, 0x200000080000L, 0x200000040000L, 0x200000020000L, 0x200000010000L,
            0x200000008000L, 0x200000004000L, 0x200000002000L, 0x200000001000L, 0x200000000800L,
            0x200000000400L, 0x200000000200L, 0x200000000100L, 0x200000000080L, 0x200000000040L,
            0x200000000020L, 0x200000000010L, 0x200000000008L, 0x200000000004L, 0x200000000002L,
            0x200000000001L, 0x180000000000L, 0x140000000000L, 0x120000000000L, 0x110000000000L,
            0x108000000000L, 0x104000000000L, 0x102000000000L, 0x101000000000L, 0x100800000000L,
            0x100400000000L, 0x100200000000L, 0x100100000000L, 0x100080000000L, 0x100040000000L,
            0x100020000000L, 0x100010000000L, 0x100008000000L, 0x100004000000L, 0x100002000000L,
            0x100001000000L, 0x100000800000L, 0x100000400000L, 0x100000200000L, 0x100000100000L,
            0x100000080000L, 0x100000040000L, 0x100000020000L, 0x100000010000L, 0x100000008000L,
            0x100000004000L, 0x100000002000L, 0x100000001000L, 0x100000000800L, 0x100000000400L,
            0x100000000200L, 0x100000000100L, 0x100000000080L, 0x100000000040L, 0x100000000020L,
            0x100000000010L, 0x100000000008L, 0x100000000004L, 0x100000000002L, 0x100000000001L,
            0xc0000000000L, 0xa0000000000L, 0x90000000000L, 0x88000000000L, 0x84000000000L,
            0x82000000000L, 0x81000000000L, 0x80800000000L, 0x80400000000L, 0x80200000000L,
            0x80100000000L, 0x80080000000L, 0x80040000000L, 0x80020000000L, 0x80010000000L,
            0x80008000000L, 0x80004000000L, 0x80002000000L, 0x80001000000L, 0x80000800000L,
            0x80000400000L, 0x80000200000L, 0x80000100000L, 0x80000080000L, 0x80000040000L,
            0x80000020000L, 0x80000010000L, 0x80000008000L, 0x80000004000L, 0x80000002000L,
            0x80000001000L, 0x80000000800L, 0x80000000400L, 0x80000000200L, 0x80000000100L,
            0x80000000080L, 0x80000000040L, 0x80000000020L, 0x80000000010L, 0x80000000008L,
            0x80000000004L, 0x80000000002L, 0x80000000001L, 0x60000000000L, 0x50000000000L,
            0x48000000000L, 0x44000000000L, 0x42000000000L, 0x41000000000L, 0x40800000000L,
            0x40400000000L, 0x40200000000L, 0x40100000000L, 0x40080000000L, 0x40040000000L,
            0x40020000000L, 0x40010000000L, 0x40008000000L, 0x40004000000L, 0x40002000000L,
            0x40001000000L, 0x40000800000L, 0x40000400000L, 0x40000200000L, 0x40000100000L,
            0x40000080000L, 0x40000040000L, 0x40000020000L, 0x40000010000L, 0x40000008000L,
            0x40000004000L, 0x40000002000L, 0x40000001000L, 0x40000000800L, 0x40000000400L,
            0x40000000200L, 0x40000000100L, 0x40000000080L, 0x40000000040L, 0x40000000020L,
            0x40000000010L, 0x40000000008L, 0x40000000004L, 0x40000000002L, 0x40000000001L,
            0x30000000000L, 0x28000000000L, 0x24000000000L, 0x22000000000L, 0x21000000000L,
            0x20800000000L, 0x20400000000L, 0x20200000000L, 0x20100000000L, 0x20080000000L,
            0x20040000000L, 0x20020000000L, 0x20010000000L, 0x20008000000L, 0x20004000000L,
            0x20002000000L, 0x20001000000L, 0x20000800000L, 0x20000400000L, 0x20000200000L,
            0x20000100000L, 0x20000080000L, 0x20000040000L, 0x20000020000L, 0x20000010000L,
            0x20000008000L, 0x20000004000L, 0x20000002000L, 0x20000001000L, 0x20000000800L,
            0x20000000400L, 0x20000000200L, 0x20000000100L, 0x20000000080L, 0x20000000040L,
            0x20000000020L, 0x20000000010L, 0x20000000008L, 0x20000000004L, 0x20000000002L,
            0x20000000001L, 0x18000000000L, 0x14000000000L, 0x12000000000L, 0x11000000000L,
            0x10800000000L, 0x10400000000L, 0x10200000000L, 0x10100000000L, 0x10080000000L,
            0x10040000000L, 0x10020000000L, 0x10010000000L, 0x10008000000L, 0x10004000000L,
            0x10002000000L, 0x10001000000L, 0x10000800000L, 0x10000400000L, 0x10000200000L,
            0x10000100000L, 0x10000080000L, 0x10000040000L, 0x10000020000L, 0x10000010000L,
            0x10000008000L, 0x10000004000L, 0x10000002000L, 0x10000001000L, 0x10000000800L,
            0x10000000400L, 0x10000000200L, 0x10000000100L, 0x10000000080L, 0x10000000040L,
            0x10000000020L, 0x10000000010L, 0x10000000008L, 0x10000000004L, 0x10000000002L,
            0x10000000001L, 0xc000000000L, 0xa000000000L, 0x9000000000L, 0x8800000000L,
            0x8400000000L, 0x8200000000L, 0x8100000000L, 0x8080000000L, 0x8040000000L,
            0x8020000000L, 0x8010000000L, 0x8008000000L, 0x8004000000L, 0x8002000000L,
            0x8001000000L, 0x8000800000L, 0x8000400000L, 0x8000200000L, 0x8000100000L,
            0x8000080000L, 0x8000040000L, 0x8000020000L, 0x8000010000L, 0x8000008000L,
            0x8000004000L, 0x8000002000L, 0x8000001000L, 0x8000000800L, 0x8000000400L,
            0x8000000200L, 0x8000000100L, 0x8000000080L, 0x8000000040L, 0x8000000020L,
            0x8000000010L, 0x8000000008L, 0x8000000004L, 0x8000000002L, 0x8000000001L,
            0x6000000000L, 0x5000000000L, 0x4800000000L, 0x4400000000L, 0x4200000000L,
            0x4100000000L, 0x4080000000L, 0x4040000000L, 0x4020000000L, 0x4010000000L,
            0x4008000000L, 0x4004000000L, 0x4002000000L, 0x4001000000L, 0x4000800000L,
            0x4000400000L, 0x4000200000L, 0x4000100000L, 0x4000080000L, 0x4000040000L,
            0x4000020000L, 0x4000010000L, 0x4000008000L, 0x4000004000L, 0x4000002000L,
            0x4000001000L, 0x4000000800L, 0x4000000400L, 0x4000000200L, 0x4000000100L,
            0x4000000080L, 0x4000000040L, 0x4000000020L, 0x4000000010L, 0x4000000008L,
            0x4000000004L, 0x4000000002L, 0x4000000001L, 0x3000000000L, 0x2800000000L,
            0x2400000000L, 0x2200000000L, 0x2100000000L, 0x2080000000L, 0x2040000000L,
            0x2020000000L, 0x2010000000L, 0x2008000000L, 0x2004000000L, 0x2002000000L,
            0x2001000000L, 0x2000800000L, 0x2000400000L, 0x2000200000L, 0x2000100000L,
            0x2000080000L, 0x2000040000L, 0x2000020000L, 0x2000010000L, 0x2000008000L,
            0x2000004000L, 0x2000002000L, 0x2000001000L, 0x2000000800L, 0x2000000400L,
            0x2000000200L, 0x2000000100L, 0x2000000080L, 0x2000000040L, 0x2000000020L,
            0x2000000010L, 0x2000000008L, 0x2000000004L, 0x2000000002L, 0x2000000001L,
            0x1800000000L, 0x1400000000L, 0x1200000000L, 0x1100000000L, 0x1080000000L,
            0x1040000000L, 0x1020000000L, 0x1010000000L, 0x1008000000L, 0x1004000000L,
            0x1002000000L, 0x1001000000L, 0x1000800000L, 0x1000400000L, 0x1000200000L,
            0x1000100000L, 0x1000080000L, 0x1000040000L, 0x1000020000L, 0x1000010000L,
            0x1000008000L, 0x1000004000L, 0x1000002000L, 0x1000001000L, 0x1000000800L,
            0x1000000400L, 0x1000000200L, 0x1000000100L, 0x1000000080L, 0x1000000040L,
            0x1000000020L, 0x1000000010L, 0x1000000008L, 0x1000000004L, 0x1000000002L,
            0x1000000001L, 0xc00000000L, 0xa00000000L, 0x900000000L, 0x880000000L,
            0x840000000L, 0x820000000L, 0x810000000L, 0x808000000L, 0x804000000L,
            0x802000000L, 0x801000000L, 0x800800000L, 0x800400000L, 0x800200000L,
            0x800100000L, 0x800080000L, 0x800040000L, 0x800020000L, 0x800010000L,
            0x800008000L, 0x800004000L, 0x800002000L, 0x800001000L, 0x800000800L,
            0x800000400L, 0x800000200L, 0x800000100L, 0x800000080L, 0x800000040L,
            0x800000020L, 0x800000010L, 0x800000008L, 0x800000004L, 0x800000002L,
            0x800000001L, 0x600000000L, 0x500000000L, 0x480000000L, 0x440000000L,
            0x420000000L, 0x410000000L, 0x408000000L, 0x404000000L, 0x402000000L,
            0x401000000L, 0x400800000L, 0x400400000L, 0x400200000L, 0x400100000L,
            0x400080000L, 0x400040000L, 0x400020000L, 0x400010000L, 0x400008000L,
            0x400004000L, 0x400002000L, 0x400001000L, 0x400000800L, 0x400000400L,
            0x400000200L, 0x400000100L, 0x400000080L, 0x400000040L, 0x400000020L,
            0x400000010L, 0x400000008L, 0x400000004L, 0x400000002L, 0x400000001L,
            0x300000000L, 0x280000000L, 0x240000000L, 0x220000000L, 0x210000000L,
            0x208000000L, 0x204000000L, 0x202000000L, 0x201000000L, 0x200800000L,
            0x200400000L, 0x200200000L, 0x200100000L, 0x200080000L, 0x200040000L,
            0x200020000L, 0x200010000L, 0x200008000L, 0x200004000L, 0x200002000L,
            0x200001000L, 0x200000800L, 0x200000400L, 0x200000200L, 0x200000100L,
            0x200000080L, 0x200000040L, 0x200000020L, 0x200000010L, 0x200000008L,
            0x200000004L, 0x200000002L, 0x200000001L, 0x180000000L, 0x140000000L,
            0x120000000L, 0x110000000L, 0x108000000L, 0x104000000L, 0x102000000L,
            0x101000000L, 0x100800000L, 0x100400000L, 0x100200000L, 0x100100000L,
            0x100080000L, 0x100040000L, 0x100020000L, 0x100010000L, 0x100008000L,
            0x100004000L, 0x100002000L, 0x100001000L, 0x100000800L, 0x100000400L,
            0x100000200L, 0x100000100L, 0x100000080L, 0x100000040L, 0x100000020L,
            0x100000010L, 0x100000008L, 0x100000004L, 0x100000002L, 0x100000001L,
            0xc0000000L, 0xa0000000L, 0x90000000L, 0x88000000L, 0x84000000L,
            0x82000000L, 0x81000000L, 0x80800000L, 0x80400000L, 0x80200000L,
            0x80100000L, 0x80080000L, 0x80040000L, 0x80020000L, 0x80010000L,
            0x80008000L, 0x80004000L, 0x80002000L, 0x80001000L, 0x80000800L,
            0x80000400L, 0x80000200L, 0x80000100L, 0x80000080L, 0x80000040L,
            0x80000020L, 0x80000010L, 0x80000008L, 0x80000004L, 0x80000002L,
            0x80000001L, 0x60000000L, 0x50000000L, 0x48000000L, 0x44000000L,
            0x42000000L, 0x41000000L, 0x40800000L, 0x40400000L, 0x40200000L,
            0x40100000L, 0x40080000L, 0x40040000L, 0x40020000L, 0x40010000L,
            0x40008000L, 0x40004000L, 0x40002000L, 0x40001000L, 0x40000800L,
            0x40000400L, 0x40000200L, 0x40000100L, 0x40000080L, 0x40000040L,
            0x40000020L, 0x40000010L, 0x40000008L, 0x40000004L, 0x40000002L,
            0x40000001L, 0x30000000L, 0x28000000L, 0x24000000L, 0x22000000L,
            0x21000000L, 0x20800000L, 0x20400000L, 0x20200000L, 0x20100000L,
            0x20080000L, 0x20040000L, 0x20020000L, 0x20010000L, 0x20008000L,
            0x20004000L, 0x20002000L, 0x20001000L, 0x20000800L, 0x20000400L,
            0x20000200L, 0x20000100L, 0x20000080L, 0x20000040L, 0x20000020L,
            0x20000010L, 0x20000008L, 0x20000004L, 0x20000002L, 0x20000001L,
            0x18000000L, 0x14000000L, 0x12000000L, 0x11000000L, 0x10800000L,
            0x10400000L, 0x10200000L, 0x10100000L, 0x10080000L, 0x10040000L,
            0x10020000L, 0x10010000L, 0x10008000L, 0x10004000L, 0x10002000L,
            0x10001000L, 0x10000800L, 0x10000400L, 0x10000200L, 0x10000100L,
            0x10000080L, 0x10000040L, 0x10000020L, 0x10000010L, 0x10000008L,
            0x10000004L, 0x10000002L, 0x10000001L, 0xc000000L, 0xa000000L,
            0x9000000L, 0x8800000L, 0x8400000L, 0x8200000L, 0x8100000L,
            0x8080000L, 0x8040000L, 0x8020000L, 0x8010000L, 0x8008000L,
            0x8004000L, 0x8002000L, 0x8001000L, 0x8000800L, 0x8000400L,
            0x8000200L, 0x8000100L, 0x8000080L, 0x8000040L, 0x8000020L,
            0x8000010L, 0x8000008L, 0x8000004L, 0x8000002L, 0x8000001L,
            0x6000000L, 0x5000000L, 0x4800000L, 0x4400000L, 0x4200000L,
            0x4100000L, 0x4080000L, 0x4040000L, 0x4020000L, 0x4010000L,
            0x4008000L, 0x4004000L, 0x4002000L, 0x4001000L, 0x4000800L,
            0x4000400L, 0x4000200L, 0x4000100L, 0x4000080L, 0x4000040L,
            0x4000020L, 0x4000010L, 0x4000008L, 0x4000004L, 0x4000002L,
            0x4000001L, 0x3000000L, 0x2800000L, 0x2400000L, 0x2200000L,
            0x2100000L, 0x2080000L, 0x2040000L, 0x2020000L, 0x2010000L,
            0x2008000L, 0x2004000L, 0x2002000L, 0x2001000L, 0x2000800L,
            0x2000400L, 0x2000200L, 0x2000100L, 0x2000080L, 0x2000040L,
            0x2000020L, 0x2000010L, 0x2000008L, 0x2000004L, 0x2000002L,
            0x2000001L, 0x1800000L, 0x1400000L, 0x1200000L, 0x1100000L,
            0x1080000L, 0x1040000L, 0x1020000L, 0x1010000L, 0x1008000L,
            0x1004000L, 0x1002000L, 0x1001000L, 0x1000800L, 0x1000400L,
            0x1000200L, 0x1000100L, 0x1000080L, 0x1000040L, 0x1000020L,
            0x1000010L, 0x1000008L, 0x1000004L, 0x1000002L, 0x1000001L,
            0xc00000L, 0xa00000L, 0x900000L, 0x880000L, 0x840000L,
            0x820000L, 0x810000L, 0x808000L, 0x804000L, 0x802000L,
            0x801000L, 0x800800L, 0x800400L, 0x800200L, 0x800100L,
            0x800080L, 0x800040L, 0x800020L, 0x800010L, 0x800008L,
            0x800004L, 0x800002L, 0x800001L, 0x600000L, 0x500000L,
            0x480000L, 0x440000L, 0x420000L, 0x410000L, 0x408000L,
            0x404000L, 0x402000L, 0x401000L, 0x400800L, 0x400400L,
            0x400200L, 0x400100L, 0x400080L, 0x400040L, 0x400020L,
            0x400010L, 0x400008L, 0x400004L, 0x400002L, 0x400001L,
            0x300000L, 0x280000L, 0x240000L, 0x220000L, 0x210000L,
            0x208000L, 0x204000L, 0x202000L, 0x201000L, 0x200800L,
            0x200400L, 0x200200L, 0x200100L, 0x200080L, 0x200040L,
            0x200020L, 0x200010L, 0x200008L, 0x200004L, 0x200002L,
            0x200001L, 0x180000L, 0x140000L, 0x120000L, 0x110000L,
            0x108000L, 0x104000L, 0x102000L, 0x101000L, 0x100800L,
            0x100400L, 0x100200L, 0x100100L, 0x100080L, 0x100040L,
            0x100020L, 0x100010L, 0x100008L, 0x100004L, 0x100002L,
            0x100001L, 0xc0000L, 0xa0000L, 0x90000L, 0x88000L,
            0x84000L, 0x82000L, 0x81000L, 0x80800L, 0x80400L,
            0x80200L, 0x80100L, 0x80080L, 0x80040L, 0x80020L,
            0x80010L, 0x80008L, 0x80004L, 0x80002L, 0x80001L,
            0x60000L, 0x50000L, 0x48000L, 0x44000L, 0x42000L,
            0x41000L, 0x40800L, 0x40400L, 0x40200L, 0x40100L,
            0x40080L, 0x40040L, 0x40020L, 0x40010L, 0x40008L,
            0x40004L, 0x40002L, 0x40001L, 0x30000L, 0x28000L,
            0x24000L, 0x22000L, 0x21000L, 0x20800L, 0x20400L,
            0x20200L, 0x20100L, 0x20080L, 0x20040L, 0x20020L,
            0x20010L, 0x20008L, 0x20004L, 0x20002L, 0x20001L,
            0x18000L, 0x14000L, 0x12000L, 0x11000L, 0x10800L,
            0x10400L, 0x10200L, 0x10100L, 0x10080L, 0x10040L,
            0x10020L, 0x10010L, 0x10008L, 0x10004L, 0x10002L,
            0x10001L, 0xc000L, 0xa000L, 0x9000L, 0x8800L,
            0x8400L, 0x8200L, 0x8100L, 0x8080L, 0x8040L,
            0x8020L, 0x8010L, 0x8008L, 0x8004L, 0x8002L,
            0x8001L, 0x6000L, 0x5000L, 0x4800L, 0x4400L,
            0x4200L, 0x4100L, 0x4080L, 0x4040L, 0x4020L,
            0x4010L, 0x4008L, 0x4004L, 0x4002L, 0x4001L,
            0x3000L, 0x2800L, 0x2400L, 0x2200L, 0x2100L,
            0x2080L, 0x2040L, 0x2020L, 0x2010L, 0x2008L,
            0x2004L, 0x2002L, 0x2001L, 0x1800L, 0x1400L,
            0x1200L, 0x1100L, 0x1080L, 0x1040L, 0x1020L,
            0x1010L, 0x1008L, 0x1004L, 0x1002L, 0x1001L,
            0xc00L, 0xa00L, 0x900L, 0x880L, 0x840L,
            0x820L, 0x810L, 0x808L, 0x804L, 0x802L,
            0x801L, 0x600L, 0x500L, 0x480L, 0x440L,
            0x420L, 0x410L, 0x408L, 0x404L, 0x402L,
            0x401L, 0x300L, 0x280L, 0x240L, 0x220L,
            0x210L, 0x208L, 0x204L, 0x202L, 0x201L,
            0x180L, 0x140L, 0x120L, 0x110L, 0x108L,
            0x104L, 0x102L, 0x101L, 0xc0L, 0xa0L,
            0x90L, 0x88L, 0x84L, 0x82L, 0x81L,
            0x60L, 0x50L, 0x48L, 0x44L, 0x42L,
            0x41L, 0x30L, 0x28L, 0x24L, 0x22L,
            0x21L, 0x18L, 0x14L, 0x12L, 0x11L,
            0xcL, 0xaL, 0x9L, 0x6L, 0x5L,
            0x3L
		};
	}

	/**
	 * The 1326 possible pocket cards ordered by the 169 unique holdem
	 * combinations. The index is equivalent to the number value of
	 * Hand.PocketPairType.
	 * FROM:HandIterator.cs
	 */
	private static final long[][] _pocket169Table = initPocket169Table();

	private static long[][] initPocket169Table() {
		return new long[][] {
	        new long[] {0x8004000000000L, 0x8000002000000L, 0x8000000001000L, 0x4002000000L, 0x4000001000L, 0x2001000L},
	        new long[] {0x4002000000000L, 0x4000001000000L, 0x4000000000800L, 0x2001000000L, 0x2000000800L, 0x1000800L},
	        new long[] {0x2001000000000L, 0x2000000800000L, 0x2000000000400L, 0x1000800000L, 0x1000000400L, 0x800400L},
	        new long[] {0x1000800000000L, 0x1000000400000L, 0x1000000000200L, 0x800400000L, 0x800000200L, 0x400200L},
	        new long[] {0x800400000000L, 0x800000200000L, 0x800000000100L, 0x400200000L, 0x400000100L, 0x200100L},
	        new long[] {0x400200000000L, 0x400000100000L, 0x400000000080L, 0x200100000L, 0x200000080L, 0x100080L},
	        new long[] {0x200100000000L, 0x200000080000L, 0x200000000040L, 0x100080000L, 0x100000040L, 0x80040L},
	        new long[] {0x100080000000L, 0x100000040000L, 0x100000000020L, 0x80040000L, 0x80000020L, 0x40020L},
	        new long[] {0x80040000000L, 0x80000020000L, 0x80000000010L, 0x40020000L, 0x40000010L, 0x20010L},
	        new long[] {0x40020000000L, 0x40000010000L, 0x40000000008L, 0x20010000L, 0x20000008L, 0x10008L},
	        new long[] {0x20010000000L, 0x20000008000L, 0x20000000004L, 0x10008000L, 0x10000004L, 0x8004L},
	        new long[] {0x10008000000L, 0x10000004000L, 0x10000000002L, 0x8004000L, 0x8000002L, 0x4002L},
	        new long[] {0x8004000000L, 0x8000002000L, 0x8000000001L, 0x4002000L, 0x4000001L, 0x2001L},
	        new long[] {0xC000000000000L, 0x6000000000L, 0x3000000L, 0x1800L},
	        new long[] {0x8002000000000L, 0x8000001000000L, 0x8000000000800L, 0x4004000000000L, 0x4000002000000L, 0x4000000001000L, 0x4001000000L, 0x4000000800L, 0x2002000000L, 0x2000001000L, 0x2000800L, 0x1001000L},
	        new long[] {0xA000000000000L, 0x5000000000L, 0x2800000L, 0x1400L},
	        new long[] {0x8001000000000L, 0x8000000800000L, 0x8000000000400L, 0x2004000000000L, 0x2000002000000L, 0x2000000001000L, 0x4000800000L, 0x4000000400L, 0x1002000000L, 0x1000001000L, 0x2000400L, 0x801000L},
	        new long[] {0x9000000000000L, 0x4800000000L, 0x2400000L, 0x1200L},
	        new long[] {0x8000800000000L, 0x8000000400000L, 0x8000000000200L, 0x1004000000000L, 0x1000002000000L, 0x1000000001000L, 0x4000400000L, 0x4000000200L, 0x802000000L, 0x800001000L, 0x2000200L, 0x401000L},
	        new long[] {0x8800000000000L, 0x4400000000L, 0x2200000L, 0x1100L},
	        new long[] {0x8000400000000L, 0x8000000200000L, 0x8000000000100L, 0x804000000000L, 0x800002000000L, 0x800000001000L, 0x4000200000L, 0x4000000100L, 0x402000000L, 0x400001000L, 0x2000100L, 0x201000L},
	        new long[] {0x8400000000000L, 0x4200000000L, 0x2100000L, 0x1080L},
	        new long[] {0x8000200000000L, 0x8000000100000L, 0x8000000000080L, 0x404000000000L, 0x400002000000L, 0x400000001000L, 0x4000100000L, 0x4000000080L, 0x202000000L, 0x200001000L, 0x2000080L, 0x101000L},
	        new long[] {0x8200000000000L, 0x4100000000L, 0x2080000L, 0x1040L},
	        new long[] {0x8000100000000L, 0x8000000080000L, 0x8000000000040L, 0x204000000000L, 0x200002000000L, 0x200000001000L, 0x4000080000L, 0x4000000040L, 0x102000000L, 0x100001000L, 0x2000040L, 0x81000L},
	        new long[] {0x8100000000000L, 0x4080000000L, 0x2040000L, 0x1020L},
	        new long[] {0x8000080000000L, 0x8000000040000L, 0x8000000000020L, 0x104000000000L, 0x100002000000L, 0x100000001000L, 0x4000040000L, 0x4000000020L, 0x82000000L, 0x80001000L, 0x2000020L, 0x41000L},
	        new long[] {0x8080000000000L, 0x4040000000L, 0x2020000L, 0x1010L},
	        new long[] {0x8000040000000L, 0x8000000020000L, 0x8000000000010L, 0x84000000000L, 0x80002000000L, 0x80000001000L, 0x4000020000L, 0x4000000010L, 0x42000000L, 0x40001000L, 0x2000010L, 0x21000L},
	        new long[] {0x8040000000000L, 0x4020000000L, 0x2010000L, 0x1008L},
	        new long[] {0x8000020000000L, 0x8000000010000L, 0x8000000000008L, 0x44000000000L, 0x40002000000L, 0x40000001000L, 0x4000010000L, 0x4000000008L, 0x22000000L, 0x20001000L, 0x2000008L, 0x11000L},
	        new long[] {0x8020000000000L, 0x4010000000L, 0x2008000L, 0x1004L},
	        new long[] {0x8000010000000L, 0x8000000008000L, 0x8000000000004L, 0x24000000000L, 0x20002000000L, 0x20000001000L, 0x4000008000L, 0x4000000004L, 0x12000000L, 0x10001000L, 0x2000004L, 0x9000L},
	        new long[] {0x8010000000000L, 0x4008000000L, 0x2004000L, 0x1002L},
	        new long[] {0x8000008000000L, 0x8000000004000L, 0x8000000000002L, 0x14000000000L, 0x10002000000L, 0x10000001000L, 0x4000004000L, 0x4000000002L, 0xA000000L, 0x8001000L, 0x2000002L, 0x5000L},
	        new long[] {0x8008000000000L, 0x4004000000L, 0x2002000L, 0x1001L},
	        new long[] {0x8000004000000L, 0x8000000002000L, 0x8000000000001L, 0xC000000000L, 0x8002000000L, 0x8000001000L, 0x4000002000L, 0x4000000001L, 0x6000000L, 0x4001000L, 0x2000001L, 0x3000L},
	        new long[] {0x6000000000000L, 0x3000000000L, 0x1800000L, 0xC00L},
	        new long[] {0x4001000000000L, 0x4000000800000L, 0x4000000000400L, 0x2002000000000L, 0x2000001000000L, 0x2000000000800L, 0x2000800000L, 0x2000000400L, 0x1001000000L, 0x1000000800L, 0x1000400L, 0x800800L},
	        new long[] {0x5000000000000L, 0x2800000000L, 0x1400000L, 0xA00L},
	        new long[] {0x4000800000000L, 0x4000000400000L, 0x4000000000200L, 0x1002000000000L, 0x1000001000000L, 0x1000000000800L, 0x2000400000L, 0x2000000200L, 0x801000000L, 0x800000800L, 0x1000200L, 0x400800L},
	        new long[] {0x4800000000000L, 0x2400000000L, 0x1200000L, 0x900L},
	        new long[] {0x4000400000000L, 0x4000000200000L, 0x4000000000100L, 0x802000000000L, 0x800001000000L, 0x800000000800L, 0x2000200000L, 0x2000000100L, 0x401000000L, 0x400000800L, 0x1000100L, 0x200800L},
	        new long[] {0x4400000000000L, 0x2200000000L, 0x1100000L, 0x880L},
	        new long[] {0x4000200000000L, 0x4000000100000L, 0x4000000000080L, 0x402000000000L, 0x400001000000L, 0x400000000800L, 0x2000100000L, 0x2000000080L, 0x201000000L, 0x200000800L, 0x1000080L, 0x100800L},
	        new long[] {0x4200000000000L, 0x2100000000L, 0x1080000L, 0x840L},
	        new long[] {0x4000100000000L, 0x4000000080000L, 0x4000000000040L, 0x202000000000L, 0x200001000000L, 0x200000000800L, 0x2000080000L, 0x2000000040L, 0x101000000L, 0x100000800L, 0x1000040L, 0x80800L},
	        new long[] {0x4100000000000L, 0x2080000000L, 0x1040000L, 0x820L},
	        new long[] {0x4000080000000L, 0x4000000040000L, 0x4000000000020L, 0x102000000000L, 0x100001000000L, 0x100000000800L, 0x2000040000L, 0x2000000020L, 0x81000000L, 0x80000800L, 0x1000020L, 0x40800L},
	        new long[] {0x4080000000000L, 0x2040000000L, 0x1020000L, 0x810L},
	        new long[] {0x4000040000000L, 0x4000000020000L, 0x4000000000010L, 0x82000000000L, 0x80001000000L, 0x80000000800L, 0x2000020000L, 0x2000000010L, 0x41000000L, 0x40000800L, 0x1000010L, 0x20800L},
	        new long[] {0x4040000000000L, 0x2020000000L, 0x1010000L, 0x808L},
	        new long[] {0x4000020000000L, 0x4000000010000L, 0x4000000000008L, 0x42000000000L, 0x40001000000L, 0x40000000800L, 0x2000010000L, 0x2000000008L, 0x21000000L, 0x20000800L, 0x1000008L, 0x10800L},
	        new long[] {0x4020000000000L, 0x2010000000L, 0x1008000L, 0x804L},
	        new long[] {0x4000010000000L, 0x4000000008000L, 0x4000000000004L, 0x22000000000L, 0x20001000000L, 0x20000000800L, 0x2000008000L, 0x2000000004L, 0x11000000L, 0x10000800L, 0x1000004L, 0x8800L},
	        new long[] {0x4010000000000L, 0x2008000000L, 0x1004000L, 0x802L},
	        new long[] {0x4000008000000L, 0x4000000004000L, 0x4000000000002L, 0x12000000000L, 0x10001000000L, 0x10000000800L, 0x2000004000L, 0x2000000002L, 0x9000000L, 0x8000800L, 0x1000002L, 0x4800L},
	        new long[] {0x4008000000000L, 0x2004000000L, 0x1002000L, 0x801L},
	        new long[] {0x4000004000000L, 0x4000000002000L, 0x4000000000001L, 0xA000000000L, 0x8001000000L, 0x8000000800L, 0x2000002000L, 0x2000000001L, 0x5000000L, 0x4000800L, 0x1000001L, 0x2800L},
	        new long[] {0x3000000000000L, 0x1800000000L, 0xC00000L, 0x600L},
	        new long[] {0x2000800000000L, 0x2000000400000L, 0x2000000000200L, 0x1001000000000L, 0x1000000800000L, 0x1000000000400L, 0x1000400000L, 0x1000000200L, 0x800800000L, 0x800000400L, 0x800200L, 0x400400L},
	        new long[] {0x2800000000000L, 0x1400000000L, 0xA00000L, 0x500L},
	        new long[] {0x2000400000000L, 0x2000000200000L, 0x2000000000100L, 0x801000000000L, 0x800000800000L, 0x800000000400L, 0x1000200000L, 0x1000000100L, 0x400800000L, 0x400000400L, 0x800100L, 0x200400L},
	        new long[] {0x2400000000000L, 0x1200000000L, 0x900000L, 0x480L},
	        new long[] {0x2000200000000L, 0x2000000100000L, 0x2000000000080L, 0x401000000000L, 0x400000800000L, 0x400000000400L, 0x1000100000L, 0x1000000080L, 0x200800000L, 0x200000400L, 0x800080L, 0x100400L},
	        new long[] {0x2200000000000L, 0x1100000000L, 0x880000L, 0x440L},
	        new long[] {0x2000100000000L, 0x2000000080000L, 0x2000000000040L, 0x201000000000L, 0x200000800000L, 0x200000000400L, 0x1000080000L, 0x1000000040L, 0x100800000L, 0x100000400L, 0x800040L, 0x80400L},
	        new long[] {0x2100000000000L, 0x1080000000L, 0x840000L, 0x420L},
	        new long[] {0x2000080000000L, 0x2000000040000L, 0x2000000000020L, 0x101000000000L, 0x100000800000L, 0x100000000400L, 0x1000040000L, 0x1000000020L, 0x80800000L, 0x80000400L, 0x800020L, 0x40400L},
	        new long[] {0x2080000000000L, 0x1040000000L, 0x820000L, 0x410L},
	        new long[] {0x2000040000000L, 0x2000000020000L, 0x2000000000010L, 0x81000000000L, 0x80000800000L, 0x80000000400L, 0x1000020000L, 0x1000000010L, 0x40800000L, 0x40000400L, 0x800010L, 0x20400L},
	        new long[] {0x2040000000000L, 0x1020000000L, 0x810000L, 0x408L},
	        new long[] {0x2000020000000L, 0x2000000010000L, 0x2000000000008L, 0x41000000000L, 0x40000800000L, 0x40000000400L, 0x1000010000L, 0x1000000008L, 0x20800000L, 0x20000400L, 0x800008L, 0x10400L},
	        new long[] {0x2020000000000L, 0x1010000000L, 0x808000L, 0x404L},
	        new long[] {0x2000010000000L, 0x2000000008000L, 0x2000000000004L, 0x21000000000L, 0x20000800000L, 0x20000000400L, 0x1000008000L, 0x1000000004L, 0x10800000L, 0x10000400L, 0x800004L, 0x8400L},
	        new long[] {0x2010000000000L, 0x1008000000L, 0x804000L, 0x402L},
	        new long[] {0x2000008000000L, 0x2000000004000L, 0x2000000000002L, 0x11000000000L, 0x10000800000L, 0x10000000400L, 0x1000004000L, 0x1000000002L, 0x8800000L, 0x8000400L, 0x800002L, 0x4400L},
	        new long[] {0x2008000000000L, 0x1004000000L, 0x802000L, 0x401L},
	        new long[] {0x2000004000000L, 0x2000000002000L, 0x2000000000001L, 0x9000000000L, 0x8000800000L, 0x8000000400L, 0x1000002000L, 0x1000000001L, 0x4800000L, 0x4000400L, 0x800001L, 0x2400L},
	        new long[] {0x1800000000000L, 0xC00000000L, 0x600000L, 0x300L},
	        new long[] {0x1000400000000L, 0x1000000200000L, 0x1000000000100L, 0x800800000000L, 0x800000400000L, 0x800000000200L, 0x800200000L, 0x800000100L, 0x400400000L, 0x400000200L, 0x400100L, 0x200200L},
	        new long[] {0x1400000000000L, 0xA00000000L, 0x500000L, 0x280L},
	        new long[] {0x1000200000000L, 0x1000000100000L, 0x1000000000080L, 0x400800000000L, 0x400000400000L, 0x400000000200L, 0x800100000L, 0x800000080L, 0x200400000L, 0x200000200L, 0x400080L, 0x100200L},
	        new long[] {0x1200000000000L, 0x900000000L, 0x480000L, 0x240L},
	        new long[] {0x1000100000000L, 0x1000000080000L, 0x1000000000040L, 0x200800000000L, 0x200000400000L, 0x200000000200L, 0x800080000L, 0x800000040L, 0x100400000L, 0x100000200L, 0x400040L, 0x80200L},
	        new long[] {0x1100000000000L, 0x880000000L, 0x440000L, 0x220L},
	        new long[] {0x1000080000000L, 0x1000000040000L, 0x1000000000020L, 0x100800000000L, 0x100000400000L, 0x100000000200L, 0x800040000L, 0x800000020L, 0x80400000L, 0x80000200L, 0x400020L, 0x40200L},
	        new long[] {0x1080000000000L, 0x840000000L, 0x420000L, 0x210L},
	        new long[] {0x1000040000000L, 0x1000000020000L, 0x1000000000010L, 0x80800000000L, 0x80000400000L, 0x80000000200L, 0x800020000L, 0x800000010L, 0x40400000L, 0x40000200L, 0x400010L, 0x20200L},
	        new long[] {0x1040000000000L, 0x820000000L, 0x410000L, 0x208L},
	        new long[] {0x1000020000000L, 0x1000000010000L, 0x1000000000008L, 0x40800000000L, 0x40000400000L, 0x40000000200L, 0x800010000L, 0x800000008L, 0x20400000L, 0x20000200L, 0x400008L, 0x10200L},
	        new long[] {0x1020000000000L, 0x810000000L, 0x408000L, 0x204L},
	        new long[] {0x1000010000000L, 0x1000000008000L, 0x1000000000004L, 0x20800000000L, 0x20000400000L, 0x20000000200L, 0x800008000L, 0x800000004L, 0x10400000L, 0x10000200L, 0x400004L, 0x8200L},
	        new long[] {0x1010000000000L, 0x808000000L, 0x404000L, 0x202L},
	        new long[] {0x1000008000000L, 0x1000000004000L, 0x1000000000002L, 0x10800000000L, 0x10000400000L, 0x10000000200L, 0x800004000L, 0x800000002L, 0x8400000L, 0x8000200L, 0x400002L, 0x4200L},
	        new long[] {0x1008000000000L, 0x804000000L, 0x402000L, 0x201L},
	        new long[] {0x1000004000000L, 0x1000000002000L, 0x1000000000001L, 0x8800000000L, 0x8000400000L, 0x8000000200L, 0x800002000L, 0x800000001L, 0x4400000L, 0x4000200L, 0x400001L, 0x2200L},
	        new long[] {0xC00000000000L, 0x600000000L, 0x300000L, 0x180L},
	        new long[] {0x800200000000L, 0x800000100000L, 0x800000000080L, 0x400400000000L, 0x400000200000L, 0x400000000100L, 0x400100000L, 0x400000080L, 0x200200000L, 0x200000100L, 0x200080L, 0x100100L},
	        new long[] {0xA00000000000L, 0x500000000L, 0x280000L, 0x140L},
	        new long[] {0x800100000000L, 0x800000080000L, 0x800000000040L, 0x200400000000L, 0x200000200000L, 0x200000000100L, 0x400080000L, 0x400000040L, 0x100200000L, 0x100000100L, 0x200040L, 0x80100L},
	        new long[] {0x900000000000L, 0x480000000L, 0x240000L, 0x120L},
	        new long[] {0x800080000000L, 0x800000040000L, 0x800000000020L, 0x100400000000L, 0x100000200000L, 0x100000000100L, 0x400040000L, 0x400000020L, 0x80200000L, 0x80000100L, 0x200020L, 0x40100L},
	        new long[] {0x880000000000L, 0x440000000L, 0x220000L, 0x110L},
	        new long[] {0x800040000000L, 0x800000020000L, 0x800000000010L, 0x80400000000L, 0x80000200000L, 0x80000000100L, 0x400020000L, 0x400000010L, 0x40200000L, 0x40000100L, 0x200010L, 0x20100L},
	        new long[] {0x840000000000L, 0x420000000L, 0x210000L, 0x108L},
	        new long[] {0x800020000000L, 0x800000010000L, 0x800000000008L, 0x40400000000L, 0x40000200000L, 0x40000000100L, 0x400010000L, 0x400000008L, 0x20200000L, 0x20000100L, 0x200008L, 0x10100L},
	        new long[] {0x820000000000L, 0x410000000L, 0x208000L, 0x104L},
	        new long[] {0x800010000000L, 0x800000008000L, 0x800000000004L, 0x20400000000L, 0x20000200000L, 0x20000000100L, 0x400008000L, 0x400000004L, 0x10200000L, 0x10000100L, 0x200004L, 0x8100L},
	        new long[] {0x810000000000L, 0x408000000L, 0x204000L, 0x102L},
	        new long[] {0x800008000000L, 0x800000004000L, 0x800000000002L, 0x10400000000L, 0x10000200000L, 0x10000000100L, 0x400004000L, 0x400000002L, 0x8200000L, 0x8000100L, 0x200002L, 0x4100L},
	        new long[] {0x808000000000L, 0x404000000L, 0x202000L, 0x101L},
	        new long[] {0x800004000000L, 0x800000002000L, 0x800000000001L, 0x8400000000L, 0x8000200000L, 0x8000000100L, 0x400002000L, 0x400000001L, 0x4200000L, 0x4000100L, 0x200001L, 0x2100L},
	        new long[] {0x600000000000L, 0x300000000L, 0x180000L, 0xC0L},
	        new long[] {0x400100000000L, 0x400000080000L, 0x400000000040L, 0x200200000000L, 0x200000100000L, 0x200000000080L, 0x200080000L, 0x200000040L, 0x100100000L, 0x100000080L, 0x100040L, 0x80080L},
	        new long[] {0x500000000000L, 0x280000000L, 0x140000L, 0xA0L},
	        new long[] {0x400080000000L, 0x400000040000L, 0x400000000020L, 0x100200000000L, 0x100000100000L, 0x100000000080L, 0x200040000L, 0x200000020L, 0x80100000L, 0x80000080L, 0x100020L, 0x40080L},
	        new long[] {0x480000000000L, 0x240000000L, 0x120000L, 0x90L},
	        new long[] {0x400040000000L, 0x400000020000L, 0x400000000010L, 0x80200000000L, 0x80000100000L, 0x80000000080L, 0x200020000L, 0x200000010L, 0x40100000L, 0x40000080L, 0x100010L, 0x20080L},
	        new long[] {0x440000000000L, 0x220000000L, 0x110000L, 0x88L},
	        new long[] {0x400020000000L, 0x400000010000L, 0x400000000008L, 0x40200000000L, 0x40000100000L, 0x40000000080L, 0x200010000L, 0x200000008L, 0x20100000L, 0x20000080L, 0x100008L, 0x10080L},
	        new long[] {0x420000000000L, 0x210000000L, 0x108000L, 0x84L},
	        new long[] {0x400010000000L, 0x400000008000L, 0x400000000004L, 0x20200000000L, 0x20000100000L, 0x20000000080L, 0x200008000L, 0x200000004L, 0x10100000L, 0x10000080L, 0x100004L, 0x8080L},
	        new long[] {0x410000000000L, 0x208000000L, 0x104000L, 0x82L},
	        new long[] {0x400008000000L, 0x400000004000L, 0x400000000002L, 0x10200000000L, 0x10000100000L, 0x10000000080L, 0x200004000L, 0x200000002L, 0x8100000L, 0x8000080L, 0x100002L, 0x4080L},
	        new long[] {0x408000000000L, 0x204000000L, 0x102000L, 0x81L},
	        new long[] {0x400004000000L, 0x400000002000L, 0x400000000001L, 0x8200000000L, 0x8000100000L, 0x8000000080L, 0x200002000L, 0x200000001L, 0x4100000L, 0x4000080L, 0x100001L, 0x2080L},
	        new long[] {0x300000000000L, 0x180000000L, 0xC0000L, 0x60L},
	        new long[] {0x200080000000L, 0x200000040000L, 0x200000000020L, 0x100100000000L, 0x100000080000L, 0x100000000040L, 0x100040000L, 0x100000020L, 0x80080000L, 0x80000040L, 0x80020L, 0x40040L},
	        new long[] {0x280000000000L, 0x140000000L, 0xA0000L, 0x50L},
	        new long[] {0x200040000000L, 0x200000020000L, 0x200000000010L, 0x80100000000L, 0x80000080000L, 0x80000000040L, 0x100020000L, 0x100000010L, 0x40080000L, 0x40000040L, 0x80010L, 0x20040L},
	        new long[] {0x240000000000L, 0x120000000L, 0x90000L, 0x48L},
	        new long[] {0x200020000000L, 0x200000010000L, 0x200000000008L, 0x40100000000L, 0x40000080000L, 0x40000000040L, 0x100010000L, 0x100000008L, 0x20080000L, 0x20000040L, 0x80008L, 0x10040L},
	        new long[] {0x220000000000L, 0x110000000L, 0x88000L, 0x44L},
	        new long[] {0x200010000000L, 0x200000008000L, 0x200000000004L, 0x20100000000L, 0x20000080000L, 0x20000000040L, 0x100008000L, 0x100000004L, 0x10080000L, 0x10000040L, 0x80004L, 0x8040L},
	        new long[] {0x210000000000L, 0x108000000L, 0x84000L, 0x42L},
	        new long[] {0x200008000000L, 0x200000004000L, 0x200000000002L, 0x10100000000L, 0x10000080000L, 0x10000000040L, 0x100004000L, 0x100000002L, 0x8080000L, 0x8000040L, 0x80002L, 0x4040L},
	        new long[] {0x208000000000L, 0x104000000L, 0x82000L, 0x41L},
	        new long[] {0x200004000000L, 0x200000002000L, 0x200000000001L, 0x8100000000L, 0x8000080000L, 0x8000000040L, 0x100002000L, 0x100000001L, 0x4080000L, 0x4000040L, 0x80001L, 0x2040L},
	        new long[] {0x180000000000L, 0xC0000000L, 0x60000L, 0x30L},
	        new long[] {0x100040000000L, 0x100000020000L, 0x100000000010L, 0x80080000000L, 0x80000040000L, 0x80000000020L, 0x80020000L, 0x80000010L, 0x40040000L, 0x40000020L, 0x40010L, 0x20020L},
	        new long[] {0x140000000000L, 0xA0000000L, 0x50000L, 0x28L},
	        new long[] {0x100020000000L, 0x100000010000L, 0x100000000008L, 0x40080000000L, 0x40000040000L, 0x40000000020L, 0x80010000L, 0x80000008L, 0x20040000L, 0x20000020L, 0x40008L, 0x10020L},
	        new long[] {0x120000000000L, 0x90000000L, 0x48000L, 0x24L},
	        new long[] {0x100010000000L, 0x100000008000L, 0x100000000004L, 0x20080000000L, 0x20000040000L, 0x20000000020L, 0x80008000L, 0x80000004L, 0x10040000L, 0x10000020L, 0x40004L, 0x8020L},
	        new long[] {0x110000000000L, 0x88000000L, 0x44000L, 0x22L},
	        new long[] {0x100008000000L, 0x100000004000L, 0x100000000002L, 0x10080000000L, 0x10000040000L, 0x10000000020L, 0x80004000L, 0x80000002L, 0x8040000L, 0x8000020L, 0x40002L, 0x4020L},
	        new long[] {0x108000000000L, 0x84000000L, 0x42000L, 0x21L},
	        new long[] {0x100004000000L, 0x100000002000L, 0x100000000001L, 0x8080000000L, 0x8000040000L, 0x8000000020L, 0x80002000L, 0x80000001L, 0x4040000L, 0x4000020L, 0x40001L, 0x2020L},
	        new long[] {0xC0000000000L, 0x60000000L, 0x30000L, 0x18L},
	        new long[] {0x80020000000L, 0x80000010000L, 0x80000000008L, 0x40040000000L, 0x40000020000L, 0x40000000010L, 0x40010000L, 0x40000008L, 0x20020000L, 0x20000010L, 0x20008L, 0x10010L},
	        new long[] {0xA0000000000L, 0x50000000L, 0x28000L, 0x14L},
	        new long[] {0x80010000000L, 0x80000008000L, 0x80000000004L, 0x20040000000L, 0x20000020000L, 0x20000000010L, 0x40008000L, 0x40000004L, 0x10020000L, 0x10000010L, 0x20004L, 0x8010L},
	        new long[] {0x90000000000L, 0x48000000L, 0x24000L, 0x12L},
	        new long[] {0x80008000000L, 0x80000004000L, 0x80000000002L, 0x10040000000L, 0x10000020000L, 0x10000000010L, 0x40004000L, 0x40000002L, 0x8020000L, 0x8000010L, 0x20002L, 0x4010L},
	        new long[] {0x88000000000L, 0x44000000L, 0x22000L, 0x11L},
	        new long[] {0x80004000000L, 0x80000002000L, 0x80000000001L, 0x8040000000L, 0x8000020000L, 0x8000000010L, 0x40002000L, 0x40000001L, 0x4020000L, 0x4000010L, 0x20001L, 0x2010L},
	        new long[] {0x60000000000L, 0x30000000L, 0x18000L, 0xCL},
	        new long[] {0x40010000000L, 0x40000008000L, 0x40000000004L, 0x20020000000L, 0x20000010000L, 0x20000000008L, 0x20008000L, 0x20000004L, 0x10010000L, 0x10000008L, 0x10004L, 0x8008L},
	        new long[] {0x50000000000L, 0x28000000L, 0x14000L, 0xAL},
	        new long[] {0x40008000000L, 0x40000004000L, 0x40000000002L, 0x10020000000L, 0x10000010000L, 0x10000000008L, 0x20004000L, 0x20000002L, 0x8010000L, 0x8000008L, 0x10002L, 0x4008L},
	        new long[] {0x48000000000L, 0x24000000L, 0x12000L, 0x9L},
	        new long[] {0x40004000000L, 0x40000002000L, 0x40000000001L, 0x8020000000L, 0x8000010000L, 0x8000000008L, 0x20002000L, 0x20000001L, 0x4010000L, 0x4000008L, 0x10001L, 0x2008L},
	        new long[] {0x30000000000L, 0x18000000L, 0xC000L, 0x6L},
	        new long[] {0x20008000000L, 0x20000004000L, 0x20000000002L, 0x10010000000L, 0x10000008000L, 0x10000000004L, 0x10004000L, 0x10000002L, 0x8008000L, 0x8000004L, 0x8002L, 0x4004L},
	        new long[] {0x28000000000L, 0x14000000L, 0xA000L, 0x5L},
	        new long[] {0x20004000000L, 0x20000002000L, 0x20000000001L, 0x8010000000L, 0x8000008000L, 0x8000000004L, 0x10002000L, 0x10000001L, 0x4008000L, 0x4000004L, 0x8001L, 0x2004L},
	        new long[] {0x18000000000L, 0xC000000L, 0x6000L, 0x3L},
	        new long[] {0x10004000000L, 0x10000002000L, 0x10000000001L, 0x8008000000L, 0x8000004000L, 0x8000000002L, 0x8002000L, 0x8000001L, 0x4004000L, 0x4000002L, 0x4001L, 0x2002}
		};
	}

	public enum PocketHand169Enum {
		PocketAA("Pocket Rockets"),
		PocketKK("Cowboys"),
		PocketQQ("Ladies"),
		PocketJJ("Fish hooks"),
		PocketTT("Rin Tin Tin"),
		Pocket99("Gretzky"),
		Pocket88("Snowmen"),
		Pocket77("Hockey Sticks"),
		Pocket66("Route 66"),
		Pocket55("Speed Limit"),
		Pocket44("Sailboats"),
		Pocket33("Crabs"),
		Pocket22("Ducks"),
		PocketAKs("Big Slick, suited"),
		PocketAKo("Big Slick, offsuit"),
		PocketAQs("Little Slick"),
		PocketAQo("Little Slick"),
		PocketAJs("Blackjack, suited"),
		PocketAJo("Blackjack, offsuit"),
		PocketATs("A-Team, suited"),
		PocketATo("A-Team, offsuit"),
		PocketA9s("Ace/Nine suited"),
		PocketA9o("Ace/Nine offsuit"),
		PocketA8s("Dead Man's Hand, suited"),
		PocketA8o("Dead Man's Hand, offsuit"),
		PocketA7s("Ace/seven suited"),
		PocketA7o("Ace/seven offsuit"),
		PocketA6s("Ace/Six suited"),
		PocketA6o("Ace/Six offsuit"),
		PocketA5s("Ace/Five suited"),
		PocketA5o("Ace/Five offsuit"),
		PocketA4s("Ace/Four suited"),
		PocketA4o("Ace/Four offsuit"),
		PocketA3s("Friday The 13th, suited"),
		PocketA3o("Friday The 13th, offsuit"),
		PocketA2s("Drinking Age, suited"),
		PocketA2o("Drinking Age, offsuit"),
		PocketKQs("Royal Marriage"),
		PocketKQo("Mixed Marriage"),
		PocketKJs("Kojak"),
		PocketKJo("Bachelor Hand"),
		PocketKTs("King/Ten suited"),
		PocketKTo("King/Ten offsuit"),
		PocketK9s("Canine, suited"),
		PocketK9o("Canine, offsuit"),
		PocketK8s("King/Eight suited"),
		PocketK8o("King/Eight offsuit"),
		PocketK7s("King Salmon, suited"),
		PocketK7o("King Salmon, offsuit"),
		PocketK6s("King/Six suited"),
		PocketK6o("King/Six offsuit"),
		PocketK5s("King/Five suited"),
		PocketK5o("King/Five offsuit"),
		PocketK4s("King/Four suited"),
		PocketK4o("King/Four offsuit"),
		PocketK3s("King Crab, suited"),
		PocketK3o("King Crab, offsuit"),
		PocketK2s("King/Two suited"),
		PocketK2o("King/Two offsuit"),
		PocketQJs("Maverick, suited"),
		PocketQJo("Maverick, offsuit"),
		PocketQTs("Q-Tip, suited"),
		PocketQTo("Q-Tip, offsuit"),
		PocketQ9s("Queen/Nine suited"),
		PocketQ9o("Queen/Nine offsuit"),
		PocketQ8s("Queen/Eight suited"),
		PocketQ8o("Queen/Eight offsuit"),
		PocketQ7s("Computer Hand, suited"),
		PocketQ7o("Computer Hand, offsuit"),
		PocketQ6s("Queen/Six suited"),
		PocketQ6o("Queen/Six offsuit"),
		PocketQ5s("Queen/Five suited"),
		PocketQ5o("Queen/Five offsuit"),
		PocketQ4s("Queen/Four suited"),
		PocketQ4o("Queen/Four offsuit"),
		PocketQ3s("Posh Gay Waiter"),
		PocketQ3o("San Francisco Busboy"),
		PocketQ2s("Queen/Two suited"),
		PocketQ2o("Queen/Two offsuit"),
		PocketJTs("Cloutier, suited"),
		PocketJTo("Cloutier, offsuit"),
		PocketJ9s("Jack/Nine suited"),
		PocketJ9o("Jack/Nine offsuit"),
		PocketJ8s("Jack/Eight suited"),
		PocketJ8o("Jack/Eight offsuit"),
		PocketJ7s("Jack Daniel's, suited"),
		PocketJ7o("Jack Daniel's, offsuit"),
		PocketJ6s("Railroad Hand, suited"),
		PocketJ6o("Railroad Hand, offsuit"),
		PocketJ5s("Jackson Five, suited"),
		PocketJ5o("Jackson Five, offsuit"),
		PocketJ4s("Flat Tire, suited"),
		PocketJ4o("Flat Tire, offsuit"),
		PocketJ3s("Jack/Three suited"),
		PocketJ3o("Jack/Three offsuit"),
		PocketJ2s("Jack/Two suited"),
		PocketJ2o("Jack/Two offsuit"),
		PocketT9s("Ten/Nine suited"),
		PocketT9o("Ten/Nine offsuit"),
		PocketT8s("Ten/Eigth suited"),
		PocketT8o("Ten/Eight offsuit"),
		PocketT7s("Ten/Seven suited"),
		PocketT7o("Ten/Seven offsuit"),
		PocketT6s("Ten/Six suited"),
		PocketT6o("Ten/Six offsuit"),
		PocketT5s("Five and Dime, suited"),
		PocketT5o("Five and Dime, offsuit"),
		PocketT4s("Good Buddy, suited"),
		PocketT4o("Good Buddy, offsuit"),
		PocketT3s("Ten/Three suited"),
		PocketT3o("Ten/Three offsuit"),
		PocketT2s("Texas Dolly, suited"),
		PocketT2o("Texas Dolly, offsuit"),
		Pocket98s("Oldsmobile, suited"),
		Pocket98o("Oldsmobile, offsuit"),
		Pocket97s("Nine/Seven suited"),
		Pocket97o("Nine/Seven offsuit"),
		Pocket96s("Prom Night"),
		Pocket96o("Big Lick"),
		Pocket95s("Full-Time Job, suited"),
		Pocket95o("Full-Time Job, offsuit"),
		Pocket94s("Gold Rush, suited"),
		Pocket94o("Gold Rush, offsuit"),
		Pocket93s("The Sik, suited"),
		Pocket93o("The Sik, offsuit"),
		Pocket92s("Montana Banana, suited"),
		Pocket92o("Montana Banana, offsuit"),
		Pocket87s("Eight/Seven Suited"),
		Pocket87o("Eight/Seven offsuit"),
		Pocket86s("Maxwell Smart, suited"),
		Pocket86o("Maxwell Smart, offsuit"),
		Pocket85s("Eight/Five suited"),
		Pocket85o("Eight/Five offsuit"),
		Pocket84s("Eight/Four suited"),
		Pocket84o("Eight/Four offsuit"),
		Pocket83s("Raquel Welch, suited"),
		Pocket83o("Raquel Welch, offsuit"),
		Pocket82s("Eight/Two suited"),
		Pocket82o("Eight/Two offsuit"),
		Pocket76s("Philadelphia, suited"),
		Pocket76o("Philadelphia, offsuit"),
		Pocket75s("Ketchup, suited"),
		Pocket75o("Ketchup, offsuit"),
		Pocket74s("Double Down, suited"),
		Pocket74o("Double Down, offsuit"),
		Pocket73s("Seven/Three suited"),
		Pocket73o("Seven/Three offsuit"),
		Pocket72s("Velvet Hammer"),
		Pocket72o("Beer Hand"),
		Pocket65s("Six/Five suited"),
		Pocket65o("Six/Five offsuit"),
		Pocket64s("Six/Four suited"),
		Pocket64o("Six/Four offsuit"),
		Pocket63s("Blocky, suited"),
		Pocket63o("Blocky, offsuit"),
		Pocket62s("Ainsworth, suited"),
		Pocket62o("Ainsworth, offsuit"),
		Pocket54s("Five/Four suited"),
		Pocket54o("Five/Four offsuit"),
		Pocket53s("Five/Three suited"),
		Pocket53o("Five/Three offsuit"),
		Pocket52s("Bomber, suited"),
		Pocket52o("Bomber, offsuit"),
		Pocket43s("Four/Three suited"),
		Pocket43o("Four/Three offsuit"),
		Pocket42s("Willie Mays, suited"),
		Pocket42o("Willie Mays, offsuit"),
		Pocket32s("Can of Corn, suited"),
		Pocket32o("Can of Corn, offsuit"),
		None(-1);  /* Not a PocketPairType */

		// ------------------- definition -------------------
		private int _val = -2;
		private String _name;
		private PocketHand169Enum() {}
		private PocketHand169Enum(int aVal) { _val = aVal; }
		private PocketHand169Enum(String aName) { _name = aName; }
		public int getValue() { return _val==-2?ordinal():_val; }
		public String getName() { return _name==null?"":_name; }
	}

	// quick lookup by mask to return enumerated type
	private static Map<Long, PocketHand169Enum> _pocketDictionary =
		new HashMap<Long, PocketHand169Enum>();

	/**
	 * This table is used by HandPlayerOpponentOdds and contains the odds of
	 * each type of hand occuring against a random player when the board is
	 * currently empty. This calculation normally takes about 5 minutes, so the
	 * values are precalculated to save time.
	 */
	private static final double[][] _preCalcPlayerOddsTable = initPreCalcPlayerOddsTable();

	private static double[][] initPreCalcPlayerOddsTable() {
		return new double[][] {
	         new double[] {0, 0.286740271754148, 0.337632177082422, 0.107630068931113, 0.00871248305898762, 0.0186005527151292, 0.0842236711352609, 0.00840620900618257, 9.16993377677929E-05},
	         new double[] {0, 0.27207410337779, 0.324989138873109, 0.10751232138638, 0.00934600684105111, 0.0180595349176028, 0.0835212896584642, 0.0083608155789998, 9.35872344620858E-05},
	         new double[] {0, 0.258379200641656, 0.313030451773679, 0.106138870820383, 0.0129346953649848, 0.0174970341905719, 0.0828132101661902, 0.00832256374082725, 0.000135613912540039},
	         new double[] {0, 0.244957911345515, 0.300932738245412, 0.104766138227219, 0.0165233838889184, 0.0169436487627316, 0.0821021100392053, 0.00829115791187947, 0.000177640590617992},
	         new double[] {0, 0.231824795177511, 0.28851389778012, 0.10339412360689, 0.0201120724128521, 0.0163993424017212, 0.0813879892775096, 0.0082659115842676, 0.000219667268695946},
	         new double[] {0, 0.217844636971768, 0.275105943899719, 0.103675534632321, 0.0189032492990468, 0.0159062342734868, 0.0806736110753555, 0.00824653871303799, 0.000216770586798339},
	         new double[] {0, 0.204018493950435, 0.261328674519173, 0.103557069114754, 0.0189032492990468, 0.0154180280022754, 0.0799561264250045, 0.00823194279253484, 0.000216770586798339},
	         new double[] {0, 0.190192350929103, 0.247219242587288, 0.103438603597187, 0.0189032492990468, 0.0149329429582502, 0.0792356211399425, 0.00822144684970111, 0.000216770586798339},
	         new double[] {0, 0.176338424361419, 0.232896092168261, 0.10332013807962, 0.0189032492990468, 0.0144463480736112, 0.0785120952201697, 0.00821436437664798, 0.000216770586798339},
	         new double[] {0, 0.162635821295131, 0.218553432053168, 0.102802513991889, 0.0190919245504947, 0.0139528294708683, 0.0777854628522, 0.00820999933065481, 0.000217221584341976},
	         new double[] {0, 0.148162103963611, 0.203711469029627, 0.10394046946842, 0.015503236026561, 0.0134690902683502, 0.0770585730437719, 0.00820807520159972, 0.000175194906264022},
	         new double[] {0, 0.133400213503953, 0.188900201490065, 0.105077706972117, 0.0119145475026273, 0.0129687585515523, 0.076328662600633, 0.00820750501865871, 0.000133168228186069},
	         new double[] {0, 0.118330046676816, 0.174113077574819, 0.10621422650298, 0.00834041866683601, 0.0124479441091044, 0.0755957315227832, 0.00820760227394296, 9.11434570744733E-05},
	         new double[] {0.0571760455086079, 0.280205634856752, 0.184453924450951, 0.0365310084171588, 0.0266728173482832, 0.0627649090920533, 0.0208664745016668, 0.00123686052505268, 0.000538648391826666},
	         new double[] {0.0623297388924454, 0.295079403218692, 0.189393299129985, 0.037229782390348, 0.0286287805846416, 0.018343179000639, 0.0208670251382026, 0.00123686624595175, 9.26432861149393E-05},
	         new double[] {0.0563138631114711, 0.273071728060495, 0.181336609406188, 0.0361693789449175, 0.0298615120507879, 0.0627519903484619, 0.020787031236681, 0.00123684908325453, 0.000559661730865643},
	         new double[] {0.0613800553439776, 0.287610629316061, 0.186203309597323, 0.0368551455005796, 0.0320692320322293, 0.0180619286371236, 0.0207875818732169, 0.0012368548041536, 0.000113656625153916},
	         new double[] {0.0555485498378983, 0.265836711524236, 0.178378615679726, 0.0358473867219077, 0.0330502067532925, 0.0627403220980596, 0.020707484995512, 0.00123683764145638, 0.000580675069904619},
	         new double[] {0.0605358651744274, 0.280022782050336, 0.183176929196818, 0.036522534335406, 0.035509683479817, 0.0177852359232034, 0.0207080356320478, 0.00123684336235545, 0.000134669964192893},
	         new double[] {0.0548500495143815, 0.258622320259363, 0.175555095976663, 0.0355624373203995, 0.0362389014557972, 0.0627287129636145, 0.0206278357781596, 0.00123682619965823, 0.000601688408943596},
	         new double[] {0.0597644305388458, 0.272450396944582, 0.180288551184217, 0.0362290483989969, 0.0389501349274047, 0.0175130827426982, 0.0206283864146954, 0.00123683192055731, 0.000155683303231869},
	         new double[] {0.0574857463799581, 0.254825609833539, 0.174627747533291, 0.0354514275645503, 0.0203041237098657, 0.0631969142042487, 0.0205495381232133, 0.0012368233392087, 0.000134208478334288},
	         new double[] {0.0626260385577156, 0.268517188727312, 0.17933947071386, 0.0361150332641677, 0.0219231388628111, 0.017266608771168, 0.0205495266814151, 0.0012368233392087, 0.000154234962283066},
	         new double[] {0.055426437247172, 0.248354728065644, 0.172370931511113, 0.0353384398078464, 0.0229088361860597, 0.0631777978199942, 0.0204698803245123, 0.00123682047875916, 0.000154234962283066},
	         new double[] {0.0603773891189644, 0.261706200939715, 0.177031322017776, 0.0359976308803453, 0.0247300665283353, 0.0170225056355623, 0.0204698803245123, 0.00123682047875916, 0.000154234962283066},
	         new double[] {0.0540477577794216, 0.242280815193793, 0.170399055593981, 0.0352441164843702, 0.0229088361860597, 0.0631777978199942, 0.0203901538750224, 0.00123681761830962, 0.000154234962283066},
	         new double[] {0.0588679728051342, 0.255339080548543, 0.175013417892036, 0.0359002468758647, 0.0247300665283353, 0.0167799631135497, 0.0203901538750224, 0.00123681761830962, 0.000154234962283066},
	         new double[] {0.053377082478774, 0.236664279621528, 0.168698908795711, 0.035164367151284, 0.0202753890640437, 0.0631969142042487, 0.0203103587747436, 0.00123681475786009, 0.000134165571591236},
	         new double[] {0.0581277599762468, 0.249478345538871, 0.173272169771113, 0.0358185276465308, 0.0218896573009828, 0.0165366656712302, 0.0203103473329455, 0.00123681475786009, 0.000154234962283066},
	         new double[] {0.0495020672468802, 0.229125260229397, 0.165634580718167, 0.0350797550539853, 0.0350912190206164, 0.0627287129636145, 0.0202292035307101, 0.00123681189741055, 0.000601645502200544},
	         new double[] {0.0539093120218401, 0.241543500000286, 0.17013673854595, 0.0357301101978649, 0.0377348243140499, 0.0162898262772718, 0.0202297541672459, 0.00123681761830962, 0.000154460461054884},
	         new double[] {0.0484983712600337, 0.22563169023391, 0.164477461659965, 0.0351392438230023, 0.0318824225089918, 0.0627403220980596, 0.0201493998490827, 0.00123681761830962, 0.000580630732936799},
	         new double[] {0.0528171351796963, 0.2378983233189, 0.168950961120579, 0.0357896456875577, 0.0342725333342487, 0.0160479566760127, 0.0201499504856185, 0.0012368233392087, 0.000133447122015908},
	         new double[] {0.0480691608070358, 0.222398602784819, 0.163345378686333, 0.0352099455542035, 0.0285622543946516, 0.0627519903484619, 0.020069493191272, 0.0012368233392087, 0.00055955684771596},
	         new double[] {0.0523535278210182, 0.23453412144439, 0.167790650277435, 0.0358607145097828, 0.0306899118237826, 0.0157977908176137, 0.0200700438278078, 0.00123682906010777, 0.000112433782976931},
	         new double[] {0.0476945134289524, 0.219158324165593, 0.162231942983231, 0.035283424781905, 0.0248923190922993, 0.0627649090920533, 0.0199894835572779, 0.00123682906010777, 0.000537232469305946},
	         new double[] {0.0519490960121329, 0.231165252746461, 0.166649352842362, 0.0359346380606457, 0.0267315731271064, 0.0155373835963898, 0.0199900341938138, 0.00123683478100684, 9.14213974211331E-05},
	         new double[] {0.0463257883255901, 0.252002054374857, 0.173669051423445, 0.0347785797524796, 0.0424756597197789, 0.0618434967965826, 0.0207056271335378, 0.00119692864951884, 0.0010068467720113},
	         new double[] {0.0505172550897409, 0.265106691907273, 0.178202746899225, 0.0354012233379882, 0.0455204745256946, 0.0177913396457734, 0.0207067284066095, 0.00119694009131699, 0.000114600573501062},
	         new double[] {0.0454199554685216, 0.244720638486662, 0.170730035349435, 0.0344562228221538, 0.0456643544222836, 0.06183133654886, 0.0206260808923687, 0.0011969172077207, 0.00102786011105028},
	         new double[] {0.049520231101439, 0.257467379433482, 0.175195653079722, 0.0350682903722417, 0.0489609259732823, 0.0175146469318532, 0.0206271821654404, 0.00119692864951884, 0.000135613912540039},
	         new double[] {0.044662873138491, 0.237657768094203, 0.167925486862813, 0.0341737262561235, 0.0488530491247883, 0.0618204673173617, 0.0205464316750163, 0.00119690576592255, 0.00104887345008926},
	         new double[] {0.0486851085569204, 0.250054959247175, 0.172326807646783, 0.034777327352324, 0.05240137742087, 0.017242493751348, 0.020547532948088, 0.0011969172077207, 0.000156627251579016},
	         new double[] {0.0473196229126585, 0.234490950109755, 0.167045325110113, 0.0340896833882826, 0.0324032789046995, 0.0622894642397087, 0.0204681340200701, 0.00119690290547301, 0.000581393519479947},
	         new double[] {0.0515702151687351, 0.246780948776786, 0.171425909303536, 0.034690563720232, 0.0348348290623961, 0.0169960197798179, 0.0204686732148077, 0.00119690862637209, 0.000155178910630212},
	         new double[] {0.0482008058458435, 0.229799316581397, 0.165812924025888, 0.0339996392973134, 0.0208593712903545, 0.0627296907606145, 0.020389699063546, 0.00119690004502348, 0.000135152426681434},
	         new double[] {0.0525199916818127, 0.241900469800232, 0.170165775207569, 0.0345985444888577, 0.0225231810830463, 0.0167519967367992, 0.0203896876217479, 0.00119690004502348, 0.000155178910630212},
	         new double[] {0.0461820936431086, 0.223813894576416, 0.163618899876829, 0.0339249100531643, 0.0234640837665484, 0.0627114787551552, 0.0203099382886617, 0.00119689718457394, 0.000155178910630212},
	         new double[] {0.0503143848574667, 0.235614019806897, 0.167922660261929, 0.0345208594468539, 0.0253301087485705, 0.0165094542147866, 0.0203099382886617, 0.00119689718457394, 0.000155178910630212},
	         new double[] {0.0448215994832884, 0.218273938959151, 0.161690117347082, 0.0338647547994053, 0.0234640837665484, 0.0627106787827681, 0.0202301088629885, 0.0011968943241244, 0.000155178910630212},
	         new double[] {0.0488249344814034, 0.229820854336184, 0.165949713821559, 0.0344588391799968, 0.0253301087485705, 0.0162661567724671, 0.0202301088629885, 0.0011968943241244, 0.000155178910630212},
	         new double[] {0.0437027561003377, 0.212843816022751, 0.159720843723916, 0.0338148099202678, 0.0236374842174697, 0.0627069940470231, 0.0201501764611319, 0.00119689146367487, 0.000155404409402031},
	         new double[] {0.0476003617324484, 0.224155905655509, 0.163935191462283, 0.0344076156799165, 0.0255187840000183, 0.0160193974710956, 0.0201501764611319, 0.00119689146367487, 0.000155404409402031},
	         new double[] {0.0426523489725551, 0.209250891173053, 0.158500574521289, 0.0338742986892848, 0.020448789514965, 0.0627178017788564, 0.0200703727795045, 0.00119689718457394, 0.000134391070363054},
	         new double[] {0.0464572688885495, 0.220406914679083, 0.162685864859778, 0.0344671511696092, 0.0220783325524306, 0.0157775278698366, 0.0200703727795045, 0.00119689718457394, 0.000134391070363054},
	         new double[] {0.0421295231573413, 0.205887041133836, 0.157298748782164, 0.0339450004204861, 0.0172600948124603, 0.0627286095106896, 0.0199904661216938, 0.00119690290547301, 0.000113377731324077},
	         new double[] {0.045891786619618, 0.216905482738045, 0.161455417224216, 0.0345382199918344, 0.0186378811048429, 0.0155273620114376, 0.0199904661216938, 0.00119690290547301, 0.000113377731324077},
	         new double[] {0.0415875537836024, 0.202387923296474, 0.156102155520353, 0.0340157021516874, 0.0140848013160356, 0.0627394167657812, 0.0199104564876998, 0.00119690862637209, 9.23653457682796E-05},
	         new double[] {0.0453054016156963, 0.213263612736323, 0.160230259990072, 0.0346092888140595, 0.0152119893453976, 0.0152669547902137, 0.0199104564876998, 0.00119690862637209, 9.23653457682796E-05},
	         new double[] {0.0367350371314954, 0.224383730449543, 0.163381827249443, 0.0330285805629403, 0.0609119492132906, 0.0609478056633468, 0.0205443421166297, 0.00116366448185531, 0.00149511454288777},
	         new double[] {0.040070950590311, 0.23579145206144, 0.167553169559249, 0.0335791274713569, 0.0652525776941001, 0.0172333164757507, 0.0205459940262372, 0.00116368164455253, 0.000156627251579016},
	         new double[] {0.0358573439467453, 0.217302590365892, 0.160588721991193, 0.0327453746054248, 0.0641006439157952, 0.0609364444345282, 0.0204646928992773, 0.00116365304005716, 0.00151612788192675},
	         new double[] {0.0391047908525112, 0.228357655735745, 0.164696050539185, 0.0332874808039999, 0.0686930291416878, 0.0169611632952455, 0.0204663448088848, 0.00116367020275438, 0.000177640590617992},
	         new double[] {0.0384869051480655, 0.214279256820885, 0.159683215225372, 0.0326573104222767, 0.0475316744728335, 0.0614061617134169, 0.020386395244331, 0.00116365017960763, 0.00104864795131744},
	         new double[] {0.0419606922745551, 0.225235224776985, 0.16376882104284, 0.0331964183929956, 0.0510011644890064, 0.0167146893237154, 0.0203874850756045, 0.00116366162140577, 0.000176192249669189},
	         new double[] {0.0394664803941928, 0.210109579531081, 0.158495276253635, 0.0325928387501666, 0.0355919736072042, 0.0618471667533383, 0.020307960287807, 0.00116364731915809, 0.000602406858518924},
	         new double[] {0.0430184722110188, 0.220900556757898, 0.162554356884177, 0.0331302433231864, 0.0382752805099838, 0.0164706662806967, 0.0203084994825447, 0.00116365304005716, 0.000176192249669189},
	         new double[] {0.0398099131167058, 0.205514361745034, 0.15728853769243, 0.0325306697399336, 0.0240480659928592, 0.0622818511532665, 0.0202294223550996, 0.00116364445870855, 0.000156165765720411},
	         new double[] {0.0433818637201748, 0.21612625766815, 0.161320363721414, 0.0330670903183127, 0.025963632530634, 0.0162282038512711, 0.0202294109133015, 0.00116364445870855, 0.000176192249669189},
	         new double[] {0.0379638791013841, 0.200131440516666, 0.15513436318098, 0.0324901085655017, 0.0266527784690531, 0.0622637020776971, 0.020149558604032, 0.00116364159825902, 0.000176192249669189},
	         new double[] {0.0413644673242268, 0.21048746493804, 0.159118962711371, 0.0330247690139325, 0.0287705601961582, 0.0159849064089516, 0.020149558604032, 0.00116364159825902, 0.000176192249669189},
	         new double[] {0.0369036177249472, 0.194724169711615, 0.153130219247736, 0.0324401636863643, 0.0268261789199743, 0.0622600769346507, 0.0200696262021754, 0.00116363873780948, 0.000176417748441007},
	         new double[] {0.0402035824842089, 0.20484706463529, 0.157069570042016, 0.0329735455138521, 0.028959235447606, 0.0157381471075802, 0.0200696262021754, 0.00116363873780948, 0.000176417748441007},
	         new double[] {0.0358467030744684, 0.191120801360659, 0.151869403172925, 0.0324996524553813, 0.0236374842174697, 0.0622701047172436, 0.019989822520548, 0.00116364445870855, 0.000155404409402031},
	         new double[] {0.0390532527029818, 0.201086877859377, 0.155779696567327, 0.0330330810035449, 0.0255187840000183, 0.0154962775063211, 0.019989822520548, 0.00116364445870855, 0.000155404409402031},
	         new double[] {0.0353173697365583, 0.187746507820183, 0.150621353999509, 0.0325703541865825, 0.020448789514965, 0.0622801324998365, 0.0199099158627373, 0.00116365017960763, 0.000134391070363054},
	         new double[] {0.0384805334967222, 0.197574250118852, 0.154503025497475, 0.03310414982577, 0.0220783325524306, 0.0152461116479221, 0.0199099158627373, 0.00116365017960763, 0.000134391070363054},
	         new double[] {0.0347688928401232, 0.184236946481561, 0.149372860741303, 0.0326410559177838, 0.0172734960185403, 0.0622901598056878, 0.0198299062287433, 0.0011636559005067, 0.000113378684807256},
	         new double[] {0.0378869115554724, 0.193921184317643, 0.153225968266936, 0.0331752186479952, 0.0186524407929853, 0.0149857044266982, 0.0198299062287433, 0.0011636559005067, 0.000113378684807256},
	         new double[] {0.0280928896661684, 0.198748847953949, 0.154065147167268, 0.0314300314496892, 0.0793482387068022, 0.0600907162966103, 0.0203828511473549, 0.00113646637417617, 0.00198338231376424},
	         new double[] {0.030656295820826, 0.208590982604462, 0.157924536001713, 0.0319159481694172, 0.0849846808625056, 0.0166843904887383, 0.0203850536934983, 0.00113648925777246, 0.000198653929656969},
	         new double[] {0.0306068171949631, 0.195292900736108, 0.153118814635433, 0.031325592146426, 0.0627637198601583, 0.0605599415781787, 0.0203045534924087, 0.00113646351372663, 0.00151590238315493},
	         new double[] {0.0333866092059564, 0.205008572767262, 0.156954791643902, 0.0318077983863632, 0.0672764000899325, 0.0164379165172082, 0.020306193960218, 0.00113648067642385, 0.000197205588708166},
	         new double[] {0.0315532684354542, 0.191281454933332, 0.151908748656304, 0.0312587126909183, 0.0507203691753381, 0.0610016474282366, 0.0202261185358846, 0.00113646065327709, 0.00106966129035641},
	         new double[] {0.0344087979990583, 0.2008398680303, 0.155717555446477, 0.0317390131563516, 0.0544416159365941, 0.0161938934741895, 0.0202272083671581, 0.00113647209507524, 0.000197205588708166},
	         new double[] {0.0319924117994688, 0.187160167868342, 0.150747898856793, 0.0312221160995444, 0.0387806683097089, 0.0614370903240336, 0.0201475806031773, 0.00113645779282756, 0.000623420197557901},
	         new double[] {0.0348774254466735, 0.196560338036484, 0.154530916310684, 0.031701704313043, 0.0417157319575715, 0.0159514310447639, 0.020148119797915, 0.00113646351372663, 0.000197205588708166},
	         new double[] {0.0320433206501001, 0.182796865319166, 0.149548553127415, 0.031185114754561, 0.0272367606953638, 0.0618658831513992, 0.0200689396942866, 0.00113645493237802, 0.000177179104759388},
	         new double[] {0.0349224632246305, 0.192036259630418, 0.153304609890939, 0.0316645113179407, 0.0294040839782217, 0.0157082136950315, 0.0200689282524884, 0.00113645493237802, 0.000197205588708166},
	         new double[] {0.0306152555210967, 0.177597580660386, 0.147317395337582, 0.0311547639547507, 0.030014873622479, 0.0618457699004812, 0.0199889729670356, 0.00113645207192848, 0.000197431087479984},
	         new double[] {0.0333618591663391, 0.186604898119369, 0.151025140777024, 0.0316329867803371, 0.0323996868951937, 0.01546145439366, 0.0199889729670356, 0.00113645207192848, 0.000197431087479984},
	         new double[] {0.0295719351570415, 0.173994186565384, 0.146020898015248, 0.0312142527237677, 0.0268261789199743, 0.0618550377569804, 0.0199091692854082, 0.00113645779282756, 0.000176417748441007},
	         new double[] {0.0322261319799974, 0.182844739947951, 0.149699586054813, 0.0316925222700299, 0.028959235447606, 0.015219584792401, 0.0199091692854082, 0.00113645779282756, 0.000176417748441007},
	         new double[] {0.0290561961055552, 0.170619867280862, 0.144732301969648, 0.031284954454969, 0.0236374842174697, 0.0618643056134797, 0.0198292626275975, 0.00113646351372663, 0.000155404409402031},
	         new double[] {0.0316680153686233, 0.179332140811921, 0.148382368112776, 0.031763591092255, 0.0255187840000183, 0.014969418934002, 0.0198292626275975, 0.00113646351372663, 0.000155404409402031},
	         new double[] {0.0285213134955437, 0.167110280198195, 0.143438396214596, 0.0313556561861703, 0.020462190721045, 0.0618735729932373, 0.0197492529936035, 0.0011364692346257, 0.000134392023846233},
	         new double[] {0.0310889960222589, 0.175679103615208, 0.147059898385391, 0.0318346599144802, 0.022092892240573, 0.0147090117127781, 0.0197492529936035, 0.0011364692346257, 0.000134392023846233},
	         new double[] {0.0237410017408696, 0.178033017596913, 0.147263559531962, 0.030154308142117, 0.0780113146511653, 0.0597515866436839, 0.020222608764303, 0.0011147326785955, 0.00198315681499242},
	         new double[] {0.0259152294337969, 0.186632688816844, 0.150890405975975, 0.0305868903500065, 0.0835680518107504, 0.0161656832441159, 0.0202247998686482, 0.0011147555621918, 0.000218218927747142},
	         new double[] {0.0245718193088353, 0.17374053691782, 0.146016035966148, 0.0300742806303134, 0.065952414562663, 0.0601928004964215, 0.0201441738077789, 0.00111472981814597, 0.0015369157221939},
	         new double[] {0.0268118301899853, 0.18216485543002, 0.149614364205021, 0.030504394985365, 0.0707168515375202, 0.0159216602010972, 0.0201458142755883, 0.00111474698084319, 0.000218218927747142},
	         new double[] {0.0249818575988128, 0.169728582670138, 0.144834249821365, 0.0300366592828929, 0.0539090638778428, 0.0606289246559499, 0.0200656358750716, 0.00111472695769643, 0.00109067462939539},
	         new double[] {0.0272493788533831, 0.177998729388316, 0.148406375388997, 0.0304659233693197, 0.0578820673841818, 0.0156791977716717, 0.0200667257063451, 0.00111473839949458, 0.000218218927747142},
	         new double[] {0.0251160341354606, 0.165808167813421, 0.14368333293287, 0.0300252303567686, 0.0419693630122135, 0.0610584759791843, 0.0199869949661809, 0.00111472409724689, 0.000644433536596877},
	         new double[] {0.0273860296788802, 0.173936593559297, 0.147230188335811, 0.0304545745357824, 0.0451561834051592, 0.0154359804219392, 0.0199875341609186, 0.00111472981814597, 0.000218218927747142},
	         new double[] {0.0251982005484054, 0.161294301212201, 0.142379219663645, 0.0299908220092904, 0.0305988558487898, 0.0614798001728093, 0.0199082510811069, 0.00111472123679736, 0.000198417942570183},
	         new double[] {0.0274667801693043, 0.169261923926917, 0.14589665224428, 0.0304202219670701, 0.0330332106772572, 0.0151893012131548, 0.0199082396393088, 0.00111472123679736, 0.000218444426518961},
	         new double[] {0.0238347458233146, 0.157916549388236, 0.140855708484723, 0.0300699048576345, 0.030014873622479, 0.0614725827818863, 0.0198284130740851, 0.00111472695769643, 0.000197431087479984},
	         new double[] {0.0259831865636676, 0.165729726420885, 0.144341021077508, 0.0304994564192397, 0.0323996868951937, 0.0149474316118957, 0.0198284130740851, 0.00111472695769643, 0.000197431087479984},
	         new double[] {0.0233527028673718, 0.154552622116881, 0.139532242129044, 0.0301406065888357, 0.0268261789199743, 0.0614811107354387, 0.0197485064162744, 0.0011147326785955, 0.000176417748441007},
	         new double[] {0.0254615120793923, 0.162228380293333, 0.142988932825394, 0.0305705252414648, 0.028959235447606, 0.0146972657534968, 0.0197485064162744, 0.0011147326785955, 0.000176417748441007},
	         new double[] {0.022851516352904, 0.151053427047381, 0.138199411376694, 0.030211308320037, 0.0236508854235496, 0.0614896382122496, 0.0196684967822803, 0.00111473839949458, 0.00015540536288521},
	         new double[] {0.0249189348601269, 0.158586596105097, 0.141627538100711, 0.03064159406369, 0.0255333436881607, 0.0144368585322728, 0.0196684967822803, 0.00111473839949458, 0.00015540536288521},
	         new double[] {0.0194458007742665, 0.159299809150807, 0.141398242082133, 0.0291764153170589, 0.0761043366131248, 0.0594424678738145, 0.0200623577999024, 0.0010978531658788, 0.00198027109815137},
	         new double[] {0.0212338105707341, 0.166773736153279, 0.144835725336584, 0.0295658605157085, 0.0815069734899258, 0.015675026044393, 0.0200645489042476, 0.0010978760494751, 0.000216770586798339},
	         new double[] {0.0197402053917185, 0.154949099730717, 0.140174160615386, 0.0291270174988954, 0.0646916535515055, 0.0598781000360226, 0.019983819867195, 0.00109785030542927, 0.0015354039746137},
	         new double[] {0.0215457711972183, 0.162248064476821, 0.14358417044389, 0.0295151661987925, 0.0693522297490184, 0.0154325636149675, 0.0199854603350044, 0.00109786746812649, 0.000216770586798339},
	         new double[] {0.0198602084009115, 0.151101909521693, 0.139004611473721, 0.0291157163395171, 0.0527998780876407, 0.0603083326229884, 0.0199051789583044, 0.00109784744497973, 0.00108922485822182},
	         new double[] {0.0216676907076008, 0.158261064075786, 0.142389137318931, 0.0295038607487398, 0.056681455190772, 0.015189346265235, 0.0199062687895779, 0.00109785888677788, 0.000216770586798339},
	         new double[] {0.0200032451799995, 0.147004435699097, 0.13775258055455, 0.0291068804108979, 0.0410536794820527, 0.0607304339054042, 0.0198264350732304, 0.00109784458453019, 0.000643210694419892},
	         new double[] {0.0218155330419107, 0.154020401870276, 0.141109567183474, 0.0294953523415926, 0.0441660859954107, 0.0149426670564506, 0.0198269742679681, 0.00109785030542927, 0.000216996085570157},
	         new double[] {0.0198044725416868, 0.144005095604805, 0.13713300217909, 0.0291756713618085, 0.026321077165203, 0.0611587628632032, 0.0197478199083855, 0.00109785030542927, 0.000175956262582402},
	         new double[] {0.0215968302214503, 0.150916376474061, 0.140475573095832, 0.0295652498097324, 0.0284139865684732, 0.0147008775477786, 0.0197478084665874, 0.00109785030542927, 0.000195982746531181},
	         new double[] {0.0190681499241695, 0.140894910230512, 0.13558414384171, 0.0292659671723369, 0.0257370949388922, 0.0611516074486869, 0.0196678789251804, 0.00109785602632834, 0.000174969407492204},
	         new double[] {0.0207991080546254, 0.147673108685068, 0.138895030274044, 0.0296560175944344, 0.0277804627864097, 0.0144507116893796, 0.0196678789251804, 0.00109785602632834, 0.000174969407492204},
	         new double[] {0.0186207613143651, 0.137414508314469, 0.134218875591612, 0.0293366689035382, 0.0225618014424675, 0.0611594150456976, 0.0195878692911863, 0.00109786174722741, 0.000153957021936406},
	         new double[] {0.0203148124946724, 0.144051702339333, 0.137501198051614, 0.0297270864166596, 0.0243545710269643, 0.0141903044681557, 0.0195878692911863, 0.00109786174722741, 0.000153957021936406},
	         new double[] {0.0150189762222272, 0.141771374852186, 0.135925600708705, 0.0284132764618756, 0.0761043366131248, 0.0591624565616901, 0.0199019008831352, 0.00108520902544294, 0.00198027109815137},
	         new double[] {0.0164071380801921, 0.148228832530405, 0.139201259036398, 0.0287694446208388, 0.0815069734899258, 0.0151883803867747, 0.0199040919874804, 0.00108523190903923, 0.000216770586798339},
	         new double[] {0.0149798881793067, 0.13761659478357, 0.134716210510779, 0.0283925038773393, 0.0646916535515055, 0.0595919716525637, 0.0198232599742445, 0.0010852061649934, 0.0015354039746137},
	         new double[] {0.0163561720205701, 0.143914917072707, 0.137965313616827, 0.0287483287823581, 0.0693522297490184, 0.0149451630370422, 0.0198249004420539, 0.00108522332769062, 0.000216770586798339},
	         new double[] {0.015118705795328, 0.133590298957023, 0.133448964860522, 0.0283847177337002, 0.052973278538562, 0.0600147913845548, 0.0197445160891705, 0.00108520330454386, 0.00108945035699364},
	         new double[] {0.0165001813525006, 0.139747336492414, 0.136670482267978, 0.0287408286836726, 0.0568701304422198, 0.0146984838282578, 0.019745605920444, 0.00108521474634201, 0.000216996085570157},
	         new double[] {0.0149821479344408, 0.130987395715161, 0.132886235774269, 0.0284790811034699, 0.037864984779548, 0.0604431203423539, 0.0196659009243257, 0.00108520902544294, 0.000622197355380916},
	         new double[] {0.0163495929866354, 0.137056402916057, 0.13609538197585, 0.0288365703133775, 0.040725634547823, 0.0144566943195858, 0.0196664401190634, 0.00108521474634201, 0.000195982746531181},
	         new double[] {0.0151266006360496, 0.128004763506614, 0.132222871067525, 0.0285542336941504, 0.0231323824626983, 0.0608668492205561, 0.0195871827832975, 0.00108521474634201, 0.000154942923543426},
	         new double[] {0.0165075613123056, 0.133973080023364, 0.135417045914601, 0.0289129395485944, 0.0249735351208855, 0.0142066085537739, 0.0195871713414993, 0.00108521474634201, 0.000174969407492204},
	         new double[] {0.0144706852550119, 0.124797801973367, 0.130635454585501, 0.0286445295046788, 0.0225618014424675, 0.0608597553057048, 0.019507138823909, 0.00108522046724108, 0.000153957021936406},
	         new double[] {0.0157971972743348, 0.130630744855338, 0.133798002872273, 0.0290037073332963, 0.0243545710269643, 0.01394620133255, 0.019507138823909, 0.00108522046724108, 0.000153957021936406},
	         new double[] {0.0107493405233593, 0.126422920610511, 0.130855868669897, 0.0278780000633113, 0.0761043366131248, 0.0589095008115095, 0.0197412380140013, 0.00107619002805338, 0.00198027109815137},
	         new double[] {0.0117500330381922, 0.132026187987599, 0.133994633033882, 0.0282106882222516, 0.0815069734899258, 0.0147025404224426, 0.0197434291183465, 0.00107621291164968, 0.000216770586798339},
	         new double[] {0.0107099235287421, 0.122155096291313, 0.129555400328494, 0.0278639695583332, 0.0648650540024268, 0.0593316118671279, 0.0196624941289273, 0.00107618716760385, 0.00153562947338552},
	         new double[] {0.0117002540651279, 0.127602710161518, 0.132665868172178, 0.0281967549725578, 0.0695409050004663, 0.0144558612136582, 0.0196641345967367, 0.00107620433030107, 0.000216996085570157},
	         new double[] {0.0106306032630864, 0.119647420274981, 0.128981987463222, 0.0279600742267585, 0.0497845838360573, 0.059759940824927, 0.0195838789640825, 0.00107619288850292, 0.00106843701795466},
	         new double[] {0.0116123309974902, 0.125010639442052, 0.132080172774966, 0.0282942286044572, 0.0534296789946321, 0.0142140717049862, 0.019584968795356, 0.00107620433030107, 0.000195982746531181},
	         new double[] {0.0108248277866356, 0.117049876085326, 0.12838135241482, 0.0280607992362981, 0.0346762900770433, 0.0601836697031292, 0.0195051608230543, 0.00107619860940199, 0.000601184016341939},
	         new double[] {0.0118247908868366, 0.122328554666337, 0.131466739598595, 0.0283964420012391, 0.0372851831002353, 0.0139639859391743, 0.019505700017792, 0.00107620433030107, 0.000174969407492204},
	         new double[] {0.0108151737694489, 0.113751960838157, 0.127665662934924, 0.0281324835319153, 0.0199539510531317, 0.06060322899939, 0.0194263397058428, 0.00107620433030107, 0.000133929584504449},
	         new double[] {0.0118146005353617, 0.11891317219849, 0.130735338622877, 0.0284691970584663, 0.0215440163114274, 0.0137036588105374, 0.0194263282640447, 0.00107620433030107, 0.000153957021936406},
	         new double[] {0.00715480667079716, 0.11305582682152, 0.126000009582506, 0.0275335502126172, 0.076277737064046, 0.0586808800973926, 0.0195803691925008, 0.00107018594447562, 0.00198049659692319},
	         new double[] {0.00782691219621311, 0.117967235838915, 0.129019536822662, 0.0278514405509912, 0.0816956487413736, 0.0142124836787517, 0.019582560296846, 0.00107020882807192, 0.000216996085570157},
	         new double[] {0.00699029506681152, 0.110441574746121, 0.125404233722755, 0.0276261880162039, 0.0616763592999221, 0.059107977631666, 0.019501754027656, 0.0010701916653747, 0.00151461613434654},
	         new double[] {0.00764622475009683, 0.11526153090115, 0.128411057229777, 0.0279453357605201, 0.0661004535528786, 0.0139706941700797, 0.0195033944954653, 0.00107020882807192, 0.000195982746531181},
	         new double[] {0.00720442831913692, 0.107935243856183, 0.124798559277382, 0.027729115333516, 0.0465958891335527, 0.0595317065098683, 0.0194230358866278, 0.00107019738627377, 0.00104742367891568},
	         new double[] {0.00788048126491367, 0.112674148458475, 0.127792776306553, 0.0280497636219851, 0.0499892275470444, 0.0137206084042677, 0.0194241257179013, 0.00107020882807192, 0.000174969407492204},
	         new double[] {0.00724454612389065, 0.105022416627908, 0.124152593254946, 0.0278263720479922, 0.0314978586674767, 0.059951265806129, 0.0193442147694163, 0.00107020310717284, 0.000580170677302962},
	         new double[] {0.00792478247711497, 0.109660004107606, 0.127133368555002, 0.0281483628407773, 0.0338556642907773, 0.0134602812756308, 0.019344753964154, 0.00107020882807192, 0.000153957021936406},
	         new double[] {0.0046199728314503, 0.103372264051529, 0.121754777808861, 0.0274419562347407, 0.0764109338967275, 0.0584674927072839, 0.0194194917896517, 0.00106659512682375, 0.00198071923524547},
	         new double[] {0.00506002081263083, 0.107812188032222, 0.124678615860888, 0.0277530258311942, 0.0818406449283944, 0.0137238547761212, 0.019421694335795, 0.00106661801042005, 0.000196208245302999},
	         new double[] {0.00478069433979967, 0.100848382158346, 0.121136827744301, 0.0275426833896174, 0.0618095561326036, 0.0588892669449693, 0.0193407736486235, 0.00106660084772282, 0.00151483877266882},
	         new double[] {0.00523608148162133, 0.105205131417633, 0.124047839063863, 0.0278552020421321, 0.0662454497398993, 0.0134737690103093, 0.019342425558231, 0.00106661801042005, 0.000175194906264022},
	         new double[] {0.00484569805552361, 0.0980976094079041, 0.120493131488572, 0.027642723321493, 0.0467290859662341, 0.0593088262412301, 0.019261952531412, 0.0010666065686219, 0.00104764631723797},
	         new double[] {0.00530762847566072, 0.102359674927073, 0.123391014298243, 0.0279566173734933, 0.0501342237340651, 0.0132134418816724, 0.0192630538044837, 0.00106661801042005, 0.000154182520708224},
	         new double[] {0.00362257698470861, 0.0972710110030052, 0.119458007742665, 0.0275736522848985, 0.0579746444032158, 0.0587024695786424, 0.0192598629730254, 0.00106480734586325, 0.001492451464369},
	         new double[] {0.00396843751376591, 0.101451643814535, 0.122333384058638, 0.0278845063941535, 0.0621085417599888, 0.0132318994090502, 0.0192615148826329, 0.00106482450856047, 0.000154181567225045},
	         new double[] {0.00368758070043256, 0.0943639204062754, 0.11878586646163, 0.0276722977476248, 0.043388816042774, 0.0591192399366048, 0.0191810418558139, 0.00106481306676232, 0.00102657100179236},
	         new double[] {0.00403998450780531, 0.0984440885091737, 0.121647442062071, 0.0279845143843426, 0.0465297626913855, 0.0129715722804133, 0.0191821431288856, 0.00106482450856047, 0.000133169181669248},
	         new double[] {0.00368818854595913, 0.0914915070392803, 0.117212702169422, 0.0277525564790994, 0.0395740061225062, 0.0589569284950546, 0.0191000282040324, 0.00106420379101098, 0.0010041851237173},
	         new double[] {0.00404105717638161, 0.0954661989259584, 0.120045861110682, 0.0280655628382601, 0.0424146942436886, 0.0127214064220143, 0.0191011294771041, 0.00106421523280913, 0.000112155842630271},
		};
	}

	/**
	 * This table is used by HandPlayerOpponentOdds and contains the odds of
	 * each type of hand occuring for a random player when the board is
	 * currently empty. This calculation normally takes about 5 minutes, so the
	 * values are precalculated to save time.
	 */
	private static double[][] _preCalcOppOddsTable = initPreCalcOppOddsTable();

	private static double[][] initPreCalcOppOddsTable() {
		return new double[][] {
	         new double[] {0, 0.000176203691467336, 0.0326410244528389, 0.0291796688400362, 0.0451538349760895, 0.021233850140286, 0.0176688366036853, 0.0015772518745956, 0.00033219639999077},
	         new double[] {0, 0.0144409365798291, 0.045186784494304, 0.0292916954856958, 0.0450247457489429, 0.0217730639476378, 0.018371218080482, 0.00162264530177838, 0.000332112493471024},
	         new double[] {0, 0.0285658649970795, 0.0573239407612343, 0.0293464073039863, 0.0421463011240995, 0.0223154194820641, 0.0190763112634396, 0.00166049477004942, 0.000313619687215564},
	         new double[] {0, 0.0424026202861937, 0.069600123457002, 0.029400401149443, 0.0392824161873983, 0.0228486578103335, 0.019784425081108, 0.00169149822909569, 0.000295128787926462},
	         new double[] {0, 0.0559512024471718, 0.0821974330897947, 0.0294536770220661, 0.0364185312506972, 0.0233728170717731, 0.0204955595334874, 0.00171634218680604, 0.00027663788863736},
	         new double[] {0, 0.0699936898483218, 0.095626857504418, 0.0295849144468148, 0.0371309061846924, 0.0238678664917597, 0.0212100235491276, 0.00173572459286745, 0.00027749793046476},
	         new double[] {0, 0.0838198328696545, 0.109404126884965, 0.0297033799643817, 0.0371309061846924, 0.0243560727629711, 0.0219275081994786, 0.0017503205133706, 0.00027749793046476},
	         new double[] {0, 0.0976459758909871, 0.123513558816849, 0.0298218454819486, 0.0371309061846924, 0.0248411578069963, 0.0226480134845405, 0.00176081645620432, 0.00027749793046476},
	         new double[] {0, 0.111499902458671, 0.137836709235877, 0.0299403109995154, 0.0371309061846924, 0.0253277526916353, 0.0233715394043133, 0.00176789892925746, 0.00027749793046476},
	         new double[] {0, 0.125140176329551, 0.152157898816746, 0.0300452866370667, 0.0374386791130547, 0.0258193300026259, 0.0240980859587969, 0.00177225444041884, 0.00027908357299133},
	         new double[] {0, 0.139198427668099, 0.166821392672787, 0.0302260699082425, 0.0403025640497558, 0.0263232163047149, 0.0248279620765414, 0.00177458093937544, 0.000297574472280432},
	         new double[] {0, 0.153544852134782, 0.181454191044848, 0.030407571152252, 0.0431664489864569, 0.0268436951210838, 0.0255608588289968, 0.00177555349221796, 0.000316065371569534},
	         new double[] {0, 0.168184993280804, 0.196062845792593, 0.0305897903690952, 0.046030333923158, 0.0273846547561362, 0.026296776216163, 0.00177585860683522, 0.000334556270858636},
	         new double[] {0.000778585759423608, 0.0857216227673476, 0.120254482753492, 0.0303105118087938, 0.0415814374273803, 0.0263834292442063, 0.0227276245625658, 0.00145477672189051, 0.000341205862548535},
	         new double[] {0.000863083438740899, 0.0931761058640932, 0.128900488011761, 0.0320056885759938, 0.0442699160229225, 0.0230610004212489, 0.0227356824489109, 0.00145516288257797, 0.000332154446730897},
	         new double[] {0.001943975807462, 0.0912532888018549, 0.12236401422902, 0.0305207820240198, 0.0408509186619732, 0.0263836695219674, 0.022806681666864, 0.00145477386144097, 0.00033327145227502},
	         new double[] {0.00213885823440469, 0.0989645801975655, 0.131040601983512, 0.0322232686700111, 0.0433906052539593, 0.0233308843117882, 0.0228147395532092, 0.00145516002212844, 0.000322908043603167},
	         new double[] {0.00309443430891825, 0.0971088320956168, 0.124351205708084, 0.0306994957599557, 0.0397706327085539, 0.0263839097997285, 0.0228858417473456, 0.00145477100099143, 0.000324086548812332},
	         new double[] {0.00339828556096562, 0.105110615013813, 0.133056615352109, 0.0324073986671449, 0.042135577298786, 0.0235962095992491, 0.0228938996336908, 0.0014551571616789, 0.000313662593958616},
	         new double[] {0.00422996126379237, 0.103003240317235, 0.126203923163749, 0.0308411666743899, 0.0385789751524191, 0.0263841500774896, 0.0229651048040106, 0.00145476814054189, 0.000314842529392549},
	         new double[] {0.0046413654184237, 0.111305110135889, 0.134934626332803, 0.0325524034355143, 0.0407602188129478, 0.0238569953532951, 0.0229731626903558, 0.00145515430122936, 0.000304417144314065},
	         new double[] {0.00500605843211896, 0.114119995572024, 0.131034367872117, 0.0315056648342627, 0.0393253293664619, 0.0263829272353126, 0.0230527604196165, 0.00145516002212844, 0.000305597079747998},
	         new double[] {0.00549146241626749, 0.123138150559189, 0.140011536192982, 0.033258019127254, 0.0414562477080648, 0.0241039126945034, 0.0230526059553415, 0.00145515430122936, 0.000304847165227765},
	         new double[] {0.00629338944391145, 0.119787641656612, 0.132650986683463, 0.0315623746765547, 0.0389923058198134, 0.026382961560707, 0.0231322294286481, 0.0014551571616789, 0.000304847165227765},
	         new double[] {0.00690074154293792, 0.129060170700187, 0.141642831970901, 0.033313468941525, 0.0411164634889361, 0.0243480387137054, 0.0231322294286481, 0.0014551571616789, 0.000304847165227765},
	         new double[] {0.00767206891166188, 0.125861554528463, 0.134622862600595, 0.0316566980000309, 0.0389923058198134, 0.026382961560707, 0.023211955878138, 0.00145516002212844, 0.000304847165227765},
	         new double[] {0.00841015785676814, 0.135427291091359, 0.143660736096642, 0.0334108529460056, 0.0411164634889361, 0.024590581235718, 0.023211955878138, 0.00145516002212844, 0.000304847165227765},
	         new double[] {0.00911472233330301, 0.132281325784035, 0.136963206609698, 0.031792725247529, 0.0393540640122839, 0.0263829272353126, 0.0232919397680862, 0.00145516860347705, 0.00030563998649105},
	         new double[] {0.00998974099773624, 0.142176993747629, 0.146078837135729, 0.0335545247448908, 0.0414897292698931, 0.0248338557944412, 0.0232917853038112, 0.00145516288257797, 0.000304847165227765},
	         new double[] {0.0095779435312936, 0.132500300347201, 0.136124438422245, 0.0313238489408041, 0.0397266575875998, 0.0263841500774896, 0.0233637370514601, 0.00145478244278958, 0.000314885436135601},
	         new double[] {0.0104964839354294, 0.142212007080185, 0.14508643897107, 0.0330513416366462, 0.0419755294263025, 0.0250802518187215, 0.0233717949378052, 0.00145516860347705, 0.00030563998649105},
	         new double[] {0.0101446128867828, 0.137313853385943, 0.138252359727845, 0.0314076386588611, 0.0409384169528546, 0.0263839097997285, 0.0234439268937749, 0.00145479102413819, 0.000324130885780152},
	         new double[] {0.0111170155556967, 0.147235073745249, 0.147282583428348, 0.0331402873149933, 0.0433727274443542, 0.0253334888464398, 0.0234519847801201, 0.00145517718482566, 0.000314885436135601},
	         new double[] {0.0101886781118974, 0.141926414077531, 0.140355244948875, 0.0314802154147337, 0.0421501763181094, 0.0263836695219674, 0.0235242197122731, 0.0014547996054868, 0.000333376335424703},
	         new double[] {0.0111653857573641, 0.152041088069237, 0.1494532613034, 0.0332176996608079, 0.044769925462406, 0.0255950221312981, 0.0235322775986183, 0.00145518576617427, 0.000324130885780152},
	         new double[] {0.0102601178390791, 0.146768933458507, 0.142476464221211, 0.0315580954440476, 0.0433619356833643, 0.0263834292442063, 0.0236046155069546, 0.00145480818683541, 0.000342621785069254},
	         new double[] {0.0112437263190534, 0.157090256336325, 0.151644434299383, 0.0333008329056961, 0.0461671234804577, 0.0258667958254981, 0.0236126733932998, 0.00145519434752288, 0.000333376335424703},
	         new double[] {0.00938340435829533, 0.106536486178022, 0.126920558737329, 0.0314315648890117, 0.0401629233393803, 0.026846661883995, 0.022878916599017, 0.00149431099493872, 0.000341140072209188},
	         new double[] {0.0102295825402737, 0.115235952761392, 0.135750875392907, 0.0331660885698153, 0.0427453951053132, 0.0236011233748118, 0.0228950323717074, 0.00149508331631366, 0.000322866090343294},
	         new double[] {0.0105070604475917, 0.112156171105226, 0.128851791242104, 0.031602562562322, 0.0395772791918887, 0.0268460821662222, 0.0229580766794986, 0.00149430813448918, 0.000333267161600715},
	         new double[] {0.0114598904905499, 0.121131043200225, 0.137708093651499, 0.0333419647398107, 0.0420228140873707, 0.0238664486622726, 0.022974192452189, 0.00149508045586412, 0.000313620640698743},
	         new double[] {0.0116291861963859, 0.117839568255189, 0.130685537481328, 0.0317417806412785, 0.0385170950475893, 0.0268455219948546, 0.0230373397361636, 0.00149430527403965, 0.000324083688362795},
	         new double[] {0.0126884106598657, 0.127101650937055, 0.139566572052531, 0.0334844465916886, 0.0407896256644109, 0.0241272344163186, 0.0230534555088539, 0.00149507759541459, 0.000304375191054192},
	         new double[] {0.0124732404945832, 0.129018431020545, 0.13558351096725, 0.0324139762708548, 0.0388480519194475, 0.0268434991802905, 0.0231249953517695, 0.00149469715562619, 0.000314842529392549},
	         new double[] {0.0136129651591526, 0.138997545448252, 0.144713078795278, 0.034197968565948, 0.0410522621293072, 0.0243741517575269, 0.0231328987738397, 0.00149507759541459, 0.000304805211967892},
	         new double[] {0.0140899808750344, 0.138915287500922, 0.139821439298114, 0.0329521498280584, 0.0392351565552636, 0.0268492067305996, 0.0232125994792838, 0.00149508331631366, 0.000305597079747998},
	         new double[] {0.0153791139700351, 0.149504482896514, 0.14915529995532, 0.0347687870034903, 0.0413606400427466, 0.024617622733785, 0.0232124450150088, 0.00149507759541459, 0.000304805211967892},
	         new double[] {0.0153788350762052, 0.144080950435847, 0.141375266236341, 0.0329706011577956, 0.038876536275935, 0.0268483786304587, 0.0232921714644987, 0.00149508045586412, 0.000304805211967892},
	         new double[] {0.0167909031411741, 0.154886267096192, 0.150721561982795, 0.0347845194759428, 0.0409910013118022, 0.0248601881393939, 0.0232921714644987, 0.00149508045586412, 0.000304805211967892},
	         new double[] {0.0167393292360254, 0.149620906053112, 0.143304048766088, 0.0330307564115546, 0.038876536275935, 0.0268491786028458, 0.0233720008901719, 0.00149508331631366, 0.000304805211967892},
	         new double[] {0.0182803535172374, 0.160679432566904, 0.152694508423166, 0.0348465397427998, 0.0409910013118022, 0.0251034855817134, 0.0233720008901719, 0.00149508331631366, 0.000304805211967892},
	         new double[] {0.0179919558438126, 0.15433230242732, 0.145104149682748, 0.0330549529541865, 0.0394830002053803, 0.0268518450185557, 0.0234519332920284, 0.0014950861767632, 0.000305598033231177},
	         new double[] {0.0196486495531692, 0.165587838112286, 0.154532129141287, 0.0348709179239773, 0.0416188928687277, 0.0253492265630497, 0.0234519332920284, 0.0014950861767632, 0.000305598033231177},
	         new double[] {0.018585234531118, 0.159245210320273, 0.147295221132772, 0.0331387426722434, 0.0406947595706351, 0.0268524047131818, 0.0235321231343433, 0.00149509475811181, 0.000314843482875728},
	         new double[] {0.0202982576429781, 0.170714719072391, 0.1567918227757, 0.0349598636023243, 0.0430160908867794, 0.0256024635907681, 0.0235321231343433, 0.00149509475811181, 0.000314843482875728},
	         new double[] {0.0186509319058546, 0.163929043402745, 0.149467849119296, 0.033211319428116, 0.0419065189358899, 0.0268529644078078, 0.0236124159528415, 0.00149510333946042, 0.000324088932520279},
	         new double[] {0.0203702551578196, 0.175594040997107, 0.15903263744317, 0.0350372759481389, 0.0444132889048311, 0.0258639968756263, 0.0236124159528415, 0.00149510333946042, 0.000324088932520279},
	         new double[] {0.0187223716330364, 0.168748144283363, 0.151635244628505, 0.0332838961839887, 0.0431182783011447, 0.0268535236256923, 0.023692811747523, 0.00149511192080903, 0.00033333438216483},
	         new double[] {0.0204485957195089, 0.180613800982507, 0.161268161709222, 0.0351146882939535, 0.0458104869228829, 0.0261357705698263, 0.023692811747523, 0.00149511192080903, 0.00033333438216483},
	         new double[] {0.0172662526452007, 0.125596476669888, 0.132139757130672, 0.0324108188113078, 0.0378316412344098, 0.0272736855233221, 0.02303026012356, 0.00152716325786895, 0.000331893192339869},
	         new double[] {0.018810745221476, 0.135424968406335, 0.14107351956004, 0.03417585776777, 0.0401439177975454, 0.0241369647121596, 0.0230544337825955, 0.00152832173993136, 0.000304374237571013},
	         new double[] {0.0183416672530588, 0.131015885792548, 0.133925078819687, 0.0325426655118078, 0.0372660988960381, 0.0272723053564206, 0.0231095231802249, 0.00152716039741942, 0.000324021711956164},
	         new double[] {0.0199883493890366, 0.141114542697072, 0.142880763019193, 0.0343104476393759, 0.0394431763118165, 0.0243977504662056, 0.0231336968392605, 0.00152831887948182, 0.000295128787926462},
	         new double[] {0.0191906987334502, 0.142159968351986, 0.138860754460728, 0.0332216713949898, 0.0376146160676027, 0.0272695016391329, 0.0231971787958308, 0.00152755227900596, 0.000314841099167781},
	         new double[] {0.0209183530446911, 0.152970112020925, 0.148066266985588, 0.0350310830748917, 0.0397281500271457, 0.0246446678074139, 0.0232131401042462, 0.00152831887948182, 0.000295558808840162},
	         new double[] {0.02078848863572, 0.152085104666709, 0.14316275757633, 0.0337675424218969, 0.0376260292612546, 0.0272744292402017, 0.0232847829233451, 0.00152793843969343, 0.000305597079747998},
	         new double[] {0.0226636420273264, 0.163505530965224, 0.152574264182729, 0.0356098077949538, 0.0396441314731258, 0.024888138783672, 0.0232926863454153, 0.00152831887948182, 0.000295558808840162},
	         new double[] {0.0229429792268434, 0.161885545404774, 0.147375023384175, 0.0342778408983642, 0.0380131338970707, 0.0272856789114883, 0.0233724900270427, 0.0015283246003809, 0.000296351630103447},
	         new double[] {0.0250161758421306, 0.17390628852668, 0.156990344409566, 0.0361517600059955, 0.0399525093865652, 0.025130049146337, 0.0233723355627677, 0.00152831887948182, 0.000295558808840162},
	         new double[] {0.0240675792644869, 0.166443421452342, 0.148889000684792, 0.0342621241583842, 0.0376513757046002, 0.0272847888349408, 0.0234521649884409, 0.00152832173993136, 0.000295558808840162},
	         new double[] {0.0262488651166463, 0.17863493198137, 0.158514892501446, 0.0361321287408244, 0.0395792436056081, 0.0253733694722528, 0.0234521649884409, 0.00152832173993136, 0.000295558808840162},
	         new double[] {0.0252616238657602, 0.171131965695201, 0.15072397191153, 0.0342863207010161, 0.0382578396340455, 0.027287395657952, 0.0235320973902975, 0.0015283246003809, 0.000296351630103447},
	         new double[] {0.0275534732436411, 0.183518789148827, 0.160387383529646, 0.0361565069220018, 0.0402071351625336, 0.0256191104535891, 0.0235320973902975, 0.0015283246003809, 0.000296351630103447},
	         new double[] {0.0258614100757619, 0.176055317089412, 0.152955590233739, 0.034370110419073, 0.0394695989993003, 0.0272887353018184, 0.0236122872326123, 0.00152833318172951, 0.000305597079747998},
	         new double[] {0.0282103182707782, 0.188656865908419, 0.162687624036243, 0.0362454526003489, 0.0416043331805853, 0.0258723474813074, 0.0236122872326123, 0.00152833318172951, 0.000305597079747998},
	         new double[] {0.0259336149731947, 0.180749593673143, 0.155174441654553, 0.0344426871749457, 0.0406813583645551, 0.0272900749456848, 0.0236925800511105, 0.00152834176307812, 0.000314842529392549},
	         new double[] {0.0282895527229477, 0.193547383632622, 0.164974662138003, 0.0363228649461635, 0.0430015311986371, 0.0261338807661657, 0.0236925800511105, 0.00152834176307812, 0.000314842529392549},
	         new double[] {0.0260115622230727, 0.18557913805502, 0.157393737160157, 0.0345152639308183, 0.0418931177298099, 0.0272914141128096, 0.023772975845792, 0.00152835034442673, 0.0003240879790371},
	         new double[] {0.0283751302219652, 0.198578339417509, 0.16726208640045, 0.0364002772919781, 0.0443987292166888, 0.0264056544603657, 0.023772975845792, 0.00152835034442673, 0.0003240879790371},
	         new double[] {0.0241754182120245, 0.142662453510544, 0.136388411432187, 0.0332386226573157, 0.0355360103422413, 0.0276621059659252, 0.0231818096004696, 0.0015539494608148, 0.000322647742695318},
	         new double[] {0.0263329694841523, 0.153488246698898, 0.145375219944732, 0.0350267104010331, 0.0375806961418829, 0.0246637079130141, 0.0232140411458503, 0.00155549410356467, 0.000285883338281911},
	         new double[] {0.0249827157336738, 0.153978036467299, 0.141327931517406, 0.0339259228906711, 0.0363636199160515, 0.0276584822531036, 0.0232694652160755, 0.00155434134240134, 0.00031477912276115},
	         new double[] {0.0272175062944192, 0.165523319242759, 0.15056373024359, 0.0357558575808873, 0.0383817006745512, 0.0249106252542225, 0.0232934844108361, 0.00155549410356467, 0.000286313359195611},
	         new double[] {0.0265814638865386, 0.163837787196285, 0.145664418782398, 0.0344769906392742, 0.0364028567023479, 0.027662648497854, 0.0233570693435898, 0.00155472750308881, 0.00030559564952323},
	         new double[] {0.0289637320742779, 0.175987578783931, 0.155107165550043, 0.036340007143496, 0.0383309520090939, 0.0251540962304805, 0.0233730306520051, 0.00155549410356467, 0.000286313359195611},
	         new double[] {0.0287196856709213, 0.173714533286193, 0.149939332725774, 0.0349949865854452, 0.0364142698959998, 0.0276731382430471, 0.0234447764472874, 0.00155511366377628, 0.000296351630103447},
	         new double[] {0.0312981735457618, 0.186467859702959, 0.159587337724314, 0.0368898656370574, 0.0382469334550741, 0.0253960065931455, 0.0234526798693575, 0.00155549410356467, 0.000286313359195611},
	         new double[] {0.0311667001339262, 0.183283058787387, 0.154144205701791, 0.0354801173966629, 0.0368013745318159, 0.0276902794868964, 0.0235325865271683, 0.00155549982446375, 0.000287106180458896},
	         new double[] {0.0339690610917649, 0.196618396580733, 0.163995731208134, 0.0374058578383278, 0.0385553113685134, 0.0256386718761174, 0.0235324320628933, 0.00155549410356467, 0.000286313359195611},
	         new double[] {0.0320071145100879, 0.186938571703175, 0.155565993574286, 0.0354284419455557, 0.0370460802687907, 0.0276903352656623, 0.0236123644647498, 0.00155549696401421, 0.000287106180458896},
	         new double[] {0.0348886813156008, 0.20038306568107, 0.16542144576273, 0.037348584487477, 0.0388099371444819, 0.02588443574105, 0.0236123644647498, 0.00155549696401421, 0.000287106180458896},
	         new double[] {0.0325933064336659, 0.191861948841432, 0.157833293144017, 0.0355122316636127, 0.0382578396340455, 0.0276924348356224, 0.0236925543070647, 0.00155550554536282, 0.000296351630103447},
	         new double[] {0.0355309237478525, 0.205521113836166, 0.167757367516849, 0.0374375301658241, 0.0402071351625336, 0.0261376727687683, 0.0236925543070647, 0.00155550554536282, 0.000296351630103447},
	         new double[] {0.0326519170446751, 0.196556251169209, 0.160092691437015, 0.0355848084194853, 0.0394695989993003, 0.0276945344055824, 0.0237728471255629, 0.00155551412671143, 0.000305597079747998},
	         new double[] {0.0355955556051367, 0.210411602955874, 0.170084952490794, 0.0375149425116387, 0.0416043331805853, 0.0263992060536266, 0.0237728471255629, 0.00155551412671143, 0.000305597079747998},
	         new double[] {0.0327162700081294, 0.201385821295131, 0.162357399439466, 0.035657385175358, 0.0406813583645551, 0.0276966334988008, 0.0238532429202444, 0.00155552270806004, 0.000314842529392549},
	         new double[] {0.0356665305092687, 0.215442530136266, 0.172417789250087, 0.0375923548574533, 0.0430015311986371, 0.0266709797478266, 0.0238532429202444, 0.00155552270806004, 0.000314842529392549},
	         new double[] {0.0299178278661561, 0.164330744912547, 0.143122944409452, 0.0344778208847523, 0.0346335313622548, 0.0280109096591851, 0.0233418546125035, 0.00157567457504685, 0.000313405153500304},
	         new double[] {0.0325850111300091, 0.176506234063721, 0.152351058299585, 0.0363214957443185, 0.0365192205046176, 0.0251720431676161, 0.0233739316936092, 0.00157721349689765, 0.00027706790955106},
	         new double[] {0.0314748420602788, 0.174210417242332, 0.147459907939292, 0.0350339559197098, 0.0351518605507967, 0.0280142559084015, 0.0234294587400177, 0.00157606073573432, 0.000305533673116599},
	         new double[] {0.0342857700644803, 0.186989146596322, 0.156893790650563, 0.0369107798138458, 0.0369845026564995, 0.0254155141438741, 0.0234534779347783, 0.00157721349689765, 0.00027706790955106},
	         new double[] {0.0336100031636572, 0.184070676416223, 0.151768115369939, 0.0355557655602257, 0.0351910973370931, 0.0280240038436814, 0.0235171658437153, 0.00157644689642179, 0.000296350199878679},
	         new double[] {0.0366166359740431, 0.197450827442238, 0.161407978575614, 0.0374646157624881, 0.0369337539910422, 0.0256574245065391, 0.0235331271521307, 0.00157721349689765, 0.00027706790955106},
	         new double[] {0.0360531917754067, 0.193746550297859, 0.156033096402298, 0.036048593841147, 0.035202510530745, 0.0280403851614371, 0.0236049759235962, 0.00157683305710926, 0.000287106180458896},
	         new double[] {0.0392830540676451, 0.207713714196468, 0.165877698667278, 0.0379885142462782, 0.0368497354370223, 0.025900089789511, 0.0236128793456664, 0.00157721349689765, 0.00027706790955106},
	         new double[] {0.0386027319009346, 0.202746913288905, 0.160173564211657, 0.0365053833183541, 0.0361960790960064, 0.0280639767189919, 0.0236928889796605, 0.00157721921779673, 0.00027865355207763},
	         new double[] {0.0420619521881581, 0.217258299165264, 0.17021642018173, 0.0384748207022556, 0.0377860049073872, 0.0261451986114997, 0.0236927345153855, 0.00157721349689765, 0.000277860730814345},
	         new double[] {0.03878762420787, 0.206619602975325, 0.162027680427145, 0.036513301042672, 0.0370460802687907, 0.0280635223842572, 0.0237729243577004, 0.00157722207824626, 0.000287106180458896},
	         new double[] {0.0422673539182724, 0.221258237379554, 0.172105565462246, 0.0384821148485745, 0.0388099371444819, 0.0263984585228143, 0.0237729243577004, 0.00157722207824626, 0.000287106180458896},
	         new double[] {0.0388125387233356, 0.211303513289935, 0.164321949030222, 0.0365858777985446, 0.0382578396340455, 0.028066361857164, 0.0238532171761985, 0.00157723065959487, 0.000296351630103447},
	         new double[] {0.0422955436484576, 0.226137473490784, 0.174468020746268, 0.0385595271943891, 0.0402071351625336, 0.0266599918076725, 0.0238532171761985, 0.00157723065959487, 0.000296351630103447},
	         new double[] {0.0388431955912463, 0.21612269140269, 0.166625582029969, 0.0366584545544173, 0.0394695989993003, 0.0280692008533293, 0.0239336129708801, 0.00157723924094348, 0.000305597079747998},
	         new double[] {0.0423300764254907, 0.231157147662698, 0.176839782502859, 0.0386369395402037, 0.0416043331805853, 0.0269317655018725, 0.0239336129708801, 0.00157723924094348, 0.000305597079747998},
	         new double[] {0.0344508394561256, 0.184183918037823, 0.149194415887623, 0.0354895428162575, 0.0349427509629703, 0.0283224841249818, 0.023502105576904, 0.00159255408776355, 0.000313835174414004},
	         new double[] {0.0375266736919307, 0.197551984379657, 0.158622149109132, 0.0373779465252308, 0.0368814263574406, 0.025663718687374, 0.0235341826580098, 0.00159409300961435, 0.00027749793046476},
	         new double[] {0.0362848595833927, 0.193780071190868, 0.153470955996561, 0.0360069673876334, 0.0354610801515123, 0.0283300380954669, 0.0235898126806016, 0.00159294024845102, 0.000305963694030299},
	         new double[] {0.0395300324317769, 0.207726403150614, 0.163100886052849, 0.0379268539193212, 0.0373467085093225, 0.025905629050039, 0.0236138318753622, 0.00159409300961435, 0.00027749793046476},
	         new double[] {0.038617970945842, 0.20341607612686, 0.157766926424089, 0.0365024568401072, 0.0355003169378087, 0.0283456156269028, 0.0236776227604825, 0.00159332640913849, 0.000296780220792379},
	         new double[] {0.042076440365062, 0.21794503589006, 0.167602118286835, 0.0384535237019709, 0.0372959598438652, 0.0261482943330109, 0.0236935840688979, 0.00159409300961435, 0.00027749793046476},
	         new double[] {0.0411659807308677, 0.212550282412183, 0.161963848780619, 0.0369669437870178, 0.0361181940609058, 0.0283684272352172, 0.0237655358165468, 0.00159371256982596, 0.000288329022635881},
	         new double[] {0.0448535507046145, 0.227629905885489, 0.171998319819616, 0.038947736440468, 0.0378398328467709, 0.0263934031549996, 0.023773439238617, 0.00159409300961435, 0.000278290751728045},
	         new double[] {0.0434055482423396, 0.222074828501748, 0.166559756650116, 0.0374895607894154, 0.0377170580619768, 0.0283973997750924, 0.0238537063130693, 0.0015941044514125, 0.000288329022635881},
	         new double[] {0.0472946940949452, 0.23773827973709, 0.17682476800324, 0.039505119346536, 0.039545408778262, 0.0266460080233703, 0.0238535518487943, 0.00159409873051343, 0.000287536201372596},
	         new double[] {0.0429633084417015, 0.225679951738495, 0.168439220024062, 0.037486265551549, 0.0385670592347611, 0.028396883463951, 0.0239338446672925, 0.00159410731186204, 0.000296781651017147},
	         new double[] {0.0468142243862476, 0.241449288234342, 0.178738824938772, 0.0395008801603225, 0.0405693410153566, 0.0269075641918248, 0.0239338446672925, 0.00159410731186204, 0.000296781651017147},
	         new double[] {0.0429401674049487, 0.230480336697794, 0.170775290521557, 0.0375588423074217, 0.0397788186000159, 0.0284004423399164, 0.024014240461974, 0.00159411589321065, 0.000306027100661698},
	         new double[] {0.0467904755039683, 0.246448584563756, 0.18114302419311, 0.0395782925061371, 0.0419665390334083, 0.0271793378860248, 0.024014240461974, 0.00159411589321065, 0.000306027100661698},
	         new double[] {0.0388776640081649, 0.201712352336444, 0.154667057261051, 0.0362526816714408, 0.0349427509629703, 0.0286024954371062, 0.0236625624936713, 0.00160519822819942, 0.000313835174414004},
	         new double[] {0.0423533461824727, 0.216096888002531, 0.164256615409318, 0.0381743624201005, 0.0368814263574406, 0.0261503643449923, 0.023694639574777, 0.00160673715005022, 0.00027749793046476},
	         new double[] {0.0410451767958045, 0.211112576138016, 0.158928906101167, 0.0367414810091895, 0.0354610801515123, 0.0286161664789258, 0.0237503725735522, 0.00160558438888689, 0.000305963694030299},
	         new double[] {0.0447196316084251, 0.226059550554727, 0.168719742879912, 0.0386936913357556, 0.0373467085093225, 0.0263930296279642, 0.0237743917683127, 0.00160673715005022, 0.00027749793046476},
	         new double[] {0.043473154967142, 0.220208960129338, 0.163153400330782, 0.0372077071094185, 0.0361268826763739, 0.0286381371150765, 0.0238382856296164, 0.00160597054957436, 0.000297574472280432},
	         new double[] {0.0473658334749256, 0.235702220338139, 0.173143871696634, 0.0391897104481352, 0.0379456909330043, 0.0266381384499529, 0.0238542469380318, 0.00160673715005022, 0.000278290751728045},
	         new double[] {0.0457299495359493, 0.229887305439374, 0.167800995808297, 0.0377380215815197, 0.0373299534261606, 0.0286671082247268, 0.023926456126139, 0.0016063624311609, 0.000297574472280432},
	         new double[] {0.0498260060057998, 0.245971794823387, 0.178022872059148, 0.0397549996367229, 0.0392370308648226, 0.0268907433183236, 0.0239343595482092, 0.00160674287094929, 0.000287536201372596},
	         new double[] {0.0476262917074996, 0.239395143643194, 0.172440690009079, 0.0382542769441474, 0.0389288174272316, 0.0287006808441988, 0.0240147295988448, 0.00160675431274744, 0.000297574472280432},
	         new double[] {0.0518904782499999, 0.256059466171466, 0.182893662216379, 0.0403059107757139, 0.0409426067963137, 0.0271516444438342, 0.0240145751345698, 0.00160674859184837, 0.000296781651017147},
	         new double[] {0.0470902434643019, 0.243097043038896, 0.174358711527669, 0.038250981706281, 0.0397788186000159, 0.0287001020799091, 0.0240949709292514, 0.00160675717319698, 0.000306027100661698},
	         new double[] {0.0513080907243059, 0.25986954204775, 0.184846219372452, 0.0403016715895003, 0.0419665390334083, 0.0274234410216305, 0.0240949709292514, 0.00160675717319698, 0.000306027100661698},
	         new double[] {0.0431472997070328, 0.217060806578119, 0.159736789299859, 0.0367879580700051, 0.0349427509629703, 0.0288554511872868, 0.0238232253628051, 0.00161421722558897, 0.000313835174414004},
	         new double[] {0.0470104512244726, 0.232299532545337, 0.169463241411834, 0.0387331188186877, 0.0368814263574406, 0.0266362043093244, 0.0238553024439109, 0.00161575614743977, 0.00027749793046476},
	         new double[] {0.045336737840372, 0.225795857868839, 0.163920543576946, 0.03724426699169, 0.0362392211110329, 0.0288754445376951, 0.0239111384188694, 0.00161460338627644, 0.000306819921924983},
	         new double[] {0.0493973461893377, 0.241551291864824, 0.173842286683406, 0.0392184198266529, 0.0381604491935535, 0.0268813131313131, 0.0239351576136299, 0.00161575614743977, 0.000278290751728045},
	         new double[] {0.0475041290589064, 0.235471821854635, 0.16859117997548, 0.037775629103434, 0.0373386420416287, 0.0289043551011636, 0.0239993089153919, 0.00161499526786298, 0.000306819921924983},
	         new double[] {0.051760199075846, 0.251816807372179, 0.178744548221554, 0.0397847916953903, 0.039342888951056, 0.0271339179996838, 0.0240152702238073, 0.00161576186833885, 0.000287536201372596},
	         new double[] {0.0494301412432772, 0.245144808112464, 0.173276681415144, 0.0382995819357654, 0.0385417127914154, 0.0289379262904108, 0.0240875823880978, 0.00161538714944953, 0.000306819921924983},
	         new double[] {0.0538573233515086, 0.262077533056785, 0.183661881468311, 0.040343609116901, 0.0406342288828743, 0.0273948191251944, 0.024095485810168, 0.00161576758923792, 0.000296781651017147},
	         new double[] {0.051475612951429, 0.254962643244162, 0.177968700389078, 0.0388193055934565, 0.0401405767924864, 0.0289756684918242, 0.024175958836987, 0.00161577903103607, 0.000306819921924983},
	         new double[] {0.0560845051164861, 0.272491780498256, 0.188585736540012, 0.0408981344338818, 0.0423398048143654, 0.0276659606600468, 0.024175804372712, 0.00161577331013699, 0.000306027100661698},
	         new double[] {0.0465040229362286, 0.229307935687941, 0.164386494358907, 0.0370985788142521, 0.036367108949374, 0.0290816162054764, 0.0239840941843056, 0.00162022130916673, 0.000316065371569534},
	         new double[] {0.0506733283675929, 0.245171687041649, 0.174221927452897, 0.0390569455433338, 0.0383916235739944, 0.0271252427329803, 0.0240161712654114, 0.00162176023101753, 0.000278290751728045},
	         new double[] {0.0485992378618254, 0.238829362457286, 0.169042512430083, 0.0376253270208933, 0.0374509804762877, 0.0291104461996163, 0.0240722646808282, 0.00162061319075327, 0.000316065371569534},
	         new double[] {0.0529578907502787, 0.25527036110887, 0.179107464657716, 0.0396183202067304, 0.0395576472116052, 0.027377847601351, 0.0240962838755888, 0.00162176595191661, 0.000287536201372596},
	         new double[] {0.0504731755623787, 0.248503981316688, 0.173745410408718, 0.0381498664837505, 0.0385504014068835, 0.0291439568426816, 0.0241605381535341, 0.00162100507233982, 0.000316065371569534},
	         new double[] {0.0549985640543325, 0.265531188339435, 0.184042311721874, 0.0401777378459022, 0.0407400869691077, 0.0276387487268616, 0.0241764994619494, 0.00162177167281568, 0.000296781651017147},
	         new double[] {0.052548317283351, 0.258486964502393, 0.178476242822417, 0.0386772876111452, 0.0397534721566703, 0.0291816976138702, 0.0242489146024233, 0.00162139695392636, 0.000316065371569534},
	         new double[] {0.0572583978507726, 0.276118490117433, 0.189005619543812, 0.0407401694454027, 0.042031426900926, 0.027909890261714, 0.0242568180244935, 0.00162177739371475, 0.000306027100661698},
	         new double[] {0.0476483350467426, 0.238039037412964, 0.168698780790594, 0.0372266978722641, 0.0384733151523161, 0.0292853295552516, 0.0241451689581728, 0.00162382070816721, 0.000325310821214085},
	         new double[] {0.0519292444923474, 0.254267041271138, 0.178621140085558, 0.0391896327392561, 0.0407247320759941, 0.0276242436256312, 0.0241774005035535, 0.00162536535091709, 0.000288329022635881},
	         new double[] {0.0494183168600045, 0.247470094000093, 0.173376973066579, 0.0377453567276152, 0.0395571866792298, 0.0293194828459795, 0.0242334424308787, 0.00162421258975376, 0.000325310821214085},
	         new double[] {0.0538570587599265, 0.264267067015184, 0.183528974494516, 0.0397427264012436, 0.0418907557136049, 0.0278851447511418, 0.0242576160899142, 0.00162537107181616, 0.000297574472280432},
	         new double[] {0.0514463612793532, 0.257399726941487, 0.17811789285557, 0.038272783575909, 0.0406410582061434, 0.0293571630709863, 0.0243218188797679, 0.0016246044713403, 0.000325310821214085},
	         new double[] {0.0560658907411253, 0.274796935257157, 0.18850236540107, 0.0403051565705193, 0.0430567793512157, 0.0281562862859942, 0.0243379346524582, 0.00162537679271524, 0.000306819921924983},
	         new double[] {0.0503787127919875, 0.252709196116425, 0.17606357663745, 0.0378657470893496, 0.0407689460444846, 0.0295190216080265, 0.0243147392671643, 0.00162602039386102, 0.000334556270858636},
	         new double[] {0.0549132582980211, 0.26976477665324, 0.18629330506065, 0.0398704788449734, 0.0432879537316566, 0.0281383817788602, 0.0243389129261998, 0.00162717887592342, 0.000306819921924983},
	         new double[] {0.0522394352156808, 0.262512889185613, 0.18079596012991, 0.0383864876368511, 0.0418528175713982, 0.0295581787784774, 0.0244031157160535, 0.00162641227544756, 0.000334556270858636},
	         new double[] {0.0569401370841836, 0.280154334124534, 0.19125630466915, 0.0404257407277098, 0.0444539773692674, 0.0284095233137126, 0.0244192314887438, 0.0016271845968225, 0.000316065371569534},
	         new double[] {0.0520210041379263, 0.267047033513599, 0.183376907991352, 0.0384575881623919, 0.0430645769366531, 0.029733230185523, 0.0244845155285224, 0.00162703585344658, 0.000343801720503187},
	         new double[] {0.056705780453633, 0.284876445742707, 0.19390776118145, 0.0405017490695434, 0.0458511753873192, 0.0286710565985708, 0.0245006313012128, 0.00162780817482152, 0.000325310821214085},
		};
	}

	/**
	 * As a utility class, no instances are allowed therefore constructor is
	 * disabled.
	 */
	private HandEngine() {
	}

	/**
	 * Takes a string representing a full or partial holdem hand and validates
	 * that the text represents valid cards and that no card is duplicated.
	 *
	 * @param aHand hand to validate
	 * @return true of a valid hand, false otherwise
	 */
	public static boolean validateHand(String aHand) {

		if(StringUtils.isEmpty(aHand)) return false;

        long handmask = 0L;
        int cards = 0;
        int card = 0;

        if(log.isTraceEnabled()) log.trace("hand: " + aHand);

        try {
        	IntegerRef index = new IntegerRef(0);
            for(card = nextCard(aHand, index);
            	card >= 0;
            	card = nextCard(aHand, index)) {

            	if(log.isTraceEnabled()) log.trace("index: " + index);

            	if ((handmask & (1L << card)) != 0)
                    return false;
                handmask |= (1L << card);
                cards++;
            }

            return card == -1 && cards > 0 && index.get() >= aHand.length();
        }
        catch(Exception e) {
        	log.error(e.getMessage());
        }

        return false;
	}

	/**
	 * Takes a string representing pocket cards and a board and then validates
	 * that the text represents a valid hand.
	 *
	 * @param aPocket Pocket cards as a string
	 * @param aBoard Board cards as a string
	 * @return true of a valid hand, false otherwise
	 */
	public static boolean validateHand(String aPocket, String aBoard) {

		if(StringUtils.isEmpty(aPocket))
			throw new IllegalArgumentException("pocket");

		if(StringUtils.isEmpty(aBoard))
			throw new IllegalArgumentException("board");

		return validateHand(aPocket + " " + aBoard);
	}

	/**
	 * Parses a string description of a hand and returns a hand mask.
	 *
	 * @param aHand string descripton of a hand
	 * @return a hand mask representing the hand
	 */
	public static long parseHand(String aHand) {
        return parseHand(aHand, null);
	}

	/**
	 * Parses a string description of a hand and returns a hand mask.
	 * Optionally, can also return number of cards parsed through the second
	 * argument.
	 *
	 * @param aHand string description of a hand
	 * @param aCards valid integer instance to retrieve number of cards that
	 * 	have been parsed; may be null if not interested
	 * @return a hand mask representing the hand
	 */
	public static long parseHand(String aHand, IntegerRef aCards) {

        if(StringUtils.isEmpty(aHand))
        	throw new IllegalArgumentException("hand");

        // Hand contains either invalid strings or duplicate entries
        if(!HandEngine.validateHand(aHand))
        	throw new IllegalArgumentException("Bad hand definition: [" + aHand + "]");

		IntegerRef index = new IntegerRef(0);
        long handmask = 0L;

        // Parse the hand
        if(aCards != null) aCards.set(0);
        for(int card = nextCard(aHand, index); card >= 0;
        	card = nextCard(aHand, index)) {

            handmask |= (1L << card);
            if(aCards != null) aCards.increment();
        }
        return handmask;
	}

	/**
	 * Parses the passed pocket cards and board and produces a card mask.
	 * Optionally, can also return number of cards parsed through the second
	 * argument.
	 *
	 * @param aPocket string description representing pocket cards
	 * @param aBoard string description representing board cards; may be null
	 * 	or empty if board is empty
	 * @param aCards valid integer instance to retrieve number of cards that
	 * 	have been parsed; may be null if not interested
	 * @return a hand mask representing the hand
	 * @throws IllegalArgumentException if pocket card string is empty or null
	 */
	public static long parseHand(String aPocket, String aBoard, IntegerRef aCards) {

		if(StringUtils.isEmpty(aPocket))
			throw new IllegalArgumentException("pocket");

		StringBuilder hand = new StringBuilder(aPocket);
		if(StringUtils.isNotEmpty(aBoard)) hand.append(" " + aBoard);

		return parseHand(hand.toString(), aCards);
	}

	/**
	 * Reads an string definition of a card and returns the Card value. Card
	 * value range is 0 (inclusive) to 52 (exclusive). Note that value is not
	 * the same as rank. It is a unique numeric representation of a card in a
	 * deck.
	 *
	 * @param aCard card string
	 * @return numerica value representing a card
	 * @throws IllegalArgumentException if card string is null or empty
	 */
	public static int parseCard(String aCard) {

        if(StringUtils.isEmpty(aCard))
            throw new IllegalArgumentException("card");

        return nextCard(aCard, new IntegerRef(0));
	}

	/**
	 * Parses string representing multiple cards and returns a single card
	 * value for a card defined by iterator argument. value range is 0
	 * (inclusive) to 52 (exclusive). This function is iterative in nature in
	 * that it is meant to be called in the iterative way to extract one card
	 * per call from a string, since iterator is updated by reference.
	 *
	 * @param aCards string containing hand definition
	 * @param aCardIterator iterator into card string
	 * @return card value for a card defined by the iterator
	 * @throws IllegalArgumentException if either argument is null
	 */
	public static int nextCard(String aCards, IntegerRef aCardIterator) {

		int rank = 0, suit = 0;

		if(aCards == null)
			throw new IllegalArgumentException("cards");

		if(aCardIterator == null)
			throw new IllegalArgumentException("itrator");

		if(log.isTraceEnabled()) log.trace("index: " + aCardIterator);

        // Remove whitespace
		while (aCardIterator.get() < aCards.length() &&
				aCards.charAt(aCardIterator.get()) == ' ') {
            aCardIterator.increment();
		}

        if(aCardIterator.get() >= aCards.length())
            return -1;

        // Parse cards
        if(aCardIterator.get() < aCards.length()) {
        	char charAt = aCards.charAt(aCardIterator.increment());
        	if(log.isTraceEnabled()) log.trace("switch val: " + charAt);
        	switch(charAt) {
                case '1':
                    try {
                        if (aCards.charAt(aCardIterator.get()) == '0') {
                            aCardIterator.increment();
                            rank = Rank.Ten.ordinal();
                        }
                        else { return -1; }
                    }
                    catch(Exception e) {
                        throw new IllegalArgumentException("Bad hand string");
                    }
                    break;
                case '2':
                    rank = Rank.Two.ordinal();
                    break;
                case '3':
                    rank = Rank.Three.ordinal();
                    break;
                case '4':
                    rank = Rank.Four.ordinal();
                    break;
                case '5':
                    rank = Rank.Five.ordinal();
                    break;
                case '6':
                    rank = Rank.Six.ordinal();
                    break;
                case '7':
                    rank = Rank.Seven.ordinal();
                    break;
                case '8':
                    rank = Rank.Eight.ordinal();
                    break;
                case '9':
                    rank = Rank.Nine.ordinal();
                    break;
                case 'T':
                case 't':
                    rank = Rank.Ten.ordinal();
                    break;
                case 'J':
                case 'j':
                    rank = Rank.Jack.ordinal();
                    break;
                case 'Q':
                case 'q':
                    rank = Rank.Queen.ordinal();
                    break;
                case 'K':
                case 'k':
                    rank = Rank.King.ordinal();
                    break;
                case 'A':
                case 'a':
                    rank = Rank.Ace.ordinal();
                    break;
                default:
                    return -2;
            }
        }
        else { return -2; }

        if(log.isTraceEnabled()) log.trace("rank: " + rank);

        if(aCardIterator.get() < aCards.length()) {
            switch (aCards.charAt(aCardIterator.increment())) {
                case 'H':
                case 'h':
                    suit = Suit.Hearts.ordinal();
                    break;
                case 'D':
                case 'd':
                    suit = Suit.Diamonds.ordinal();
                    break;
                case 'C':
                case 'c':
                    suit = Suit.Clubs.ordinal();
                    break;
                case 'S':
                case 's':
                    suit = Suit.Spades.ordinal();
                    break;
                default:
                    return -2;
            }
        }
        else { return -2; }

        if(log.isTraceEnabled()) log.trace("suit: " + suit);

        return rank + (suit * 13);
	}

	/**
	 * Given a card value, returns it's rank.
	 *
	 * @param aCard card value
	 * @return rank of a card
	 * @throws ArgumentOutOfRangeException if card value is out of valid range;
	 * 	must be greater or equal to zero and less than 52
	 */
	public static int cardRank(int aCard) {

        // Legal values are 0 - 52.
        if (aCard < 0 || aCard > 52)
            throw new ArgumentOutOfRangeException("card");

        return aCard % 13;
	}

	/**
	 * Given a card value, returns it's suit
	 *
	 * @param aCard Card value
	 * @return numeric value dentoting a suit
	 * @throws ArgumentOutOfRangeException if card value is out of valid range;
	 * 	must be greater or equal to zero and less than 52
	 */
	public static int cardSuit(int aCard) {

        // Legal values are 0 - 52.
        if (aCard < 0 || aCard > 52)
            throw new ArgumentOutOfRangeException("card");

        return aCard / 13;
	}

	/**
	 * Takes a hand value and returns a description string. This is useful when
	 * needing to convert hand into a readable format.
	 *
	 * @param handValue A hand value as returned by one of the Evalute(..)
	 * 	functions
	 * @return A description string of the value of the hand
	 */
	public static String descriptionFromHandValue(int handValue) {

        StringBuilder b = new StringBuilder();
        int handType = computeHandType(handValue);

        switch(HandTypes.values()[handType]) {
            case HighCard:
                b.append("High card: ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                return b.toString();
            case Pair:
                b.append("One pair, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append("'s");
                return b.toString();
            case TwoPair:
                b.append("Two pair, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append("'s and ");
                b.append(_rankTable[extractSecondRankedCard(handValue)]);
                b.append("'s with a ");
                b.append(_rankTable[extractThirdRankedCard(handValue)]);
                b.append(" for a kicker");
                return b.toString();
            case Trips:
                b.append("Three of a kind, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append("'s");
                return b.toString();
            case Straight:
                b.append("A straight, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append(" high");
                return b.toString();
            case Flush:
                b.append("A flush");
                return b.toString();
            case FullHouse:
                b.append("A fullhouse, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append("'s and ");
                b.append(_rankTable[extractSecondRankedCard(handValue)]);
                b.append("'s");
                return b.toString();
            case FourOfAKind:
                b.append("Four of a kind, ");
                b.append(_rankTable[extractTopRankedCard(handValue)]);
                b.append("'s");
                return b.toString();
            case StraightFlush:
                b.append("A straight flush");
                return b.toString();
        }

        log.error("could not determine hand description from [" +
        		handValue + "]");

        return "";
	}

	/**
	 * Given a card mask (like the ones that come out or the parse functions)
	 * returns card description.
	 *
	 * @param aCardMask
	 * @return description of the hand value
	 * @throws ArgumentOutOfRangeException if mask represents invalid card
	 * 	count, which should be at least one and no more than seven
	 */
	public static String descriptionFromMask(long aCardMask) {

		int numberOfCards = BitCount(aCardMask);

		if(log.isDebugEnabled())
			log.debug("mask: " + aCardMask);

        // This functions supports 1-7 cards
        if (numberOfCards < 1 || numberOfCards > 7)
            throw new ArgumentOutOfRangeException("numberOfCards");

        // Seperate out by suit
        int sc = (int)((aCardMask >> (CLUB_OFFSET)) & 0x1fffL);
        int sd = (int)((aCardMask >> (DIAMOND_OFFSET)) & 0x1fffL);
        int sh = (int)((aCardMask >> (HEART_OFFSET)) & 0x1fffL);
        int ss = (int)((aCardMask >> (SPADE_OFFSET)) & 0x1fffL);

        int handvalue = Evaluate(aCardMask, numberOfCards);
        if(log.isDebugEnabled()) log.debug("handvalue: " + handvalue);

        switch(HandTypes.values()[computeHandType(handvalue)])
        {
            case HighCard:
            case Pair:
            case TwoPair:
            case Trips:
            case Straight:
            case FullHouse:
            case FourOfAKind:
                return descriptionFromHandValue(handvalue);
            case Flush:
                if(_bitsTable[ss] >= 5) {
                    return "Flush (Spades) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sc] >= 5) {
                    return "Flush (Clubs) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sd] >= 5) {
                    return "Flush (Diamonds) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sh] >= 5) {
                    return "Flush (Hearts) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                break;
            case StraightFlush:
                if(_bitsTable[ss] >= 5) {
                    return "Straight Flush (Spades) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sc] >= 5) {
                    return "Straight (Clubs) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sd] >= 5) {
                    return "Straight (Diamonds) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                else if(_bitsTable[sh] >= 5) {
                    return "Straight  (Hearts) with " +
                    	_rankTable[extractTopRankedCard(handvalue)] + " high";
                }
                break;
        }

        log.error("could not produce " +
        		"description given mask [" + aCardMask + "]");

        return "";
	}

	/**
	 * @param aCardValue
	 * @return description of a card given its value
	 */
	public static String descriptionFromCardValue(int aCardValue) {
		try {
			return _rankTable[aCardValue];
		}
		catch(ArrayIndexOutOfBoundsException e) {
			throw new IllegalArgumentException("invalid card value");
		}
	}

	/**
	 * Given a string describing hand card values, returns hand description.
	 * For example: if input were "Ah 2d 9h 10s 5d Kh 6h", return value would
	 * be "High card: Ace".
	 *
	 * @param aHand the string describing cards in the hand
	 * @return hand description
	 * @throws IllegalArgumentException if input is null or empty
	 */
	public static String descriptionFromHand(String aHand) {

        if(StringUtils.isEmpty(aHand))
            throw new IllegalArgumentException("hand");

        long mask = parseHand(aHand, null);
        return descriptionFromMask(mask);
	}

	/**
	 * Convinience function for a fast look up to get mask given table index.
	 *
	 * @param index index of mask with respect to a lookup table
	 * @return card mask value
	 */
	public static long lookupMaskByIndex(int index) {
		return _cardMasksTable[index];
	}

	/**
	 * Convinience function to compute hand type given hand value.
	 *
	 * @param aHandValue
	 * @return hand type
	 */
	public static int computeHandType(int aHandValue) {
		return (aHandValue >> HANDTYPE_SHIFT);
	}

	/**
	 * Computes value of a card which is top ranked when evaluating a 5 card
	 * hand out of maximum 7 cards. Returned value is always the code of only
	 * one card without a suit (Ace, Jack, Two, etc). Top rank is determined as
	 * card which makes a top rank, so in case of high card return value would
	 * represent a single card; in case of two pair, return value would
	 * represent a card which makes up a higher pair; three of a kind, a card
	 * representing the trips, etc.
	 *
	 * @param aHandValue
	 * @return card value
	 */
	public static int extractTopRankedCard(int aHandValue) {
		return ((aHandValue >> TOP_CARD_SHIFT) & CARD_MASK);
	}

	/**
	 * Computes value of a second-highest ranked card when evaluating a hand.
	 * Returned value is always the code of only one card without a suit (Ace,
	 * Jack, Two, etc). Second rank is determined as a stand-alone (kicker)
	 * card which is second-best to a top-ranked card. For example, for a two
	 * pair Aces and Jacks, the return value would be Jack. If a hand as a whole
	 * takes all 5 cards (straight & straight flush), the second is irrelevant
	 * and return value will be two.
	 *
	 * @param aHandValue
	 * @return card value
	 */
	public static int extractSecondRankedCard(int aHandValue) {
		return (((aHandValue) >> SECOND_CARD_SHIFT) & CARD_MASK);
	}

	/**
	 * Computes value of a third-highest ranked card when evaluating a hand.
	 * Returned value is always the code of only one card without a suit (Ace,
	 * Jack, Two, etc). Third rank is determined as card which is third-best
	 * after top-ranked and second-best cards. For example, for a two pair
	 * Aces and Jacks, with King, Ten and Two, the return value would a King
	 * since it is the strongest kicker, thus third-best card.
	 *
	 * @param aHandValue
	 * @return card value
	 */
	public static int extractThirdRankedCard(int aHandValue) {
		return (((aHandValue) >> THIRD_CARD_SHIFT) & CARD_MASK);
	}

	public static int extractFourthRankedCard(int aHandValue) {
		return (((aHandValue) >> FOURTH_CARD_SHIFT) & CARD_MASK);
	}

	public static int extractFifthRankedCard(int aHandValue) {
		return (((aHandValue) >> FIFTH_CARD_SHIFT) & CARD_MASK);
	}

	@SuppressWarnings("unused")
	private static int HANDTYPE_VALUE(HandTypes ht) {

		if(ht == null)
			throw new IllegalArgumentException("null hand type");

		return ((ht.ordinal()) << HANDTYPE_SHIFT);
	}

	@SuppressWarnings("unused")
	private static int TOP_CARD_VALUE(int c) {
		return ((c) << TOP_CARD_SHIFT);
	}

	@SuppressWarnings("unused")
	private static int SECOND_CARD_VALUE(int c) {
		return ((c) << SECOND_CARD_SHIFT);
	}

	@SuppressWarnings("unused")
	private static int THIRD_CARD_VALUE(int c) {
		return ((c) << THIRD_CARD_SHIFT);
	}

	private static int CardMask(long cards, int suit) {
		return (int)((cards >> (13 * suit)) & 0x1fffL);
	}

	/**
	 * --DONE--
	 * @param mask
	 * @return
	 */
	public static String MaskToString(long mask) {

		StringBuilder builder = new StringBuilder();

		int count = 0;
        for (int i = 51; i >= 0; i--)
        {
            if (((1L << i) & mask) != 0)
            {
                if (count != 0)
                {
                    builder.append(" ");
                }
                builder.append(HandEngine._cardTable[i]);
                count++;
            }
        }
        return builder.toString();
	}

	public static HandTypes EvaluateType(long mask) {
        int cards = BitCount(mask);
        if (cards <= 0 || cards > 7) throw new IllegalArgumentException("mask");
        return EvaluateType(mask, cards);
	}

	/**
	 * This function is faster (but provides less information) than Evaluate or
	 * Evaluate.
	 *
	 * @param mask card mask
	 * @param cards number of cards in mask
	 * @return HandType enum that describes the rank of the hand
	 */
	public static HandTypes EvaluateType(long mask, int cards) {

		HandTypes is_st_or_fl = HandTypes.HighCard;

        int ss = (int)((mask >> (SPADE_OFFSET)) & 0x1fffL);
        int sc = (int)((mask >> (CLUB_OFFSET)) & 0x1fffL);
        int sd = (int)((mask >> (DIAMOND_OFFSET)) & 0x1fffL);
        int sh = (int)((mask >> (HEART_OFFSET)) & 0x1fffL);

        int ranks = sc | sd | sh | ss;
        int rankinfo = _bitsAndStrTable[ranks];
        int n_dups = cards - (rankinfo >> 2);

        if ((rankinfo & 0x01) != 0) {
            if ((rankinfo & 0x02) != 0)
                is_st_or_fl = HandTypes.Straight;

            int t = _bitsAndStrTable[ss] | _bitsAndStrTable[sc] | _bitsAndStrTable[sd] | _bitsAndStrTable[sh];

            if ((t & 0x01) != 0)
            {
                if ((t & 0x02) != 0)
                    return HandTypes.StraightFlush;
                else
                    is_st_or_fl = HandTypes.Flush;
            }

            if (is_st_or_fl.ordinal() != 0 && n_dups < 3)
                return is_st_or_fl;
        }

        switch (n_dups)
        {
            case 0:
                return HandTypes.HighCard;
            case 1:
                return HandTypes.Pair;
            case 2:
                return ((ranks ^ (sc ^ sd ^ sh ^ ss)) != 0) ? HandTypes.TwoPair : HandTypes.Trips;
            default:
                if (((sc & sd) & (sh & ss)) != 0) return HandTypes.FourOfAKind;
                else if ((((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss))) != 0) return HandTypes.FullHouse;
                else if (is_st_or_fl.ordinal() != 0) return is_st_or_fl;
                else return HandTypes.TwoPair;
        }
	}

	/**
	 * Evaluates a hand (passed as a hand mask) and returns a hand value.
	 * A hand value can be compared against another hand value to determine
	 * which has the higher value.
	 *
	 * @param cards hand mask
	 * @return Hand Value bit field
	 */
	public static int Evaluate(long cards) {
		return Evaluate(cards, BitCount(cards));
	}

	/**
	 * Evaluates a hand (passed as a string) and returns a hand value.
	 * A hand value can be compared against another hand value to determine
	 * which has the higher value.
	 *
	 * @param hand
	 * @return
	 */
	public static int Evaluate(String hand) {
		return Evaluate(HandEngine.parseHand(hand));
	}

	private static final int HANDTYPE_VALUE_STRAIGHTFLUSH =
		((HandTypes.StraightFlush.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_STRAIGHT =
		((HandTypes.Straight.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_FLUSH =
		((HandTypes.Flush.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_FULLHOUSE =
		((HandTypes.FullHouse.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_FOUR_OF_A_KIND =
		((HandTypes.FourOfAKind.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_TRIPS =
		((HandTypes.Trips.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_TWOPAIR =
		((HandTypes.TwoPair.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_PAIR =
		((HandTypes.Pair.ordinal()) << HANDTYPE_SHIFT);

	private static final int HANDTYPE_VALUE_HIGHCARD =
		((HandTypes.HighCard.ordinal()) << HANDTYPE_SHIFT);

	public static final int SPADE_OFFSET = 13 * Suit.Spades.ordinal();

	public static final int CLUB_OFFSET = 13 * Suit.Clubs.ordinal();

	public static final int DIAMOND_OFFSET = 13 * Suit.Diamonds.ordinal();

	public static final int HEART_OFFSET = 13 * Suit.Hearts.ordinal();

	/**
	 * Evaluates a hand (passed as a hand mask) and returns a hand value.
	 * A hand value can be compared against another hand value to determine
	 * which has the higher value.
	 *
	 * @param cards hand mask
	 * @param numberOfCards number of cards in the hand
	 * @return hand value
	 */
	public static int Evaluate(long cards, int numberOfCards) {

		int retval = 0, four_mask, three_mask, two_mask;

		// This functions supports 1-7 cards
		if(numberOfCards < 1 || numberOfCards > 7)
			throw new ArgumentOutOfRangeException("numberOfCards");

        // Seperate out by suit
        int sc = (int)((cards >> (CLUB_OFFSET)) & 0x1fffL);
        int sd = (int)((cards >> (DIAMOND_OFFSET)) & 0x1fffL);
        int sh = (int)((cards >> (HEART_OFFSET)) & 0x1fffL);
        int ss = (int)((cards >> (SPADE_OFFSET)) & 0x1fffL);

        int ranks = sc | sd | sh | ss;
        int n_ranks = _bitsTable[ranks];
        int n_dups = numberOfCards - n_ranks;

        // Check for straight, flush, or straight flush, and return if we can
        // determine immediately that this is the best possible hand
        if(n_ranks >= 5) {
            if(_bitsTable[ss] >= 5) {
                if(_straightTable[ss] != 0) {
                    return HANDTYPE_VALUE_STRAIGHTFLUSH +
                    	(_straightTable[ss] << TOP_CARD_SHIFT);
                }
                else
                    retval = HANDTYPE_VALUE_FLUSH + _topFiveCardsTable[ss];
            }
            else if(_bitsTable[sc] >= 5) {
                if(_straightTable[sc] != 0) {
                    return HANDTYPE_VALUE_STRAIGHTFLUSH +
                    	(_straightTable[sc] << TOP_CARD_SHIFT);
                }
                else
                    retval = HANDTYPE_VALUE_FLUSH + _topFiveCardsTable[sc];
            }
            else if(_bitsTable[sd] >= 5)
            {
                if(_straightTable[sd] != 0) {
                    return HANDTYPE_VALUE_STRAIGHTFLUSH +
                    	(_straightTable[sd] << TOP_CARD_SHIFT);
                }
                else
                    retval = HANDTYPE_VALUE_FLUSH + _topFiveCardsTable[sd];
            }
            else if(_bitsTable[sh] >= 5)
            {
                if(_straightTable[sh] != 0) {
                    return HANDTYPE_VALUE_STRAIGHTFLUSH +
                    	(_straightTable[sh] << TOP_CARD_SHIFT);
                }
                else
                    retval = HANDTYPE_VALUE_FLUSH + _topFiveCardsTable[sh];
            }
            else
            {
                int st = _straightTable[ranks];
                if(st != 0)
                    retval = HANDTYPE_VALUE_STRAIGHT + (st << TOP_CARD_SHIFT);
            };

            /*
               Another win -- if there can't be a FH/Quads (n_dups < 3),
               which is true most of the time when there is a made hand, then if we've
               found a five card hand, just return.  This skips the whole process of
               computing two_mask/three_mask/etc.
            */
            if(retval != 0 && n_dups < 3)
                return retval;
        }

        /*
         * By the time we're here, either:
           1) there's no five-card hand possible (flush or straight), or
           2) there's a flush or straight, but we know that there are enough
              duplicates to make a full house / quads possible.
         */
        switch (n_dups)
        {
            case 0:
                /* It's a no-pair hand */
                return HANDTYPE_VALUE_HIGHCARD + _topFiveCardsTable[ranks];
            case 1:
                {
                    /* It's a one-pair hand */
                    int t, kickers;

                    two_mask = ranks ^ (sc ^ sd ^ sh ^ ss);

                    retval = HANDTYPE_VALUE_PAIR + (_topCardTable[two_mask] << TOP_CARD_SHIFT);
                    t = ranks ^ two_mask;  /* Only one bit set in two_mask */
                    /* Get the top five cards in what is left, drop all but the top three
                     * cards, and shift them by one to get the three desired kickers */
                    kickers = (_topFiveCardsTable[t] >> CARD_WIDTH) & ~FIFTH_CARD_MASK;
                    retval += kickers;
                    return retval;
                }

            case 2:
                /* Either two pair or trips */
                two_mask = ranks ^ (sc ^ sd ^ sh ^ ss);
                if(two_mask != 0)
                {
                    int t = ranks ^ two_mask; /* Exactly two bits set in two_mask */
                    retval = HANDTYPE_VALUE_TWOPAIR
                        + (_topFiveCardsTable[two_mask]
                        & (TOP_CARD_MASK | SECOND_CARD_MASK))
                        + (_topCardTable[t] << THIRD_CARD_SHIFT);

                    return retval;
                }
                else
                {
                    int t, second;
                    three_mask = ((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss));
                    retval = HANDTYPE_VALUE_TRIPS + (_topCardTable[three_mask] << TOP_CARD_SHIFT);
                    t = ranks ^ three_mask; /* Only one bit set in three_mask */
                    second = _topCardTable[t];
                    retval += (second << SECOND_CARD_SHIFT);
                    t ^= (1 << second);
                    retval += _topCardTable[t] << THIRD_CARD_SHIFT;
                    return retval;
                }

            default:
                /* Possible quads, fullhouse, straight or flush, or two pair */
                four_mask = sh & sd & sc & ss;
                if(four_mask != 0)
                {
                    int tc = _topCardTable[four_mask];
                    retval = HANDTYPE_VALUE_FOUR_OF_A_KIND
                        + (tc << TOP_CARD_SHIFT)
                        + ((_topCardTable[ranks ^ (1 << tc)]) << SECOND_CARD_SHIFT);
                    return retval;
                };

                /* Technically, three_mask as defined below is really the set of
                   bits which are set in three or four of the suits, but since
                   we've already eliminated quads, this is OK */
                /* Similarly, two_mask is really two_or_four_mask, but since we've
                   already eliminated quads, we can use this shortcut */

                two_mask = ranks ^ (sc ^ sd ^ sh ^ ss);
                if(_bitsTable[two_mask] != n_dups)
                {
                    /* Must be some trips then, which really means there is a
                       full house since n_dups >= 3 */
                    int tc, t;
                    three_mask = ((sc & sd) | (sh & ss)) & ((sc & sh) | (sd & ss));
                    retval = HANDTYPE_VALUE_FULLHOUSE;
                    tc = _topCardTable[three_mask];
                    retval += (tc << TOP_CARD_SHIFT);
                    t = (two_mask | three_mask) ^ (1 << tc);
                    retval += _topCardTable[t] << SECOND_CARD_SHIFT;
                    return retval;
                };

                if(retval != 0) /* flush and straight */
                    return retval;
                else
                {
                    /* Must be two pair */
                    int top, second;

                    retval = HANDTYPE_VALUE_TWOPAIR;
                    top = _topCardTable[two_mask];
                    retval += (top << TOP_CARD_SHIFT);
                    second = _topCardTable[two_mask ^ (1 << top)];
                    retval += (second << SECOND_CARD_SHIFT);
                    retval += (_topCardTable[ranks ^ (1 << top) ^ (1 << second)]) << THIRD_CARD_SHIFT;
                    return retval;
                }
        }
	}

	/* (non-Javadoc)
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 *//*
	public int compareTo(HandEngine obj) {

		HandEngine h = (HandEngine)obj;
        if (h == null) return -1;
        return (_handValue - h._handValue);
	}*/

	/**
	 * @param aHandValue1
	 * @param aHandValue2
	 * @return positive value if first hand is better, zero if two hands are
	 * 	equivalent, negative value if second hand is better
	 */
	public static int compareTwoHands(int aHandValue1, int aHandValue2) {
		return aHandValue1 - aHandValue2;
	}

	/*
    public boolean Equals(HandEngine obj) {
        return compareTo(obj) == 0;
    }

    public int GetHashCode() {
        return _handValue;
    }*/

    // REDUNDANT: compareTo does all that
    //
    // static public bool operator ==(Hand op1, Hand op2)
    // static public bool operator !=(Hand op1, Hand op2)
    // static public bool operator >(Hand op1, Hand op2)
    // static public bool operator >=(Hand op1, Hand op2)
    // static public bool operator <(Hand op1, Hand op2)
    // static public bool operator <=(Hand op1, Hand op2)

    /**
     * Given a pocket pair mask, the PocketPairType cooresponding to this mask
     * will be returned.
     *
     */
    public static PocketHand169Enum PocketHand169Type(long mask) {

    	if(BitCount(mask) != 2)
    		throw new ArgumentOutOfRangeException(
    				"mask must contain exactly 2 cards");

    	// Fill in dictionary
    	if(_pocketDictionary.size() == 0) {
            for(int i = 0; i < _pocket169Table.length; i++) {
                for(long tmask : _pocket169Table[i]) {
                    _pocketDictionary.put(tmask, PocketHand169Enum.values()[i]);
                }
            }
        }

    	if(_pocketDictionary.containsKey(mask))
            return _pocketDictionary.get(mask);

        return PocketHand169Enum.None;
    }

    /**
     * Enables a foreach command to enumerate all possible ncard hands.
     *
     * @param numberOfCards the number of cards in the hand
     * 	(must be between 1 and 7)
     * @return enumeration with a valid iterator
     * FROM:HandIterator.cs
     */
    public static Iterable<Long> Hands(final int numberOfCards) {
    	return new Iterable<Long>() {
    		@Override
            public HandIterator iterator() {
    			return new HandIterator(numberOfCards);
    		}
    	};
    }

    /**
     * Enables a foreach command to enumerate all possible ncard hands.
     *
     * @param shared Cards that must be in the hand.
     * @param dead Cards that must not be in the hand.
     * @param numberOfCards The total number of cards in the hand, including shared.
     * @return enumeration with a valid iterator
     * FROM:HandIterator.cs
     */
    public static Iterable<Long> Hands(
    		final long shared, final long dead, final int numberOfCards) {

    	return new Iterable<Long>() {
    		@Override
            public HandIteratorEx iterator() {
    			return new HandIteratorEx(shared, dead, numberOfCards);
    		}
    	};
    }

    /**
     * Returns a random hand with the specified number of cards and constrained
     * to not contain any of the passed dead cards.
     *
     * @param dead Mask for the cards that must not be returned.
     * @param ncards The number of cards to return in this hand.
     * @param rand An instance of the Random class.
     * @return A randomly chosen hand containing the number of cards requested.
     * FROM:HandIterator.cs
     */
    static long GetRandomHand(long dead, int ncards, Random rand) {

        long mask = 0L, card;

        for(int i = 0; i < ncards; i++) {
            do {
                card = _cardMasksTable[rand.nextInt(52)];
            } while (((dead | mask) & card) != 0);
            mask |= card;
        }

        return mask;
    }

    /**
     * This function iterates through random hands returning the number of
     * random hands specified in trials. Please note that a mask can be
     * repeated.
     *
     * @param shared Cards that must be in the hand.
     * @param dead Cards that must not be in the hand.
     * @param ncards The total number of cards in the hand, including shared.
     * @param trials The total number of random hands to return.
     * @return A random hand mask meeting the input specifications.
     * FROM:HandIterator.cs
     */
    public static Iterable<Long> RandomHands(
    	final long shared, final long dead, final int ncards, final int trials) {

    	return new Iterable<Long>() {
    		@Override
            public RandomHandIterator iterator() {
    			return new RandomHandIterator(shared, dead, ncards, trials);
    		}
    	};
    }

    /**
     * Iterates through random hands with ncards number of cards. This iterator
     * will return the number of masks specifed in trials. Masks can be
     * repeated.
     *
     * @param ncards Number of cards required to be in the hand.
     * @param trials Number of total mask to return.
     * @return A random hand as a hand mask.
     * FROM:HandIterator.cs
     */
    public static Iterable<Long> RandomHands(int ncards, int trials) {
    	return RandomHands(0L, 0L, ncards, trials);
    }

    /**
     * Fast Bitcounting method (adapted from snippets.org)
     *
     * @param bitField long to count
     * @return number of set bits in long argument
     */
    public static int BitCount(long bitField) {

    	return
        	_bitCountTable[(int)(bitField & 0x00000000000000FFL)] +
        	_bitCountTable[(int)((bitField & 0x000000000000FF00L) >> 8)] +
        	_bitCountTable[(int)((bitField & 0x0000000000FF0000L) >> 16)] +
        	_bitCountTable[(int)((bitField & 0x00000000FF000000L) >> 24)] +
        	_bitCountTable[(int)((bitField & 0x000000FF00000000L) >> 32)] +
        	_bitCountTable[(int)((bitField & 0x0000FF0000000000L) >> 40)] +
        	_bitCountTable[(int)((bitField & 0x00FF000000000000L) >> 48)] +
        	_bitCountTable[(int)((bitField & 0xFF00000000000000L) >> 56)];
    }

	/**
	 * Calculates the wining information about each players hand. Enumerates
	 * all possible remaining hands and tallies win, tie and losses for each
	 * player. This function typically takes well less than a second regardless
	 * of the number of players.
	 *
	 * @param pockets Array of pocket hand string, one for each player
	 * @param board the board cards
	 * @param dead the dead cards
	 * @param wins An array of win tallies, one for each player
	 * @param ties An array of tie tallies, one for each player
	 * @param losses An array of losses tallies, one for each player
	 * @param totalHands The total number of hands enumarated
	 */
	public static void HandOdds(String[] pockets, String board, String dead,
			long[] wins, long[] ties, long[] losses, long[] totalHands) {

        long[] pocketmasks = new long[pockets.length];
        long[] pockethands = new long[pockets.length];

        IntegerRef count = new IntegerRef(0);
        int bestcount;

        long boardmask = 0L, deadcards_mask = 0L;
        long deadcards = HandEngine.parseHand(dead, count);

        totalHands[0] = 0;
        deadcards_mask |= deadcards;

        // Read pocket cards
        for (int i = 0; i < pockets.length; i++)
        {
            count.set(0);
            pocketmasks[i] = HandEngine.parseHand(pockets[i], "", count);
            if (count.get() != 2) {
            	// Must have 2 cards in each pocket card set.
                throw new IllegalArgumentException("There must be two pocket cards.");
            }
            deadcards_mask |= pocketmasks[i];
            wins[i] = ties[i] = losses[i] = 0;
        }

        // Read board cards
        count.set(0);
        boardmask = HandEngine.parseHand("", board, count);

        // The board must have zero or more cards but no more than a total of 5
        if(!(count.get() >= 0 && count.get() <= 5))
        	throw new IllegalArgumentException("Board must have zero or more cards, but max 5");

        // Check pocket cards, board, and dead cards for duplicates
        if((boardmask & deadcards) != 0)
            throw new IllegalArgumentException("Duplicate between dead cards and board");

        // Validate the input
        for(int i = 0; i < pockets.length; i++) {
            for(int j = i + 1; j < pockets.length; j++) {
                if((pocketmasks[i] & pocketmasks[j]) != 0)
                    throw new IllegalArgumentException("Duplicate pocket cards");
            }

            if((pocketmasks[i] & boardmask) != 0)
                throw new IllegalArgumentException("Duplicate between cards pocket and board");

            if((pocketmasks[i] & deadcards) != 0)
            	throw new IllegalArgumentException("Duplicate between cards pocket and dead cards");
        }

        // Iterate through all board possiblities that doesn't include any pocket cards.
        for(long boardhand : Hands(boardmask, deadcards_mask, 5))
        {
            // Evaluate all hands and determine the best hand
            long bestpocket = Evaluate(pocketmasks[0] | boardhand, 7);
            pockethands[0] = bestpocket;
            bestcount = 1;
            for(int i = 1; i < pockets.length; i++) {
                pockethands[i] = Evaluate(pocketmasks[i] | boardhand, 7);
                if(pockethands[i] > bestpocket) {
                    bestpocket = pockethands[i];
                    bestcount = 1;
                }
                else if (pockethands[i] == bestpocket) {
                    bestcount++;
                }
            }

            // Calculate wins/ties/loses for each pocket + board combination.
            for(int i = 0; i < pockets.length; i++) {
                if(pockethands[i] == bestpocket) {
                    if(bestcount > 1)
                        ties[i]++;
                    else
                        wins[i]++;
                }
                else if (pockethands[i] < bestpocket) {
                    losses[i]++;
                }
            }

            totalHands[0]++;
        }
	}

	/**
	 * Returns the number of outs possible with the next card.
	 *
	 * @param player Players pocket cards
	 * @param board The board (must contain either 3 or 4 cards)
	 * @param opponents A list of zero or more opponent cards.
	 * @return The count of the number of single cards that improve the current
	 * 	hand.
	 */
	public static int Outs(long player, long board, long[] opponents) {
		return BitCount(OutsMask(player, board, opponents));
	}

	public static int Outs(long player, long board) {
		return Outs(player, board, new long[0]);
	}

	/**
	 * Creates a Hand mask with the cards that will improve the specified
	 * players hand against a list of opponents or if no opponents are listed
	 * just the cards that improve the players current had. Please note that
	 * this only looks at single cards that improve the hand and will not
	 * specifically look at runner-runner possiblities.
	 *
	 * @param player Players pocket cards
	 * @param board The board (must contain either 3 or 4 cards)
	 * @param opponents A list of zero or more opponent pocket cards
	 * @return A mask of all of the cards taht improve the hand.
	 */
	public static long OutsMask(long player, long board, long[] opponents) {

		long retval = 0L, dead = 0L;
        int ncards = HandEngine.BitCount(player | board);

        // Must have two cards for a legit set of pocket cards
        assert(HandEngine.BitCount(player) == 2);
        if(ncards != 5 && ncards != 6) {
            throw new IllegalArgumentException(
            		"Outs only make sense after the flop and before the river");
        }

        if(opponents.length > 0) {
            // Check opportunities to improve against one or more opponents
            for(long opp : opponents) {
            	// Must have two cards for a legit set of pocket cards
                assert(HandEngine.BitCount(opp) == 2);
                dead |= opp;
            }

            int playerOrigHandVal = HandEngine.Evaluate(player | board, ncards);
            int playerOrigHandType = HandEngine.computeHandType(playerOrigHandVal);
            int playerOrigTopCard = HandEngine.extractTopRankedCard(playerOrigHandVal);
            //_log.debug("playerOrigHandVal: " + playerOrigHandVal + " playerOrigHandType: " + playerOrigHandType + " playerOrigTopCard: " + playerOrigTopCard);

            for(long card : HandEngine.Hands(0L, dead | board | player, 1)) {
            	// _log.debug("card: " + card);
                boolean bWinFlag = true;
                //int[] ncards1 = new int[]{ncards[0]+1};
                //ncards[0]++;
                int playerHandVal = HandEngine.Evaluate(player | board | card, ncards+1);
                int playerNewHandType = HandEngine.computeHandType(playerHandVal);
                int playerNewTopCard = HandEngine.extractTopRankedCard(playerHandVal);
                //_log.debug("playerHandVal: " + playerHandVal + " playerNewHandType: " + playerNewHandType + " playerNewTopCard: " + playerNewTopCard);

                for(long oppmask : opponents) {
                	//int[] ncards2 = new int[]{ncards[0]+1};
                	//ncards[0]++;
                	int oppHandVal = HandEngine.Evaluate(oppmask | board | card, ncards+1);

                    bWinFlag = oppHandVal < playerHandVal && (playerNewHandType > playerOrigHandType || (playerNewHandType == playerOrigHandType && playerNewTopCard > playerOrigTopCard));
                    if (!bWinFlag)
                        break;
                }
                if (bWinFlag)
                    retval |= card;
            }
        }
        else
        {
            // Look at the cards that improve the hand.
            int playerOrigHandVal = HandEngine.Evaluate(player | board, ncards);
            int playerOrigHandType = HandEngine.computeHandType(playerOrigHandVal);
            int playerOrigTopCard = HandEngine.extractTopRankedCard(playerOrigHandVal);

            // Look ahead one card
            for(long card : HandEngine.Hands(0L, dead | board | player, 1)) {
                int playerNewHandVal = HandEngine.Evaluate(player | board | card, ncards+1);
                int playerONewHandType = HandEngine.computeHandType(playerNewHandVal);
                int playerNewTopCard = HandEngine.extractTopRankedCard(playerNewHandVal);
                if (playerONewHandType > playerOrigHandType || (playerONewHandType == playerOrigHandType && playerNewTopCard > playerOrigTopCard))
                    retval |= card;
            }
        }

        return retval;
	}

	/**
	 * This function returns true if the cards in the hand are all one suit.
	 *
	 * @param mask hand to check for "suited-ness"
	 * @return true if all hands are of the same suit, false otherwise.
	 */
	public static boolean IsSuited(long mask) {

		int cards = HandEngine.BitCount(mask);

        int sc = HandEngine.CardMask(mask, Suit.Clubs.ordinal());
        int sd = HandEngine.CardMask(mask, Suit.Diamonds.ordinal());
        int sh = HandEngine.CardMask(mask, Suit.Hearts.ordinal());
        int ss = HandEngine.CardMask(mask, Suit.Spades.ordinal());

        return  HandEngine.BitCount(sc) == cards || HandEngine.BitCount(sd) == cards ||
        	HandEngine.BitCount(sh) == cards || HandEngine.BitCount(ss) == cards;
	}

    /**
     * Returns true if the cards in the two card hand are connected.
     *
     * @param mask the hand to check
     * @return true of all of the cards are next to each other.
     */
    public static boolean IsConnected(long mask) {
        return HandEngine.GapCount(mask) == 0;
    }

    /**
     * Counts the number of empty space between adjacent cards. 0 means
     * connected, 1 means a gap of one, 2 means a gap of two and 3 means a gap
     * of three.
     *
     * @param mask two card hand mask
     * @return number of spaces between two cards
     */
    public static int GapCount(long mask) {

        if(HandEngine.BitCount(mask) != 2) return -1;

    	int start, end;
        int bf = HandEngine.CardMask(mask, Suit.Clubs.ordinal()) |
        			HandEngine.CardMask(mask, Suit.Diamonds.ordinal()) |
        			HandEngine.CardMask(mask, Suit.Hearts.ordinal()) |
        			HandEngine.CardMask(mask, Suit.Spades.ordinal());

        if(HandEngine.BitCount(bf) != 2) return -1;

        for(start = 12; start >= 0; start--) {
            if ((bf & (1L << start)) != 0)
                break;
        }

        for(end = start - 1; end >= 0; end--) {
            if ((bf & (1L << end)) != 0)
                break;
        }

        // Handle wrap
        if(start == 12 && end == 0) return 0;
        if(start == 12 && end == 1) return 1;
        if(start == 12 && end == 2) return 2;
        if(start == 12 && end == 3) return 3;

        return start-end-1;
    }

    public static void HandPlayerOpponentOdds(long ourcards, long board, /*ref*/ double[] player, /*ref*/ double[] opponent) {
    	HandEngine.HandPlayerOpponentOdds(
    			ourcards, board, player, opponent, null);
    }

	/**
	 * Given a set of pocket cards and a set of board cards this function
	 * returns the odds of winning or tying for a player and a random opponent.
	 * If last parameter is passed as null, then results will be divided by
	 * total hands evaluated to effectively return the percentage, otherwise
	 * results will not be divided, and instead total hands evaluated will be
	 * returned back to the caller.
	 *
	 * @param ourcards Pocket mask for the hand.
	 * @param board Board mask for hand
	 * @param player Player odds as doubles, must be size 9
	 * @param opponent Opponent odds as doubles, must be size 9
	 * @param aHandsEv Returned number of evaluated hands
	 */
	public static void HandPlayerOpponentOdds(long ourcards, long board, /*ref*/ double[] player, /*ref*/ double[] opponent, long[] aHandsEv) {
        int ourbest, oppbest;
        int count = 0;
        //int cards = Hand.BitCount(ourcards | board);
        int boardcount = HandEngine.BitCount(board);

        // Preconditions
        if(HandEngine.BitCount(ourcards) != 2)
        	throw new ArgumentOutOfRangeException("pocketcards");
        if(boardcount > 5)
        	throw new ArgumentOutOfRangeException("boardcards");
        if(player.length != opponent.length || player.length != 9)
        	throw new ArgumentOutOfRangeException();

        // Use precalcuated results for pocket cards
        if(boardcount == 0) {
            int index = HandEngine.PocketHand169Type(ourcards).getValue();
            double[] p = HandEngine._preCalcPlayerOddsTable[index];
            for(int x=0; x<p.length; ++x) player[x] = p[x];
            double[] o = HandEngine._preCalcOppOddsTable[index];
            for(int x=0; x<o.length; ++x) opponent[x] = o[x];
            return;
        }

        // initialize return values
        for(int i = 0; i < player.length; i++) {
            player[i] = opponent[i] = 0.0;
        }

        // Calculate results
        for(long oppcards : Hands(0L, ourcards | board, 2)) {
            for(long handmask : Hands(board, ourcards | oppcards, 5)) {
                ourbest = Evaluate(ourcards | handmask, 7);
                oppbest = Evaluate(oppcards | handmask, 7);
                if(ourbest > oppbest) {
                    player[computeHandType(ourbest)] += 1.0;
                    count++;
                }
                else if(ourbest == oppbest) {
                    player[computeHandType(ourbest)] += 0.5;
                    opponent[computeHandType(oppbest)] += 0.5;
                    count++;
                }
                else {
                    opponent[computeHandType(oppbest)] += 1.0;
                    count++;
                }
            }
        }

        if(aHandsEv == null) {
	        for(int i = 0; i < 9; i++) {
	            player[i] = player[i] / count;
	            opponent[i] = opponent[i] / count;
	        }
        }
        else
        	aHandsEv[0] = count;
	}

	/**
	 * Convinience function which calls {@link #HandPlayerOpponentOdds(long, long, double[], double[])}
	 * but parser pocket cards and board cards arguments first.
	 *
	 * @param pocketcards Pocket cards in ASCII
	 * @param boardcards Board cards in ASCII
	 * @param player Player odds as doubles, must be size 9
	 * @param opponent Opponent odds as doubles, must be size 9
	 */
	public static void HandPlayerOpponentOdds(
			String pocketcards, String boardcards,
			/*ref*/ double[] player, /*ref*/ double[] opponent) {

		long pCards = HandEngine.parseHand(pocketcards);
		long bCards = HandEngine.parseHand(boardcards);

		HandEngine.HandPlayerOpponentOdds(pCards, bCards, player, opponent);
	}

	/**
	 * Internal function used by HandPotential.
	 *
	 * @param ourcards
	 * @param board
	 * @param oppcards
	 * @param index
	 * @param HP
	 */
	private static void HandPotentialOpp(long ourcards, long board, long oppcards, int index, /*ref*/ int[][] HP) {

		final int ahead = 2;
        final int tied = 1;
        final int behind = 0;
        //long dead_cards = ourcards | board | oppcards;
        int ourbest, oppbest;

        for(long handmask : HandEngine.Hands(0L, ourcards | board | oppcards, 7 - HandEngine.BitCount(ourcards | board)))
        {
            ourbest = Evaluate(ourcards | board | handmask, 7);
            oppbest = Evaluate(oppcards | board | handmask, 7);
            if (ourbest > oppbest)
                (HP[index][ahead])++;
            else if (ourbest == oppbest)
                (HP[index][tied])++;
            else
                (HP[index][behind])++;
        }
	}

	/**
	 * Returns the positive and negative potential of the current hand. This
	 * funciton is described in Aaron Davidson's masters thesis
	 * (davidson.msc.pdf).
	 *
	 * @param pocket Hold Cards
	 * @param board Community cards
	 * @param ppot Positive Potential
	 * @param npot Negative Potential
	 */
	public static void HandPotential(long pocket, long board, /*out*/ double[] ppot, /*out*/ double[] npot) {

		final int ahead = 2;
        final int tied = 1;
        final int behind = 0;

        int[][] HP = new int[3][3];
        int[] HPTotal = new int[3];
        int cards = HandEngine.BitCount(pocket | board);
        double mult = (cards == 5 ? 990.0 : 45.0);

        if (cards < 5 || cards > 7)
            throw new ArgumentOutOfRangeException();

        // Initialize
        for (int i = 0; i < 3; i++) {
            HPTotal[i] = 0;
            for (int j = 0; j < 3; j++) {
                HP[i][j] = 0;
            }
        }

        // Rank our hand
        int ourrank = Evaluate(pocket | board, BitCount(pocket | board));

        // Mark known cards as dead.
        long dead_cards = pocket | board;

        // Iterate through all possible opponent pocket cards
        for(long oppPocket : Hands(0L, dead_cards, 2)) {
            // Note Current State
            int opprank = Evaluate(oppPocket | board, BitCount(oppPocket | board));
            if(ourrank > opprank) {
                HandPotentialOpp(pocket, board, oppPocket, ahead, /*ref*/ HP);
                HPTotal[ahead]++;
            }
            else if (ourrank == opprank) {
                HandPotentialOpp(pocket, board, oppPocket, tied, /*ref*/ HP);
                HPTotal[tied]++;
            }
            else {
                HandPotentialOpp(pocket, board, oppPocket, behind, /*ref*/ HP);
                HPTotal[behind]++;
            }
        }

        double den1 = (mult * (HPTotal[behind] + (HPTotal[tied] / 2.0)));
        double den2 = (mult * (HPTotal[ahead] + (HPTotal[tied] / 2.0)));
        if (den1 > 0)
            ppot[0] = (HP[behind][ahead] + (HP[behind][tied] / 2) + (HP[tied][ahead] / 2)) / den1;
        else
            ppot[0] = 0;
        if (den2 > 0)
            npot[0] = (HP[ahead][behind] + (HP[ahead][tied] / 2) + (HP[tied][behind] / 2)) / den2;
        else
            npot[0] = 0;
	}

	/**
	 * Returns hand strength (HS) given a player's hand, board cards and
	 * total number of players at the table (including this player).
	 *
	 * @param aPlayer
	 * @param aBoard
	 * @param aPlayerCount
	 * @return
	 */
	public static double getHS(long aPlayer, long aBoard, int aPlayerCount) {

		int boardCount = HandEngine.BitCount(aBoard);
		int playerBest = Evaluate(aPlayer | aBoard, 2+boardCount);
		int wins, ties; wins = ties = 0;
		int count = 0;
        for(long oppcards : Hands(0L, aPlayer | aBoard, 2)) {
        	int oppBest = Evaluate(oppcards | aBoard, 2+boardCount);
        	if(playerBest > oppBest)
        		wins++;
        	else if(playerBest == oppBest)
        		ties++;

        	count++;
        }
		double hs = (wins + (ties * 0.5D)) / count;
		if(aPlayerCount > 2) hs = Math.pow(hs, aPlayerCount);

		if(log.isTraceEnabled())
			log.trace("hs: " + hs + " hands evaluated: " + count);

		return hs;
	}

	public static double getHS(String aPlayer, String aBoard, int aPlayerCount) {
		long thePlayer = HandEngine.parseHand(aPlayer);
		long theBoard = HandEngine.parseHand(aBoard);
		return getHS(thePlayer, theBoard, aPlayerCount);
	}

	/**
	 * Calculates effective hand strength givein a player, board cards and
	 * total players at the table (including this player). Effective hand
	 * strength takes into account a hand strength as well as hand potential.
	 *
	 * @param aPlayer
	 * @param aBoard
	 * @param aPlayerCount
	 * @return
	 */
	public static double getEHS(long aPlayer, long aBoard, int aPlayerCount) {

        double hs = HandEngine.getHS(aPlayer, aBoard, aPlayerCount);
		double[] positivePot = new double[1];
		double[] negativePot = new double[1];
		HandEngine.HandPotential(aPlayer, aBoard, positivePot, negativePot);

		double hsPow = Math.pow(hs, aPlayerCount);
		double ehs = hsPow + ((1 - hsPow) * positivePot[0]);

		return ehs;
	}

	public static double getEHS(String aPlayer, String aBoard, int aPlayerCount) {
		long thePlayer = HandEngine.parseHand(aPlayer);
		long theBoard = HandEngine.parseHand(aBoard);
		return getEHS(thePlayer, theBoard, aPlayerCount);
	}
}